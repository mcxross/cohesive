package com.mcxross.cohesive.csp.processor

import com.google.devtools.ksp.processing.Dependencies
import com.google.devtools.ksp.processing.Resolver
import com.google.devtools.ksp.processing.SymbolProcessorEnvironment
import com.google.devtools.ksp.symbol.KSAnnotated
import com.google.devtools.ksp.validate
import com.mcxross.cohesive.csp.annotation.Cohesive
import java.io.OutputStream

/**
 * Processor for the `@Cohesive` annotation.
 *
 * @param environment The environment in which the processor is being run.
 */
class CohesiveProcessor(private val environment: SymbolProcessorEnvironment) :
  BaseProcessor(environment) {

  /**
   * Process the given resolver and return a list of annotated nodes.
   *
   * @param resolver The resolver to process.
   * @return A list of annotated nodes.
   */
  override fun process(resolver: Resolver): List<KSAnnotated> {

    // Find all class declarations annotated with `@Cohesive`
    val symbols = resolver.findAnnotations(Cohesive::class)

    // If no symbols are found, return an empty list
    if (!symbols.iterator().hasNext()) {
      return emptyList()
    }
    // If more than one symbol is found, log an error and return an empty list
    else if (symbols.toList().size > 1) {
      e(
        "More than one class annotated with @Cohesive found. Only one class can be annotated with @Cohesive"
      )
      return emptyList()
    }

    // Log that the processor is starting
    i("Init ${CohesiveProcessor::class.simpleName}")

    // Create a new file with the dependencies, package name, and file name specified
    val file: OutputStream =
      getCodeGenerator()
        .createNewFile(
          dependencies = Dependencies(false, *resolver.getAllFiles().toList().toTypedArray()),
          packageName = "com.mcxross.cohesive.r",
          fileName = "DefaultCohesiveExtension",
        )
    // Add some generated comments to the file
    file += "//Generated by Cohesive Plugin System Processor\n"
    file += "//Don't edit\n"

    // Add the package declaration to the file
    file += "package com.mcxross.cohesive.r\n\n"

    // Add the import for ExtensionIndex to the file
    file += "import com.mcxross.cohesive.cps.ExtensionIndex\n\n"

    // Add the declaration for the DefaultCohesiveExtension class to the file
    file += "class DefaultCohesiveExtension : ExtensionIndex {\n"
    file += "//List of indexed Extensions\n"
    symbols.forEach { it.accept(CohesiveVisitor(ep = this), Unit) }
    file += "override var extensions = listOf(\n"
    extensions.forEach { file += "\"$it$\",\n" }
    file += ")\n\n"
    file += "}\n"
    i("Done ${CohesiveProcessor::class.simpleName}")
    file.close()

    return symbols.filterNot { it.validate() }.toList()
  }
}
