package com.mcxross.cohesive.cps.processor

import java.io.BufferedWriter
import java.io.FileNotFoundException
import java.io.IOException
import java.nio.file.NoSuchFileException
import javax.annotation.processing.FilerException
import javax.tools.FileObject
import javax.tools.StandardLocation

/**
 * Stores [Extension]s in `META-INF/extensions.idx`.
 *//*

class LegacyExtensionStorage(processor: ExtensionProcessor) :
    ExtensionStorage(processor) {
    override fun read(): Map<String?, Set<String?>?> {
        val extensions: MutableMap<String, Set<String>> = HashMap()
        try {
            val file: FileObject = getFiler().getResource(StandardLocation.CLASS_OUTPUT, "", EXTENSIONS_RESOURCE)
            // TODO try to calculate the extension point
            val entries: Set<String> = HashSet()
            processor.ExtensionStorage.read(file.openReader(true), entries)
            extensions[null] = entries
        } catch (e: FileNotFoundException) {
            // doesn't exist, ignore
        } catch (e: NoSuchFileException) {
        } catch (e: FilerException) {
            // re-opening the file for reading or after writing is ignorable
        } catch (e: IOException) {
            error(e.message!!)
        }
        return extensions
    }

    override fun write(extensions: Map<String?, Set<String?>?>?) {
        try {
            val file: FileObject = getFiler().createResource(StandardLocation.CLASS_OUTPUT, "", EXTENSIONS_RESOURCE)
            BufferedWriter(file.openWriter()).use { writer ->
                writer.write("# Generated by PF4J") // write header
                writer.newLine()
                for ((_, value) in extensions) {
                    for (extension in value) {
                        writer.write(extension)
                        writer.newLine()
                    }
                }
            }
        } catch (e: FileNotFoundException) {
            // it's the first time, create the file
        } catch (e: FilerException) {
            // re-opening the file for reading or after writing is ignorable
        } catch (e: IOException) {
            error(e.toString())
        }
    }

    companion object {
        const val EXTENSIONS_RESOURCE = "META-INF/extensions.idx"
    }
}*/
