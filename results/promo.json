{"version":"3","listProblem":[{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'Item' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/Toast.kt",
      "language": "kotlin",
      "line": 61,
      "offset": 13,
      "length": 4,
      "code": {
        "startLine": 59,
        "length": 4,
        "offset": 25,
        "surroundingCode": "\n@Composable\nprivate fun Item(\n  item: ToastItem,\n  model: ToastModel,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "3c6e1b5d9f60e945a22ec18afed6ec62df9cf14ce663fba6d99e375c6882f41c"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'Toast' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/Toast.kt",
      "language": "kotlin",
      "line": 35,
      "offset": 5,
      "length": 5,
      "code": {
        "startLine": 33,
        "length": 5,
        "offset": 17,
        "surroundingCode": "\n@Composable\nfun Toast(\n  model: ToastModel,\n  modifier: Modifier = Modifier,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "e0a5c1f88b070c1d88376ff745cb3b434a3ae412428b7b553a22e3aef5b5a09f"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'FileTree' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/commonMain/kotlin/com.mcxross.cohesive.mellow/FileTree.kt",
      "language": "kotlin",
      "line": 64,
      "offset": 5,
      "length": 8,
      "code": {
        "startLine": 62,
        "length": 8,
        "offset": 17,
        "surroundingCode": "\n@Composable\nfun FileTree(\n  model: FileTreeModel,\n  onItemClick: (File) -> Unit = {},"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.commonMain",
    "inspectionName": "FunctionName"
  },
  "hash": "f9694742eb887da955ab6e7207048db05ed4446db5602c0f7b0ee9566f250468"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'FileTreeTab' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/commonMain/kotlin/com.mcxross.cohesive.mellow/FileTree.kt",
      "language": "kotlin",
      "line": 47,
      "offset": 5,
      "length": 11,
      "code": {
        "startLine": 45,
        "length": 11,
        "offset": 17,
        "surroundingCode": "\n@Composable\nfun FileTreeTab(\n  text: String,\n) = Surface {"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.commonMain",
    "inspectionName": "FunctionName"
  },
  "hash": "272d4ef0547ab90f8f5bc1b06a274a1d639ad04ea5165771d604740ceec1dc5f"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'FileItemIcon' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/commonMain/kotlin/com.mcxross.cohesive.mellow/FileTree.kt",
      "language": "kotlin",
      "line": 152,
      "offset": 13,
      "length": 12,
      "code": {
        "startLine": 150,
        "length": 12,
        "offset": 25,
        "surroundingCode": "\n@Composable\nprivate fun FileItemIcon(\n  modifier: Modifier,\n  model: FileTreeModel.Item,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.commonMain",
    "inspectionName": "FunctionName"
  },
  "hash": "f9c26ba89a7af372e8c22b8b72297bf5333b4a96116b1dcf82d59f185cde5285"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'FileTreeItem' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/commonMain/kotlin/com.mcxross.cohesive.mellow/FileTree.kt",
      "language": "kotlin",
      "line": 111,
      "offset": 13,
      "length": 12,
      "code": {
        "startLine": 109,
        "length": 12,
        "offset": 25,
        "surroundingCode": "\n@Composable\nprivate fun FileTreeItem(\n  text: String,\n  modifier: Modifier,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.commonMain",
    "inspectionName": "FunctionName"
  },
  "hash": "9b87177c22b5f3a8234a2cc16b0e7a67477e464042f7d037132de8bd3bb353c8"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'EditorSimple' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/commonMain/kotlin/com.mcxross.cohesive.mellow/EditorSimple.kt",
      "language": "kotlin",
      "line": 12,
      "offset": 5,
      "length": 12,
      "code": {
        "startLine": 10,
        "length": 12,
        "offset": 17,
        "surroundingCode": "\n@Composable\nfun EditorSimple(\n  file: File,\n) {"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.commonMain",
    "inspectionName": "FunctionName"
  },
  "hash": "f1d17e66a520670b716a2fae9a41016d207de08847d680be21ba5434ecce7e42"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'WindowButton' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/Button.kt",
      "language": "kotlin",
      "line": 30,
      "offset": 5,
      "length": 12,
      "code": {
        "startLine": 28,
        "length": 12,
        "offset": 56,
        "surroundingCode": "@OptIn(ExperimentalComposeUiApi::class)\n@Composable\nfun WindowButton(\n  onClick: () -> Unit,\n  modifier: Modifier = Modifier,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "f5f7a10caf4519638a62fa59d1a848309c35cf2f2b139f7df8b270428e83f89f"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'Code' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/commonMain/kotlin/com/mcxross/cohesive/common/frontend/impl/ui/widget/md/markup/Code.kt",
      "language": "kotlin",
      "line": 25,
      "offset": 5,
      "length": 4,
      "code": {
        "startLine": 23,
        "length": 4,
        "offset": 51,
        "surroundingCode": "@OptIn(ExperimentalUnitApi::class)\n@Composable\nfun Code(\n  text: String,\n  backgroundColor: Color,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.commonMain",
    "inspectionName": "FunctionName"
  },
  "hash": "478a82988c7ebb9f6a16921aa3fa35f0c8cb995c0307cc1daa7ed6444b4452b3"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'MKStyledText' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/commonMain/kotlin/com/mcxross/cohesive/common/frontend/impl/ui/widget/md/markup/StyledText.kt",
      "language": "kotlin",
      "line": 16,
      "offset": 5,
      "length": 12,
      "code": {
        "startLine": 14,
        "length": 12,
        "offset": 51,
        "surroundingCode": "@OptIn(ExperimentalUnitApi::class)\n@Composable\nfun MKStyledText(\n  text: String,\n  layer: String,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.commonMain",
    "inspectionName": "FunctionName"
  },
  "hash": "75bd0bce1faea163bc3c853f2c4dcb9bb8b24b20d82bf2e9b6c885107a18a4de"
},{
  "tool": "Code Inspection",
  "category": "Probable bugs",
  "type": "Unresolved reference in KDoc",
  "severity": "High",
  "comment": "Cannot resolve symbol 'KeyboardOptions'",
  "detailsInfo": "Reports unresolved references in KDoc comments.\n\n**Example:**\n\n\n      /**\n       * [unresolvedLink]\n       */\n      fun foo() {}\n\nTo fix the problem make the link valid.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/foundation/text/CoreTextField.kt",
      "language": "kotlin",
      "line": 157,
      "offset": 5,
      "length": 15,
      "code": {
        "startLine": 155,
        "length": 15,
        "offset": 185,
        "surroundingCode": " * @param keyboardActions when the input service emits an IME action, the corresponding callback is\n * called. Note that this IME action may be different from what you specified in\n * [KeyboardOptions.imeAction].\n * @param enabled controls the enabled state of the text field. When `false`, the text field will be\n * neither editable nor focusable, the input of the text field will not be selectable"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "KDocUnresolvedReference"
  },
  "hash": "e8893f9a2d2db37de2acfd4f21ae83e1d6581eb47b7d406ada3d37f54b6d7672"
},{
  "tool": "Code Inspection",
  "category": "Probable bugs",
  "type": "Unresolved reference in KDoc",
  "severity": "High",
  "comment": "Cannot resolve symbol 'imeAction'",
  "detailsInfo": "Reports unresolved references in KDoc comments.\n\n**Example:**\n\n\n      /**\n       * [unresolvedLink]\n       */\n      fun foo() {}\n\nTo fix the problem make the link valid.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/foundation/text/CoreTextField.kt",
      "language": "kotlin",
      "line": 157,
      "offset": 21,
      "length": 9,
      "code": {
        "startLine": 155,
        "length": 9,
        "offset": 201,
        "surroundingCode": " * @param keyboardActions when the input service emits an IME action, the corresponding callback is\n * called. Note that this IME action may be different from what you specified in\n * [KeyboardOptions.imeAction].\n * @param enabled controls the enabled state of the text field. When `false`, the text field will be\n * neither editable nor focusable, the input of the text field will not be selectable"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "KDocUnresolvedReference"
  },
  "hash": "f3a993bea82fddcc039c9a9b17d55c0bddf95bf75840ee3daff9d3ab4c5d7376"
},{
  "tool": "Code Inspection",
  "category": "Probable bugs",
  "type": "Unresolved reference in KDoc",
  "severity": "High",
  "comment": "Cannot resolve symbol 'samples'",
  "detailsInfo": "Reports unresolved references in KDoc comments.\n\n**Example:**\n\n\n      /**\n       * [unresolvedLink]\n       */\n      fun foo() {}\n\nTo fix the problem make the link valid.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/foundation/text/InlineTextContent.kt",
      "language": "kotlin",
      "line": 71,
      "offset": 40,
      "length": 7,
      "code": {
        "startLine": 69,
        "length": 7,
        "offset": 140,
        "surroundingCode": " * [androidx.compose.ui.unit.Constraints] and passed through [androidx.compose.ui.layout.Layout].\n *\n * @sample androidx.compose.foundation.samples.InlineTextContentSample\n * @see BasicText\n * @see Placeholder"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "KDocUnresolvedReference"
  },
  "hash": "bb789b4bbf5003202454000db0a6bcb3a50becee298e85ccc8613272ab7f9996"
},{
  "tool": "Code Inspection",
  "category": "Probable bugs",
  "type": "Unresolved reference in KDoc",
  "severity": "High",
  "comment": "Cannot resolve symbol 'InlineTextContentSample'",
  "detailsInfo": "Reports unresolved references in KDoc comments.\n\n**Example:**\n\n\n      /**\n       * [unresolvedLink]\n       */\n      fun foo() {}\n\nTo fix the problem make the link valid.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/foundation/text/InlineTextContent.kt",
      "language": "kotlin",
      "line": 71,
      "offset": 48,
      "length": 23,
      "code": {
        "startLine": 69,
        "length": 23,
        "offset": 148,
        "surroundingCode": " * [androidx.compose.ui.unit.Constraints] and passed through [androidx.compose.ui.layout.Layout].\n *\n * @sample androidx.compose.foundation.samples.InlineTextContentSample\n * @see BasicText\n * @see Placeholder"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "KDocUnresolvedReference"
  },
  "hash": "a8cf371630ecd95aa8646d42dfeaafa6404ac0518f23f4b63a6c744bdf37aac5"
},{
  "tool": "Code Inspection",
  "category": "Probable bugs",
  "type": "Unresolved reference in KDoc",
  "severity": "High",
  "comment": "Cannot resolve symbol 'BasicText'",
  "detailsInfo": "Reports unresolved references in KDoc comments.\n\n**Example:**\n\n\n      /**\n       * [unresolvedLink]\n       */\n      fun foo() {}\n\nTo fix the problem make the link valid.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/foundation/text/InlineTextContent.kt",
      "language": "kotlin",
      "line": 72,
      "offset": 9,
      "length": 9,
      "code": {
        "startLine": 70,
        "length": 9,
        "offset": 82,
        "surroundingCode": " *\n * @sample androidx.compose.foundation.samples.InlineTextContentSample\n * @see BasicText\n * @see Placeholder\n */"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "KDocUnresolvedReference"
  },
  "hash": "2b7b215d6fde3b785fb8ceba12c72c4b374bdf3ae44b9c05348d7ff5c4aff6e6"
},{
  "tool": "Code Inspection",
  "category": "Probable bugs",
  "type": "Unresolved reference in KDoc",
  "severity": "High",
  "comment": "Cannot resolve symbol 'BasicText'",
  "detailsInfo": "Reports unresolved references in KDoc comments.\n\n**Example:**\n\n\n      /**\n       * [unresolvedLink]\n       */\n      fun foo() {}\n\nTo fix the problem make the link valid.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/foundation/text/InlineTextContent.kt",
      "language": "kotlin",
      "line": 33,
      "offset": 32,
      "length": 9,
      "code": {
        "startLine": 31,
        "length": 9,
        "offset": 129,
        "surroundingCode": "/**\n * Used to insert composables into the text layout. This method can be used together with the\n * inlineContent parameter of [BasicText]. It will append the [alternateText] to this\n * [AnnotatedString] and also mark this range of text to be replaced by a composable.\n * [BasicText] will try to find an [InlineTextContent] in the map defined by inlineContent whose"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "KDocUnresolvedReference"
  },
  "hash": "2beb11b3d20e46bc4e9e862852a85f64e1fc97eaa99969937e63cb39a77233e9"
},{
  "tool": "Code Inspection",
  "category": "Probable bugs",
  "type": "Unresolved reference in KDoc",
  "severity": "High",
  "comment": "Cannot resolve symbol 'BasicText'",
  "detailsInfo": "Reports unresolved references in KDoc comments.\n\n**Example:**\n\n\n      /**\n       * [unresolvedLink]\n       */\n      fun foo() {}\n\nTo fix the problem make the link valid.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/foundation/text/InlineTextContent.kt",
      "language": "kotlin",
      "line": 35,
      "offset": 5,
      "length": 9,
      "code": {
        "startLine": 33,
        "length": 9,
        "offset": 176,
        "surroundingCode": " * inlineContent parameter of [BasicText]. It will append the [alternateText] to this\n * [AnnotatedString] and also mark this range of text to be replaced by a composable.\n * [BasicText] will try to find an [InlineTextContent] in the map defined by inlineContent whose\n * key equals to [id], and it will use the [InlineTextContent.children] to replace this range of\n * text."
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "KDocUnresolvedReference"
  },
  "hash": "89a6b9e4c1a10c382e03d1a680fde75d9bef0a62ea45f7c7a73d274a60fc25dc"
},{
  "tool": "Code Inspection",
  "category": "Probable bugs",
  "type": "Unresolved reference in KDoc",
  "severity": "High",
  "comment": "Cannot resolve symbol 'samples'",
  "detailsInfo": "Reports unresolved references in KDoc comments.\n\n**Example:**\n\n\n      /**\n       * [unresolvedLink]\n       */\n      fun foo() {}\n\nTo fix the problem make the link valid.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/foundation/text/InlineTextContent.kt",
      "language": "kotlin",
      "line": 39,
      "offset": 40,
      "length": 7,
      "code": {
        "startLine": 37,
        "length": 7,
        "offset": 51,
        "surroundingCode": " * text.\n *\n * @sample androidx.compose.foundation.samples.InlineTextContentSample\n * @see InlineTextContent\n * @see BasicText"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "KDocUnresolvedReference"
  },
  "hash": "da7a780e4a59e2d536f7415a20575068f44ab0975eaaf50434d9c2efc16d9763"
},{
  "tool": "Code Inspection",
  "category": "Probable bugs",
  "type": "Unresolved reference in KDoc",
  "severity": "High",
  "comment": "Cannot resolve symbol 'InlineTextContentSample'",
  "detailsInfo": "Reports unresolved references in KDoc comments.\n\n**Example:**\n\n\n      /**\n       * [unresolvedLink]\n       */\n      fun foo() {}\n\nTo fix the problem make the link valid.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/foundation/text/InlineTextContent.kt",
      "language": "kotlin",
      "line": 39,
      "offset": 48,
      "length": 23,
      "code": {
        "startLine": 37,
        "length": 23,
        "offset": 59,
        "surroundingCode": " * text.\n *\n * @sample androidx.compose.foundation.samples.InlineTextContentSample\n * @see InlineTextContent\n * @see BasicText"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "KDocUnresolvedReference"
  },
  "hash": "aaadd6829d352cf6160fdc92c8662b4d1cbee7ffccfb4defb75b6680f9f41ce9"
},{
  "tool": "Code Inspection",
  "category": "Probable bugs",
  "type": "Unresolved reference in KDoc",
  "severity": "High",
  "comment": "Cannot resolve symbol 'BasicText'",
  "detailsInfo": "Reports unresolved references in KDoc comments.\n\n**Example:**\n\n\n      /**\n       * [unresolvedLink]\n       */\n      fun foo() {}\n\nTo fix the problem make the link valid.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/foundation/text/InlineTextContent.kt",
      "language": "kotlin",
      "line": 41,
      "offset": 9,
      "length": 9,
      "code": {
        "startLine": 39,
        "length": 9,
        "offset": 105,
        "surroundingCode": " * @sample androidx.compose.foundation.samples.InlineTextContentSample\n * @see InlineTextContent\n * @see BasicText\n *\n * @param id The id used to look up the [InlineTextContent], it is referred by the inlineContent"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "KDocUnresolvedReference"
  },
  "hash": "68aecf0162c8575e0a4c6c459c83a52bc6565e8461c2015a846b51d10d2139d4"
},{
  "tool": "Code Inspection",
  "category": "Probable bugs",
  "type": "Unresolved reference in KDoc",
  "severity": "High",
  "comment": "Cannot resolve symbol 'BasicText'",
  "detailsInfo": "Reports unresolved references in KDoc comments.\n\n**Example:**\n\n\n      /**\n       * [unresolvedLink]\n       */\n      fun foo() {}\n\nTo fix the problem make the link valid.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/foundation/text/InlineTextContent.kt",
      "language": "kotlin",
      "line": 44,
      "offset": 18,
      "length": 9,
      "code": {
        "startLine": 42,
        "length": 9,
        "offset": 117,
        "surroundingCode": " *\n * @param id The id used to look up the [InlineTextContent], it is referred by the inlineContent\n * parameter of [BasicText] to replace the [alternateText] to the corresponding composable.\n * @param alternateText The text to be replaced by the inline content. It's displayed when\n * the inlineContent parameter of [BasicText] doesn't contain [id]."
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "KDocUnresolvedReference"
  },
  "hash": "76e0d7c0920b90d455d27539c68eb526f7ed6ad6317fc73cb28f6651acb95544"
},{
  "tool": "Code Inspection",
  "category": "Probable bugs",
  "type": "Unresolved reference in KDoc",
  "severity": "High",
  "comment": "Cannot resolve symbol 'BasicText'",
  "detailsInfo": "Reports unresolved references in KDoc comments.\n\n**Example:**\n\n\n      /**\n       * [unresolvedLink]\n       */\n      fun foo() {}\n\nTo fix the problem make the link valid.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/foundation/text/InlineTextContent.kt",
      "language": "kotlin",
      "line": 46,
      "offset": 36,
      "length": 9,
      "code": {
        "startLine": 44,
        "length": 9,
        "offset": 218,
        "surroundingCode": " * parameter of [BasicText] to replace the [alternateText] to the corresponding composable.\n * @param alternateText The text to be replaced by the inline content. It's displayed when\n * the inlineContent parameter of [BasicText] doesn't contain [id].\n * Accessibility features will also use this text to describe the inline content.\n * @throws IllegalArgumentException if [alternateText] has zero length."
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "KDocUnresolvedReference"
  },
  "hash": "d905778690a3f3062495c540bd14c8a34551bef1eeddf9fa2e461d1e0bbbcec2"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'selectables' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/foundation/text/selection/SelectionRegistrarImpl.kt",
      "language": "kotlin",
      "line": 41,
      "offset": 3,
      "length": 8,
      "code": {
        "startLine": 39,
        "length": 8,
        "offset": 54,
        "surroundingCode": "   * Getter for handlers that returns a List.\n   */\n  internal val selectables: List<Selectable>\n    get() = _selectables\n"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "77c072cbe93ad7c646c6d388a8506d927eb21b4a5d1d0a1bd93234da7cda0bf1"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'sorted' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/foundation/text/selection/SelectionRegistrarImpl.kt",
      "language": "kotlin",
      "line": 30,
      "offset": 3,
      "length": 8,
      "code": {
        "startLine": 28,
        "length": 8,
        "offset": 76,
        "surroundingCode": "   * A flag to check if the [Selectable]s have already been sorted.\n   */\n  internal var sorted: Boolean = false\n\n  /**"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "4f21efe0d4edb8404d6cabe6145247dc3a2c572c1f7528d4efe64ce249d21ccf"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Call chain on collection type can be simplified",
  "severity": "Moderate",
  "comment": "Call chain on collection type may be simplified",
  "detailsInfo": "Reports two-call chains replaceable by a single call.\n\nIt can help you to avoid redundant code execution.\n\nThe quick-fix replaces the call chain with a single call.\n\n**Example:**\n\n\n      fun main() {\n          listOf(1, 2, 3).filter { it > 1 }.count()\n      }\n\nAfter the quick-fix is applied:\n\n\n      fun main() {\n          listOf(1, 2, 3).count { it > 1 }\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "common/src/commonMain/kotlin/com/mcxross/cohesive/common/ds/tree/TreeNode.kt",
      "language": "kotlin",
      "line": 79,
      "offset": 38,
      "length": 3,
      "code": {
        "startLine": 77,
        "length": 3,
        "offset": 65,
        "surroundingCode": "   */\n  fun height(): Int {\n    val childrenMaxDepth = _children.map { it.height() }\n      .maxOrNull()\n      ?: -1 // -1 because this method counts nodes, and edges are always one less then nodes."
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.commonMain",
    "inspectionName": "SimplifiableCallChain"
  },
  "hash": "e5af1b6244c83dcc05b1fbfed211c4a3cc82bf594680434876f68b0cd505686f"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"removeEdge\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/cps/utils/DirectedGraph.kt",
      "language": "kotlin",
      "line": 54,
      "offset": 7,
      "length": 10,
      "code": {
        "startLine": 52,
        "length": 10,
        "offset": 84,
        "surroundingCode": "   * @throws [IllegalArgumentException] if either vertex doesn't exist.\n   */\n  fun removeEdge(from: V, to: V) {\n    require(containsVertex(from)) { \"Nonexistent vertex $from\" }\n    require(containsVertex(to)) { \"Nonexistent vertex $to\" }"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "c68555a70b430d5f13dea71ebce00595df8ccaafbcc2bba1e16ea482f86d51ff"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"outDegree\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/cps/utils/DirectedGraph.kt",
      "language": "kotlin",
      "line": 67,
      "offset": 7,
      "length": 9,
      "code": {
        "startLine": 65,
        "length": 9,
        "offset": 113,
        "surroundingCode": "   * Report (as a Map) the out-degree (the number of tail ends adjacent to a vertex) of each vertex.\n   */\n  fun outDegree(): Map<V, Int> {\n    val result: MutableMap<V, Int> = HashMap()\n    neighbors.keys.forEach { result[it] = neighbors[it]!!.size }"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "2e5520ee46d8a8fc074afb29def23f5167f9e9653c7c4dc3b2340a54ffef2473"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"removeVertex\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/cps/utils/DirectedGraph.kt",
      "language": "kotlin",
      "line": 36,
      "offset": 7,
      "length": 12,
      "code": {
        "startLine": 34,
        "length": 12,
        "offset": 91,
        "surroundingCode": "\n  /** Remove a vertex from the graph. Also removes any edges adjacent to vertex. */\n  fun removeVertex(vertex: V) {\n    neighbors.remove(vertex)\n  }"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "058b6ca32b917de4b270a5239f2911978a5fa284b00cf3e4f293660c96c5d644"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"isDag\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/cps/utils/DirectedGraph.kt",
      "language": "kotlin",
      "line": 19,
      "offset": 7,
      "length": 5,
      "code": {
        "startLine": 17,
        "length": 5,
        "offset": 65,
        "surroundingCode": "\n  /** True if graph is a dag (directed acyclic graph). */\n  val isDag: Boolean\n    get() = topologicalSort().isNotEmpty()\n"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "dcce726c4268e882b8cd5fbf0fa5afdb7e7fd613d80de05734b3d72be8c0e319"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"v\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "csp/src/main/kotlin/com/mcxross/cohesive/csp/annotation/Net.kt",
      "language": "kotlin",
      "line": 6,
      "offset": 7,
      "length": 1,
      "code": {
        "startLine": 4,
        "length": 1,
        "offset": 45,
        "surroundingCode": "annotation class Net(\n  val k: String,\n  val v: String,\n)\n"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.csp.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "4a491fb79778a77f9d22bfc37cfcf179877960ed3d10eab721c69471f510a39c"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"HandleWidth\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/foundation/text/selection/SelectionHandles.kt",
      "language": "kotlin",
      "line": 22,
      "offset": 14,
      "length": 11,
      "code": {
        "startLine": 20,
        "length": 11,
        "offset": 49,
        "surroundingCode": "import androidx.compose.ui.unit.dp\n\ninternal val HandleWidth = 25.dp\ninternal val HandleHeight = 25.dp\n"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "44da4791628f9c04a6969a635c5a6843feec204046224d329d9b9ebbc67de4a0"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"TipScaffold\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/commonMain/kotlin/com/mcxross/cohesive/common/frontend/impl/ui/widget/TipScaffold.kt",
      "language": "kotlin",
      "line": 10,
      "offset": 5,
      "length": 11,
      "code": {
        "startLine": 8,
        "length": 11,
        "offset": 17,
        "surroundingCode": "\n@Composable\nfun TipScaffold(\n  tip: Boolean,\n  onTip: () -> Unit,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "637ea7800b1ff6b9c38fe2b4f10e63d6d1ed1144c833887aa7b8910545fb1252"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"tipTarget\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/commonMain/kotlin/com/mcxross/cohesive/common/frontend/impl/ui/widget/TipScaffold.kt",
      "language": "kotlin",
      "line": 36,
      "offset": 16,
      "length": 9,
      "code": {
        "startLine": 34,
        "length": 9,
        "offset": 86,
        "surroundingCode": "\n  /** Modifier that marks Compose UI element as a target for [Tip] */\n  fun Modifier.tipTarget(\n    index: Int,\n    style: TipStyle = TipStyle.Default,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "fe906783af543964ce204d0031e92d1e1ec7174d487af493ed2ceab8c2b43fb0"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"addServiceProviderExtensionFinder\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/cps/CompositeExtensionFinder.kt",
      "language": "kotlin",
      "line": 101,
      "offset": 7,
      "length": 33,
      "code": {
        "startLine": 99,
        "length": 33,
        "offset": 11,
        "surroundingCode": "  }\n\n  fun addServiceProviderExtensionFinder() {\n    finders.add(ServiceProviderExtensionFinder(pluginManager))\n  }"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "1da40a8c90e9ad30f5172db559414f6918c4da0a74c62b7fd63a7bd091b57362"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"CreateAccountDialog\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/common/frontend/api/ui/view/IWallet.kt",
      "language": "kotlin",
      "line": 9,
      "offset": 7,
      "length": 19,
      "code": {
        "startLine": 7,
        "length": 19,
        "offset": 21,
        "surroundingCode": "\n  @Composable\n  fun CreateAccountDialog(\n    onClose: () -> Unit,\n    text: String,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "c5fb392fe8339f987c25c7525b18326003fbf99c4e7cc8e2ebca66080d3efd4c"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"ImportAccountDialog\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/common/frontend/api/ui/view/IWallet.kt",
      "language": "kotlin",
      "line": 27,
      "offset": 7,
      "length": 19,
      "code": {
        "startLine": 25,
        "length": 19,
        "offset": 21,
        "surroundingCode": "\n  @Composable\n  fun ImportAccountDialog(\n    onClose: () -> Unit,\n    text: String,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "573fc07cb2ce00e3d087052717a7078145d7e1f810d9efd2ab690dc67c6a62d5"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Interface \"IWallet\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/common/frontend/api/ui/view/IWallet.kt",
      "language": "kotlin",
      "line": 6,
      "offset": 11,
      "length": 7,
      "code": {
        "startLine": 4,
        "length": 7,
        "offset": 46,
        "surroundingCode": "import androidx.compose.ui.unit.Dp\n\ninterface IWallet : IView {\n\n  @Composable"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "54063a68bd6d433b638db174624725d2f01f7ae9ecb9fcfae12c70a908eb4fef"
}]}