{"version":"3","listProblem":[{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Obvious explicit type",
  "severity": "High",
  "comment": "Explicitly given type is redundant here",
  "detailsInfo": "Reports local variables' explicitly given types which are obvious and thus redundant, like `val f: Foo = Foo()`.\n\n**Example:**\n\n\n      class Point(val x: Int, val y: Int)\n\n      fun foo() {\n          val t: Boolean = true\n          val p: Point = Point(1, 2)\n          val i: Int = 42\n      }\n\nAfter the quick-fix is applied:\n\n\n      class Point(val x: Int, val y: Int)\n\n      fun foo() {\n          val t = true\n          val p = Point(1, 2)\n          val i = 42\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/common/frontend/impl/ui/widget/md/parser/Parser.kt",
      "language": "kotlin",
      "line": 30,
      "offset": 13,
      "length": 6,
      "code": {
        "startLine": 28,
        "length": 6,
        "offset": 78,
        "surroundingCode": "\n  val contentBufferReader = BufferedReader(StringReader(string))\n  var line: String = \"\"\n  var isCodeBlock = false\n  val codeBlock = Code(\"\")"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "RedundantExplicitType"
  },
  "hash": "49a1f274cae9e62d55bb0db803974ab695405aaa638cc00b0fa7583d0b4d480b"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'Code' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/commonMain/kotlin/com/mcxross/cohesive/common/frontend/impl/ui/widget/md/markup/Code.kt",
      "language": "kotlin",
      "line": 25,
      "offset": 5,
      "length": 4,
      "code": {
        "startLine": 23,
        "length": 4,
        "offset": 51,
        "surroundingCode": "@OptIn(ExperimentalUnitApi::class)\n@Composable\nfun Code(\n  text: String,\n  backgroundColor: Color,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.commonMain",
    "inspectionName": "FunctionName"
  },
  "hash": "e5054f50c87a6649e8cb75acd1deba82e2ad114a7f432b679823b1d08a8b73a2"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'CursorHandle' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/foundation/text/DesktopCursorHandle.kt",
      "language": "kotlin",
      "line": 25,
      "offset": 14,
      "length": 12,
      "code": {
        "startLine": 23,
        "length": 12,
        "offset": 55,
        "surroundingCode": "@Composable\n@Suppress(\"UNUSED_PARAMETER\")\ninternal fun CursorHandle(\n  handlePosition: Offset,\n  modifier: Modifier,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "64d1eccbeef723565b21a71dcea19c2110947b1ef40142d9f59f80f51cda0b37"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'Checkbox' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/commonMain/kotlin/com/mcxross/cohesive/common/frontend/impl/ui/widget/md/markup/Checkbox.kt",
      "language": "kotlin",
      "line": 19,
      "offset": 5,
      "length": 8,
      "code": {
        "startLine": 17,
        "length": 8,
        "offset": 17,
        "surroundingCode": "\n@Composable\nfun Checkbox(\n  text: String,\n  color: Color,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.commonMain",
    "inspectionName": "FunctionName"
  },
  "hash": "33a728df9379d3d5db6f3c3ad1f15d8b30d52726c16e9bb0e970caf246cb38b8"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'SelectionHandle' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/foundation/text/selection/DesktopSelectionHandles.desktop.kt",
      "language": "kotlin",
      "line": 25,
      "offset": 14,
      "length": 15,
      "code": {
        "startLine": 23,
        "length": 15,
        "offset": 26,
        "surroundingCode": "\n@Composable\ninternal fun SelectionHandle(\n  position: Offset,\n  isStartHandle: Boolean,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "9ad5370a81212bc970c2e120a9faaa5beb4e5855c1481b1ab42bf8c6f364a289"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'FileExplorerDialog' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/common/frontend/impl/ui/screen/MainScreen.kt",
      "language": "kotlin",
      "line": 284,
      "offset": 17,
      "length": 18,
      "code": {
        "startLine": 282,
        "length": 18,
        "offset": 31,
        "surroundingCode": "\n  @Composable\n  protected fun FileExplorerDialog() {\n    var file by remember { mutableStateOf(HomeFolder) }\n    Dialog("
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "9bd91fed90c7f2f75b215cd8c4dfedaa0fd03ae09897eb76be4142f75c871567"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'ClusterMenu' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/common/frontend/impl/ui/screen/MainScreen.kt",
      "language": "kotlin",
      "line": 162,
      "offset": 17,
      "length": 11,
      "code": {
        "startLine": 160,
        "length": 11,
        "offset": 31,
        "surroundingCode": "\n  @Composable\n  protected fun ClusterMenu() {\n    var expanded by remember { mutableStateOf(false) }\n    val suggestions ="
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "61cf26c339002356e0c0a5e11035948d2dadfc4368013e291f98e554889aa733"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'TitleMenuBar' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/common/frontend/impl/ui/screen/MainScreen.kt",
      "language": "kotlin",
      "line": 117,
      "offset": 17,
      "length": 12,
      "code": {
        "startLine": 115,
        "length": 12,
        "offset": 31,
        "surroundingCode": "\n  @Composable\n  protected fun TitleMenuBar() {\n    Column(\n      modifier = Modifier.fillMaxWidth().wrapContentHeight(),"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "e2eba84cebdde128b25722ab72497656520f0e1a16693e8d7c18463d8023af7d"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'Ingest' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/common/frontend/impl/ui/screen/MainScreen.kt",
      "language": "kotlin",
      "line": 305,
      "offset": 13,
      "length": 6,
      "code": {
        "startLine": 303,
        "length": 6,
        "offset": 27,
        "surroundingCode": "\n  @Composable\n  infix fun Ingest(cohesiveView: CohesiveView) {\n    this.cohesiveView = cohesiveView\n    this.cohesiveView::class.annotations.forEach {"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "2b3336fe1da40cd2ad74501dae5e4368481223efe0d04ad733e43a165b2d7755"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'Composition' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/common/frontend/impl/ui/screen/MainScreen.kt",
      "language": "kotlin",
      "line": 268,
      "offset": 17,
      "length": 11,
      "code": {
        "startLine": 266,
        "length": 11,
        "offset": 31,
        "surroundingCode": "\n  @Composable\n  protected fun Composition() {\n    Crossfade(WindowState.view) { view ->\n      when (view) {"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "f2b7d69a8f3b2f56ad80d1e312c32f7a1b3578490dbf593bd8f8465fd29711ad"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'Editor' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/common/frontend/impl/ui/screen/MainScreen.kt",
      "language": "kotlin",
      "line": 254,
      "offset": 17,
      "length": 6,
      "code": {
        "startLine": 252,
        "length": 6,
        "offset": 31,
        "surroundingCode": "\n  @Composable\n  protected fun Editor() {\n    /*if ((WindowState.currentProjectFile as File).isDirectory) {\n      EditorComposite("
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "6396ae14a1a5c0bcf0d3a98e31150f0e8938d0561e5799bd2bb59d7d1a563c09"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'SwitchView' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/common/frontend/impl/ui/screen/MainScreen.kt",
      "language": "kotlin",
      "line": 219,
      "offset": 17,
      "length": 10,
      "code": {
        "startLine": 217,
        "length": 10,
        "offset": 31,
        "surroundingCode": "\n  @Composable\n  protected fun SwitchView() {\n\n    val (selected, setSelected) = remember {"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "d87fb63fe5f160bc87587768ef79783ff83ae4a857b64612fac717d86f25310f"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'SkipButton' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/common/frontend/impl/ui/screen/StoreScreen.kt",
      "language": "kotlin",
      "line": 170,
      "offset": 14,
      "length": 10,
      "code": {
        "startLine": 168,
        "length": 10,
        "offset": 26,
        "surroundingCode": "\n@Composable\ninternal fun SkipButton(\n  modifier: Modifier,\n) {"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "bcf6b39d0f851f010d16ca2a7a400641acd4f8c86a7e57f562dc2f183f927ae9"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'Platform' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/common/frontend/impl/ui/screen/StoreScreen.kt",
      "language": "kotlin",
      "line": 43,
      "offset": 14,
      "length": 8,
      "code": {
        "startLine": 41,
        "length": 8,
        "offset": 66,
        "surroundingCode": "@OptIn(ExperimentalFoundationApi::class)\n@Composable\ninternal fun Platform(secondaryPlugin: SecondaryPlugin) {\n  Column(\n    modifier = Modifier.width(120.dp).wrapContentHeight(),"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "503e335ffdbdea1f504c738a3e51693f94b6974f7aef13e680b118724583e2b9"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'StoreScreen' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/common/frontend/impl/ui/screen/StoreScreen.kt",
      "language": "kotlin",
      "line": 201,
      "offset": 5,
      "length": 11,
      "code": {
        "startLine": 199,
        "length": 11,
        "offset": 17,
        "surroundingCode": "\n@Composable\nfun StoreScreen() {\n  DisableSelection {\n    MellowTheme.Theme {"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "c863fe29739e55f783cb679b91ad5413234f7fe756a26fe1f5d28297166a9adf"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'StoreViewLoading' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/common/frontend/impl/ui/screen/StoreScreen.kt",
      "language": "kotlin",
      "line": 163,
      "offset": 14,
      "length": 16,
      "code": {
        "startLine": 161,
        "length": 16,
        "offset": 26,
        "surroundingCode": "\n@Composable\ninternal fun StoreViewLoading(\n  modifier: Modifier = Modifier.padding(top = 30.dp).fillMaxWidth().height(1.dp),\n) {"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "d38a2ebdd272b0ebe75b99498ca2446bd7ca821aec1bf8540f1b146ce28accc0"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'Platforms' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/common/frontend/impl/ui/screen/StoreScreen.kt",
      "language": "kotlin",
      "line": 147,
      "offset": 14,
      "length": 9,
      "code": {
        "startLine": 145,
        "length": 9,
        "offset": 26,
        "surroundingCode": "\n@Composable\ninternal fun Platforms(\n  modifier: Modifier,\n) {"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "9a4f375415df40d123754dbcbe0832613d09d3067e3700c07262151cae382c03"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'SplashScreen' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/commonMain/kotlin/com/mcxross/cohesive/common/frontend/impl/ui/view/splash/Splash.kt",
      "language": "kotlin",
      "line": 12,
      "offset": 5,
      "length": 12,
      "code": {
        "startLine": 10,
        "length": 12,
        "offset": 17,
        "surroundingCode": "\n@Composable\nfun SplashScreen() {\n  DisableSelection {\n    MaterialTheme(colors = MellowTheme.getColors()) {"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.commonMain",
    "inspectionName": "FunctionName"
  },
  "hash": "9662c4aac339417304dc9e511416eb7512e85efff66aefa516fd6381a90d04bc"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused import directive",
  "severity": "High",
  "comment": "Unused import directive",
  "detailsInfo": "Reports redundant `import` statements.\n\nDefault and unused imports can be safely removed.\n\n**Example:**\n\n\n      import kotlin.*\n      import kotlin.collections.*\n      import kotlin.comparisons.*\n      import kotlin.io.*\n      import kotlin.ranges.*\n      import kotlin.sequences.*\n      import kotlin.text.*\n\n      // jvm specific\n      import java.lang.*\n      import kotlin.jvm.*\n\n      // js specific\n      import kotlin.js.*\n\n      import java.io.* // this import is unused and could be removed\n      import java.util.*\n\n      fun foo(list: ArrayList<String>) {\n          list.add(\"\")\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/commonMain/kotlin/com.mcxross.cohesive.mellow/Button.kt",
      "language": "kotlin",
      "line": 37,
      "offset": 1,
      "length": 42,
      "code": {
        "startLine": 35,
        "length": 42,
        "offset": 73,
        "surroundingCode": "import androidx.compose.ui.Modifier\nimport androidx.compose.ui.draw.clip\nimport androidx.compose.ui.geometry.Offset\nimport androidx.compose.ui.graphics.Brush\nimport androidx.compose.ui.graphics.Color"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.commonMain",
    "inspectionName": "KotlinUnusedImport"
  },
  "hash": "9913cfce2d0e4509b36fa3cabd02632603f8311bb246a7320929a5360232b7ec"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused import directive",
  "severity": "High",
  "comment": "Unused import directive",
  "detailsInfo": "Reports redundant `import` statements.\n\nDefault and unused imports can be safely removed.\n\n**Example:**\n\n\n      import kotlin.*\n      import kotlin.collections.*\n      import kotlin.comparisons.*\n      import kotlin.io.*\n      import kotlin.ranges.*\n      import kotlin.sequences.*\n      import kotlin.text.*\n\n      // jvm specific\n      import java.lang.*\n      import kotlin.jvm.*\n\n      // js specific\n      import kotlin.js.*\n\n      import java.io.* // this import is unused and could be removed\n      import java.util.*\n\n      fun foo(list: ArrayList<String>) {\n          list.add(\"\")\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/commonMain/kotlin/com.mcxross.cohesive.mellow/Button.kt",
      "language": "kotlin",
      "line": 38,
      "offset": 1,
      "length": 41,
      "code": {
        "startLine": 36,
        "length": 41,
        "offset": 80,
        "surroundingCode": "import androidx.compose.ui.draw.clip\nimport androidx.compose.ui.geometry.Offset\nimport androidx.compose.ui.graphics.Brush\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.graphics.Color.Companion.Black"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.commonMain",
    "inspectionName": "KotlinUnusedImport"
  },
  "hash": "3c27dca6dfe7ba9ba01c61387bd9e2028c31365865a313640b9db38582bef645"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused import directive",
  "severity": "High",
  "comment": "Unused import directive",
  "detailsInfo": "Reports redundant `import` statements.\n\nDefault and unused imports can be safely removed.\n\n**Example:**\n\n\n      import kotlin.*\n      import kotlin.collections.*\n      import kotlin.comparisons.*\n      import kotlin.io.*\n      import kotlin.ranges.*\n      import kotlin.sequences.*\n      import kotlin.text.*\n\n      // jvm specific\n      import java.lang.*\n      import kotlin.jvm.*\n\n      // js specific\n      import kotlin.js.*\n\n      import java.io.* // this import is unused and could be removed\n      import java.util.*\n\n      fun foo(list: ArrayList<String>) {\n          list.add(\"\")\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/commonMain/kotlin/com.mcxross.cohesive.mellow/Button.kt",
      "language": "kotlin",
      "line": 44,
      "offset": 1,
      "length": 54,
      "code": {
        "startLine": 42,
        "length": 54,
        "offset": 94,
        "surroundingCode": "import androidx.compose.ui.graphics.Shape\nimport androidx.compose.ui.graphics.painter.Painter\nimport androidx.compose.ui.graphics.vector.ImageVector\nimport androidx.compose.ui.res.painterResource\nimport androidx.compose.ui.text.font.FontWeight"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.commonMain",
    "inspectionName": "KotlinUnusedImport"
  },
  "hash": "60d13dbdd7e97fa2fca9c87d1bf6be501f467dd39e8a820fca895f4014fa16bf"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused import directive",
  "severity": "High",
  "comment": "Unused import directive",
  "detailsInfo": "Reports redundant `import` statements.\n\nDefault and unused imports can be safely removed.\n\n**Example:**\n\n\n      import kotlin.*\n      import kotlin.collections.*\n      import kotlin.comparisons.*\n      import kotlin.io.*\n      import kotlin.ranges.*\n      import kotlin.sequences.*\n      import kotlin.text.*\n\n      // jvm specific\n      import java.lang.*\n      import kotlin.jvm.*\n\n      // js specific\n      import kotlin.js.*\n\n      import java.io.* // this import is unused and could be removed\n      import java.util.*\n\n      fun foo(list: ArrayList<String>) {\n          list.add(\"\")\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/commonMain/kotlin/com.mcxross.cohesive.mellow/Button.kt",
      "language": "kotlin",
      "line": 51,
      "offset": 1,
      "length": 45,
      "code": {
        "startLine": 49,
        "length": 45,
        "offset": 70,
        "surroundingCode": "import androidx.compose.ui.unit.dp\nimport androidx.compose.ui.unit.sp\nimport com.mcxross.cohesive.mellow.icon.Icons\nimport com.mcxross.cohesive.mellow.icon.regular.Code\n"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.commonMain",
    "inspectionName": "KotlinUnusedImport"
  },
  "hash": "707f53ed5deb936673b6ccbe9a8de0239fccbb67696fe2815672efee92df2092"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused import directive",
  "severity": "High",
  "comment": "Unused import directive",
  "detailsInfo": "Reports redundant `import` statements.\n\nDefault and unused imports can be safely removed.\n\n**Example:**\n\n\n      import kotlin.*\n      import kotlin.collections.*\n      import kotlin.comparisons.*\n      import kotlin.io.*\n      import kotlin.ranges.*\n      import kotlin.sequences.*\n      import kotlin.text.*\n\n      // jvm specific\n      import java.lang.*\n      import kotlin.jvm.*\n\n      // js specific\n      import kotlin.js.*\n\n      import java.io.* // this import is unused and could be removed\n      import java.util.*\n\n      fun foo(list: ArrayList<String>) {\n          list.add(\"\")\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/commonMain/kotlin/com.mcxross.cohesive.mellow/Button.kt",
      "language": "kotlin",
      "line": 52,
      "offset": 1,
      "length": 52,
      "code": {
        "startLine": 50,
        "length": 52,
        "offset": 81,
        "surroundingCode": "import androidx.compose.ui.unit.sp\nimport com.mcxross.cohesive.mellow.icon.Icons\nimport com.mcxross.cohesive.mellow.icon.regular.Code\n\n@Composable"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.commonMain",
    "inspectionName": "KotlinUnusedImport"
  },
  "hash": "8619fd377fc3cc96c0297b9fab0310f5d6bf08ddcbe36a46093e7673b0446b8c"
},{
  "tool": "Code Inspection",
  "category": "Probable bugs",
  "type": "Unresolved reference in KDoc",
  "severity": "High",
  "comment": "Cannot resolve symbol 'AbstractExtensionFinder'",
  "detailsInfo": "Reports unresolved references in KDoc comments.\n\n**Example:**\n\n\n      /**\n       * [unresolvedLink]\n       */\n      fun foo() {}\n\nTo fix the problem make the link valid.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/csp/src/main/kotlin/com/mcxross/cohesive/csp/annotation/Extension.kt",
      "language": "kotlin",
      "line": 26,
      "offset": 7,
      "length": 23,
      "code": {
        "startLine": 24,
        "length": 23,
        "offset": 104,
        "surroundingCode": "  /**\n   * An array of plugin IDs, that have to be available in order to load this extension. The\n   * [AbstractExtensionFinder] won't load this extension, if these plugins are not available /\n   * started at runtime.\n   *"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.csp.main",
    "inspectionName": "KDocUnresolvedReference"
  },
  "hash": "7a9b057991434a6e191c3b2ce7b951a017e71a7edf2d1fb5a7d1b43c26f72587"
},{
  "tool": "Code Inspection",
  "category": "Probable bugs",
  "type": "Unresolved reference in KDoc",
  "severity": "High",
  "comment": "Cannot resolve symbol 'AbstractExtensionFinder'",
  "detailsInfo": "Reports unresolved references in KDoc comments.\n\n**Example:**\n\n\n      /**\n       * [unresolvedLink]\n       */\n      fun foo() {}\n\nTo fix the problem make the link valid.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/csp/src/main/kotlin/com/mcxross/cohesive/csp/annotation/Extension.kt",
      "language": "kotlin",
      "line": 31,
      "offset": 7,
      "length": 23,
      "code": {
        "startLine": 29,
        "length": 23,
        "offset": 177,
        "surroundingCode": "   * Notice: This feature requires the optional [ASM library](https://asm.ow2.io/) to be available\n   * on the applications classpath and has to be explicitly enabled via\n   * [AbstractExtensionFinder.setCheckForExtensionDependencies].\n   *\n   * @return plugin IDs, that have to be available in order to load this extension"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.csp.main",
    "inspectionName": "KDocUnresolvedReference"
  },
  "hash": "ad1f28e12a71eac2f1e10f29be0ae8665bd7aa5580f5fa0f45e56214240e119c"
},{
  "tool": "Code Inspection",
  "category": "Probable bugs",
  "type": "Unresolved reference in KDoc",
  "severity": "High",
  "comment": "Cannot resolve symbol 'setCheckForExtensionDependencies'",
  "detailsInfo": "Reports unresolved references in KDoc comments.\n\n**Example:**\n\n\n      /**\n       * [unresolvedLink]\n       */\n      fun foo() {}\n\nTo fix the problem make the link valid.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/csp/src/main/kotlin/com/mcxross/cohesive/csp/annotation/Extension.kt",
      "language": "kotlin",
      "line": 31,
      "offset": 31,
      "length": 32,
      "code": {
        "startLine": 29,
        "length": 32,
        "offset": 201,
        "surroundingCode": "   * Notice: This feature requires the optional [ASM library](https://asm.ow2.io/) to be available\n   * on the applications classpath and has to be explicitly enabled via\n   * [AbstractExtensionFinder.setCheckForExtensionDependencies].\n   *\n   * @return plugin IDs, that have to be available in order to load this extension"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.csp.main",
    "inspectionName": "KDocUnresolvedReference"
  },
  "hash": "d1ca9e1ebc25b470e674edf7a7aa8cb64273b24638401bcced9e57be9804d822"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Function 'isCheckForExtensionDependencies' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/cps/AbstractExtensionFinder.kt",
      "language": "kotlin",
      "line": 247,
      "offset": 7,
      "length": 31,
      "code": {
        "startLine": 245,
        "length": 31,
        "offset": 98,
        "surroundingCode": "   * @return true, if the extension finder checks extensions for its required plugins\n   */\n  fun isCheckForExtensionDependencies(): Boolean {\n    return java.lang.Boolean.TRUE == checkForExtensionDependencies\n  }"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "e1828acadf6284bc875ac965a5408c0725e84b956ebeff47cb63532a88648194"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'checkForExtensionDependencies' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/cps/AbstractExtensionFinder.kt",
      "language": "kotlin",
      "line": 16,
      "offset": 3,
      "length": 9,
      "code": {
        "startLine": 14,
        "length": 9,
        "offset": 129,
        "surroundingCode": "  // cache extension infos by class name\n  @Volatile protected lateinit var extensionInfos: MutableMap<String, ExtensionInfo?>\n  protected var checkForExtensionDependencies: Boolean? = null\n\n  /**"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "9462ca79f079afcf03fe90514e5a88b5976b45a4aeb932b04f893d5fdbf095d1"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"Space\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/commonMain/kotlin/com/mcxross/cohesive/common/frontend/impl/ui/widget/md/markup/Space.kt",
      "language": "kotlin",
      "line": 11,
      "offset": 5,
      "length": 5,
      "code": {
        "startLine": 9,
        "length": 5,
        "offset": 17,
        "surroundingCode": "\n@Composable\nfun Space(\n  modifier: Modifier = Modifier,\n) {"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "ffb6b81df4c8e3134015ceeaeef4d2b159f98986d2647dbf63d0664ec9bfca7e"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"Explorer\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/commonMain/kotlin/com.mcxross.cohesive.mellow/icon/regular/Explorer.kt",
      "language": "kotlin",
      "line": 8,
      "offset": 26,
      "length": 8,
      "code": {
        "startLine": 6,
        "length": 8,
        "offset": 77,
        "surroundingCode": "import com.mcxross.cohesive.mellow.icon.mellowPath\n\npublic val Icons.Regular.Explorer: ImageVector\n  get() {\n    if (_explorer != null) {"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "67f38d3a4717e1df91442ebcfb25366414251a262055ae4c1523723dd0579340"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"DPA\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/cps/ClassLoadingStrategy.kt",
      "language": "kotlin",
      "line": 31,
      "offset": 9,
      "length": 3,
      "code": {
        "startLine": 29,
        "length": 3,
        "offset": 66,
        "surroundingCode": "\n    /** dependencies -> Plugin -> application(parent) */\n    val DPA = ClassLoadingStrategy(listOf(Source.DEPENDENCIES, Source.PLUGIN, Source.APPLICATION))\n\n    /** Plugin -> dependencies -> application(parent) */"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "877ea1eda2c80f467393be08a4975b983b6342274e37620fceed952e3644b56d"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"ADP\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/cps/ClassLoadingStrategy.kt",
      "language": "kotlin",
      "line": 22,
      "offset": 9,
      "length": 3,
      "code": {
        "startLine": 20,
        "length": 3,
        "offset": 66,
        "surroundingCode": "\n    /** application(parent) -> dependencies -> Plugin */\n    val ADP = ClassLoadingStrategy(listOf(Source.APPLICATION, Source.DEPENDENCIES, Source.PLUGIN))\n\n    /** Plugin -> application(parent) -> dependencies */"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "f5a68453236435b6e86034816393efdc1649960beccdfa43d2ae40213a514b55"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"DAP\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/cps/ClassLoadingStrategy.kt",
      "language": "kotlin",
      "line": 28,
      "offset": 9,
      "length": 3,
      "code": {
        "startLine": 26,
        "length": 3,
        "offset": 66,
        "surroundingCode": "\n    /** dependencies -> application(parent) -> Plugin */\n    val DAP = ClassLoadingStrategy(listOf(Source.DEPENDENCIES, Source.APPLICATION, Source.PLUGIN))\n\n    /** dependencies -> Plugin -> application(parent) */"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "331761b9bce8b11317af15ca23d312f9198c24535914803aa9261aa9cc61c2a0"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"PAD\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/cps/ClassLoadingStrategy.kt",
      "language": "kotlin",
      "line": 25,
      "offset": 9,
      "length": 3,
      "code": {
        "startLine": 23,
        "length": 3,
        "offset": 66,
        "surroundingCode": "\n    /** Plugin -> application(parent) -> dependencies */\n    val PAD = ClassLoadingStrategy(listOf(Source.PLUGIN, Source.APPLICATION, Source.DEPENDENCIES))\n\n    /** dependencies -> application(parent) -> Plugin */"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "8f34f019b01e59c78d0440e6335bc775b314e72ff43858de35173daf62fce814"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"TextPreparedSelection\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/foundation/text/selection/TextPreparedSelection.kt",
      "language": "kotlin",
      "line": 350,
      "offset": 16,
      "length": 21,
      "code": {
        "startLine": 348,
        "length": 21,
        "offset": 18,
        "surroundingCode": "}\n\ninternal class TextPreparedSelection(\n  originalText: AnnotatedString,\n  originalSelection: TextRange,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "34504966ca7fb0b8f92b47f962942f6fe190e435aae0d182db7a0d8b5adb7830"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"HandleWidth\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/foundation/text/selection/SelectionHandles.kt",
      "language": "kotlin",
      "line": 22,
      "offset": 14,
      "length": 11,
      "code": {
        "startLine": 20,
        "length": 11,
        "offset": 49,
        "surroundingCode": "import androidx.compose.ui.unit.dp\n\ninternal val HandleWidth = 25.dp\ninternal val HandleHeight = 25.dp\n"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "c83aa32f1ec2588e39cf28456f16fced0c600ae8b9c868baef61471c1a4ab8f1"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "Reports visibility modifiers that match the default visibility of an element (`public` for most elements, `protected` for members that override a protected member).",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/commonMain/kotlin/com.mcxross.cohesive.mellow/icon/regular/Explorer.kt",
      "language": "kotlin",
      "line": 8,
      "offset": 1,
      "length": 6,
      "code": {
        "startLine": 6,
        "length": 6,
        "offset": 52,
        "surroundingCode": "import com.mcxross.cohesive.mellow.icon.mellowPath\n\npublic val Icons.Regular.Explorer: ImageVector\n  get() {\n    if (_explorer != null) {"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.commonMain",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": "7702cbe362734df69ca3b4d5f3a4713f10c9b9edf400ac53028d0500d263d38d"
}]}