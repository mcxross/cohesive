{"version":"3","listProblem":[{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Constructor parameter is never used as a property",
  "severity": "High",
  "comment": "Constructor parameter is never used as a property",
  "detailsInfo": "Reports primary constructor parameters that can have `val` or `var` removed.\n\n\nClass properties declared in the constructor increase memory consumption.\nIf the parameter value is only used in the constructor, you can omit them.\n\nNote that the referenced object might be garbage-collected earlier.\n\n**Example:**\n\n\n      class Task(val name: String) {\n          init {\n              print(\"Task created: $name\")\n          }\n      }\n\nA quick-fix removes the extra `val` or `var` keyword:\n\n\n      class Task(name: String) {\n          init {\n              print(\"Task created: $name\")\n          }\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "csp/src/main/kotlin/com/mcxross/cohesive/csp/processor/ExtensionProcessor.kt",
      "language": "kotlin",
      "line": 11,
      "offset": 34,
      "length": 3,
      "code": {
        "startLine": 9,
        "length": 3,
        "offset": 62,
        "surroundingCode": "import java.io.OutputStream\n\nclass ExtensionProcessor(private val environment: SymbolProcessorEnvironment) :\n  BaseProcessor(environment) {\n"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.csp.main",
    "inspectionName": "CanBeParameter"
  },
  "hash": "78512f753ce729d32553539c94e2ffb915fd820915611da496298742e5c43063"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'SimpleLayout' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/foundation/text/selection/SimpleLayout.kt",
      "language": "kotlin",
      "line": 32,
      "offset": 14,
      "length": 12,
      "code": {
        "startLine": 30,
        "length": 12,
        "offset": 29,
        "surroundingCode": " */\n@Composable\ninternal fun SimpleLayout(modifier: Modifier = Modifier, content: @Composable () -> Unit) {\n  Layout(modifier = modifier, content = content) { measurables, constraints ->\n    val placeables = measurables.fastMap { measurable ->"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "b8eb093e6cb7ed810bb542e6679b604a74beaa98919f8c15e06b299993c99c88"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'OutlinedButton' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/commonMain/kotlin/com.mcxross.cohesive.mellow/Button.kt",
      "language": "kotlin",
      "line": 78,
      "offset": 5,
      "length": 14,
      "code": {
        "startLine": 76,
        "length": 14,
        "offset": 17,
        "surroundingCode": "\n@Composable\nfun OutlinedButton(\n  onClick: () -> Unit,\n  modifier: Modifier = Modifier,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.commonMain",
    "inspectionName": "FunctionName"
  },
  "hash": "69d80b2501a52c770647cfee25a59a4069d43436091fc04aabdf119865443881"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'Button' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/commonMain/kotlin/com.mcxross.cohesive.mellow/Button.kt",
      "language": "kotlin",
      "line": 27,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 25,
        "length": 6,
        "offset": 17,
        "surroundingCode": "\n@Composable\nfun Button(\n  onClick: () -> Unit,\n  modifier: Modifier = Modifier,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.commonMain",
    "inspectionName": "FunctionName"
  },
  "hash": "5c0008677555c40096a65c4ba12bf563e6ba40a6df38ac94a2d4ad1f86f331a7"
},{
  "tool": "Code Inspection",
  "category": "Probable bugs",
  "type": "Unresolved reference in KDoc",
  "severity": "High",
  "comment": "Cannot resolve symbol 'Expression'",
  "detailsInfo": "Reports unresolved references in KDoc comments.\n\n**Example:**\n\n\n      /**\n       * [unresolvedLink]\n       */\n      fun foo() {}\n\nTo fix the problem make the link valid.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/cps/DefaultVersionManager.kt",
      "language": "kotlin",
      "line": 13,
      "offset": 58,
      "length": 10,
      "code": {
        "startLine": 11,
        "length": 10,
        "offset": 110,
        "surroundingCode": "class DefaultVersionManager : VersionManager {\n  /**\n   * Checks if a version satisfies the specified SemVer [Expression] string. If the constraint is\n   * empty or null then the method returns true. Constraint examples: `>2.0.0` (simple), `\">=1.4.0 &\n   * <1.6.0\"` (range). See https://github.com/zafarkhaja/jsemver#semver-expressions-api-ranges for"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "KDocUnresolvedReference"
  },
  "hash": "cae848e48d53c7c21c5c5c4d3c71e81081c14d6bb0e629ac5992b6c7a56c74e5"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Remove unnecessary parentheses",
  "severity": "Moderate",
  "comment": "Parentheses should be removed",
  "detailsInfo": "Reports redundant empty parentheses in annotation entries.\n\nUse the 'Remove unnecessary parentheses' quick-fix to clean up the code.\n\n**Examples:**\n\n\n      annotation class MyAnnotationA\n      annotation class MyAnnotationB(val x: Int)\n      annotation class MyAnnotationC(val x: Int = 10) // default value is present\n\n      @MyAnnotationA() // <== parentheses are redundant\n      fun testA() {\n      }\n\n      @MyAnnotationB() // <== missing argument, parentheses are required\n      fun testB() {\n      }\n\n      @MyAnnotationC() // <== parentheses are redundant\n      fun testC() {\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/TopBar.kt",
      "language": "kotlin",
      "line": 125,
      "offset": 23,
      "length": 2,
      "code": {
        "startLine": 123,
        "length": 2,
        "offset": 97,
        "surroundingCode": "  iconAlpha: Float = DefaultAlpha,\n  iconColorFilter: ColorFilter? = null,\n  content: @Composable() (BoxScope.() -> Unit)? = null\n) = Column(\n  modifier = modifier.fillMaxWidth().height(30.dp),"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "RemoveEmptyParenthesesFromAnnotationEntry"
  },
  "hash": "c0b33c4396677fcbb7f89f5c79aefdca5e042a79f1d059acc207c48000cc2e76"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Function 'loadJars' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/cps/BasePluginLoader.kt",
      "language": "kotlin",
      "line": 65,
      "offset": 3,
      "length": 9,
      "code": {
        "startLine": 63,
        "length": 9,
        "offset": 104,
        "surroundingCode": "\n  /** Add all `*.jar` files from [PluginClasspath.jarsDirectories] to the Plugin's [ClassLoader]. */\n  protected fun loadJars(pluginPath: Path, pluginClassLoader: PluginClassLoader) {\n    pluginClasspath.jarsDirectories.forEach {\n      val file = pluginPath.resolve(it)"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "8d9987ed00bf145324b29c4d4105b7d78d66116e40a43fda077d422727e01ecd"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'pluginClasspath' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/cps/BasePluginLoader.kt",
      "language": "kotlin",
      "line": 15,
      "offset": 7,
      "length": 15,
      "code": {
        "startLine": 13,
        "length": 15,
        "offset": 71,
        "surroundingCode": "open class BasePluginLoader(\n  var pluginManager: PluginManager,\n  var pluginClasspath: PluginClasspath\n) : PluginLoader {\n"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "ccc91a34dd258b9207cb3cb3196181e7a53afc4db7490fc2907703ed7dc8f30d"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Function 'loadClasses' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/cps/BasePluginLoader.kt",
      "language": "kotlin",
      "line": 55,
      "offset": 3,
      "length": 9,
      "code": {
        "startLine": 53,
        "length": 9,
        "offset": 15,
        "surroundingCode": "   * .\n   */\n  protected fun loadClasses(pluginPath: Path, pluginClassLoader: PluginClassLoader) {\n    pluginClasspath.classesDirectories.forEach {\n      val file = pluginPath.resolve(it).toFile()"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "770215490def9497a92c056ead1a2bc32b12aa34bd451c67814622c0c21ee399"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Function 'createPluginClassLoader' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/cps/BasePluginLoader.kt",
      "language": "kotlin",
      "line": 44,
      "offset": 3,
      "length": 9,
      "code": {
        "startLine": 42,
        "length": 9,
        "offset": 7,
        "surroundingCode": "  }\n\n  protected fun createPluginClassLoader(\n    pluginPath: Path,\n    pluginDescriptor: PluginDescriptor,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "225773e82e5b03c3ca1925156f07377c17badaa61fdec124ef944b0fc3de1fae"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'comparator' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/cps/BasePluginRepository.kt",
      "language": "kotlin",
      "line": 20,
      "offset": 7,
      "length": 10,
      "code": {
        "startLine": 18,
        "length": 10,
        "offset": 30,
        "surroundingCode": ") : PluginRepository {\n\n  var comparator: Comparator<File>? = Comparator.comparingLong { obj: File -> obj.lastModified() }\n  override val pluginPaths: List<Path>\n    get() ="
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "80fdcfe94b22bb3f01907d56951e45fbdd58069fba9ab1682fbf22dbb752f925"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'backgroundWhiteMedium' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "common/src/commonMain/kotlin/com.mcxross.cohesive.mellow/MellowTheme.kt",
      "language": "kotlin",
      "line": 44,
      "offset": 9,
      "length": 21,
      "code": {
        "startLine": 42,
        "length": 21,
        "offset": 60,
        "surroundingCode": "\n    val backgroundWhite: Color = Color(0xFFFFFFFF)\n    val backgroundWhiteMedium: Color = Color(0xFFF2F2F2)\n\n    val materialWhite: androidx.compose.material.Colors = lightColors("
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.commonMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "395a45b06a9e29dd155d8693ecf2282fc9c949e9edf702f32af68e9a025bdf2b"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'backgroundWhite' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "common/src/commonMain/kotlin/com.mcxross.cohesive.mellow/MellowTheme.kt",
      "language": "kotlin",
      "line": 43,
      "offset": 9,
      "length": 15,
      "code": {
        "startLine": 41,
        "length": 15,
        "offset": 15,
        "surroundingCode": "    )\n\n    val backgroundWhite: Color = Color(0xFFFFFFFF)\n    val backgroundWhiteMedium: Color = Color(0xFFF2F2F2)\n"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.commonMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "47aa9e005700bb14f2c45e3ec223d2ad663d52604c9ef67aa05d3e6a811915cd"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "'protected' visibility is effectively 'private' in a final class",
  "severity": "Moderate",
  "comment": "'protected' visibility is effectively 'private' in a final class",
  "detailsInfo": "Reports `protected` visibility used inside of a `final` class. In such cases `protected` members are accessible only in the class itself, so they are effectively `private`.\n\n**Example:**\n\n\n      class FinalClass {\n          protected fun foo() {}\n      }\n\nAfter the quick-fix is applied:\n\n\n      class FinalClass {\n          private fun foo() {}\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/cps/DependencyResolver.kt",
      "language": "kotlin",
      "line": 106,
      "offset": 3,
      "length": 9,
      "code": {
        "startLine": 104,
        "length": 9,
        "offset": 21,
        "surroundingCode": "   * @return\n   */\n  protected fun checkDependencyVersion(requiredVersion: String, existingVersion: String): Boolean {\n    return versionManager.checkVersionConstraint(existingVersion, requiredVersion)\n  }"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "ProtectedInFinal"
  },
  "hash": "3e455f12864252c6432265d18799e3ced3d929b597b9d404329351db67cf549f"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "'protected' visibility is effectively 'private' in a final class",
  "severity": "Moderate",
  "comment": "'protected' visibility is effectively 'private' in a final class",
  "detailsInfo": "Reports `protected` visibility used inside of a `final` class. In such cases `protected` members are accessible only in the class itself, so they are effectively `private`.\n\n**Example:**\n\n\n      class FinalClass {\n          protected fun foo() {}\n      }\n\nAfter the quick-fix is applied:\n\n\n      class FinalClass {\n          private fun foo() {}\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/cps/PropertiesPluginDescriptorFinder.kt",
      "language": "kotlin",
      "line": 34,
      "offset": 3,
      "length": 9,
      "code": {
        "startLine": 32,
        "length": 9,
        "offset": 7,
        "surroundingCode": "  }\n\n  protected fun readProperties(pluginPath: Path): Properties {\n    val propertiesPath = getPropertiesPath(pluginPath, propertiesFileName)\n    val properties = Properties()"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "ProtectedInFinal"
  },
  "hash": "d7c0d82bead8bc267eaa99ab4f9a689b8aa0e671908eb75d537104e0e8e5f79e"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "'protected' visibility is effectively 'private' in a final class",
  "severity": "Moderate",
  "comment": "'protected' visibility is effectively 'private' in a final class",
  "detailsInfo": "Reports `protected` visibility used inside of a `final` class. In such cases `protected` members are accessible only in the class itself, so they are effectively `private`.\n\n**Example:**\n\n\n      class FinalClass {\n          protected fun foo() {}\n      }\n\nAfter the quick-fix is applied:\n\n\n      class FinalClass {\n          private fun foo() {}\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/cps/PropertiesPluginDescriptorFinder.kt",
      "language": "kotlin",
      "line": 19,
      "offset": 13,
      "length": 9,
      "code": {
        "startLine": 17,
        "length": 9,
        "offset": 65,
        "surroundingCode": "class PropertiesPluginDescriptorFinder\n@JvmOverloads\nconstructor(protected var propertiesFileName: String = DEFAULT_PROPERTIES_FILE_NAME) :\n  PluginDescriptorFinder {\n  override fun isApplicable(pluginPath: Path): Boolean {"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "ProtectedInFinal"
  },
  "hash": "37cc47c56a146df3928c6cb7d908fdf055604bff7522fff748f39c23c1f42402"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "'protected' visibility is effectively 'private' in a final class",
  "severity": "Moderate",
  "comment": "'protected' visibility is effectively 'private' in a final class",
  "detailsInfo": "Reports `protected` visibility used inside of a `final` class. In such cases `protected` members are accessible only in the class itself, so they are effectively `private`.\n\n**Example:**\n\n\n      class FinalClass {\n          protected fun foo() {}\n      }\n\nAfter the quick-fix is applied:\n\n\n      class FinalClass {\n          private fun foo() {}\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/cps/PropertiesPluginDescriptorFinder.kt",
      "language": "kotlin",
      "line": 53,
      "offset": 3,
      "length": 9,
      "code": {
        "startLine": 51,
        "length": 9,
        "offset": 7,
        "surroundingCode": "  }\n\n  protected fun getPropertiesPath(pluginPath: Path, propertiesFileName: String): Path {\n    return if (pluginPath.isDir()) {\n      pluginPath.resolve(propertiesFileName)"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "ProtectedInFinal"
  },
  "hash": "8ac39270cf120c0537e2a7380f6c13b6dee1b98334965d5c21fdd8153914a236"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "'protected' visibility is effectively 'private' in a final class",
  "severity": "Moderate",
  "comment": "'protected' visibility is effectively 'private' in a final class",
  "detailsInfo": "Reports `protected` visibility used inside of a `final` class. In such cases `protected` members are accessible only in the class itself, so they are effectively `private`.\n\n**Example:**\n\n\n      class FinalClass {\n          protected fun foo() {}\n      }\n\nAfter the quick-fix is applied:\n\n\n      class FinalClass {\n          private fun foo() {}\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/cps/PropertiesPluginDescriptorFinder.kt",
      "language": "kotlin",
      "line": 66,
      "offset": 3,
      "length": 9,
      "code": {
        "startLine": 64,
        "length": 9,
        "offset": 7,
        "surroundingCode": "  }\n\n  protected fun createPluginDescriptor(properties: Properties): PluginDescriptor {\n    val pluginDescriptor: DefaultPluginDescriptor = createPluginDescriptorInstance()\n"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "ProtectedInFinal"
  },
  "hash": "1c707bab21c3a24695a707c8322323c56730e64f402251f787edb5d4f932639b"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "'protected' visibility is effectively 'private' in a final class",
  "severity": "Moderate",
  "comment": "'protected' visibility is effectively 'private' in a final class",
  "detailsInfo": "Reports `protected` visibility used inside of a `final` class. In such cases `protected` members are accessible only in the class itself, so they are effectively `private`.\n\n**Example:**\n\n\n      class FinalClass {\n          protected fun foo() {}\n      }\n\nAfter the quick-fix is applied:\n\n\n      class FinalClass {\n          private fun foo() {}\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/cps/PropertiesPluginDescriptorFinder.kt",
      "language": "kotlin",
      "line": 98,
      "offset": 3,
      "length": 9,
      "code": {
        "startLine": 96,
        "length": 9,
        "offset": 7,
        "surroundingCode": "  }\n\n  protected fun createPluginDescriptorInstance(): DefaultPluginDescriptor {\n    return DefaultPluginDescriptor()\n  }"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "ProtectedInFinal"
  },
  "hash": "c64a30d306c2f18b628f8e0f53e9a5de6e70a95db735ba53488b400282022168"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"serializeStash\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/common/frontend/utils/StateHolder.kt",
      "language": "kotlin",
      "line": 64,
      "offset": 9,
      "length": 14,
      "code": {
        "startLine": 62,
        "length": 14,
        "offset": 15,
        "surroundingCode": "    }\n\n    fun serializeStash() {}\n    /*private suspend fun deserialize(): WindowPOJO {\n      return windowPOJOKStore.get()"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "a82884823f2ec2a80adc2235071b1e526610e292d3e984bc207fabe2107ebe68"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Type alias \"WindowState\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/common/frontend/utils/StateHolder.kt",
      "language": "kotlin",
      "line": 15,
      "offset": 11,
      "length": 11,
      "code": {
        "startLine": 13,
        "length": 11,
        "offset": 51,
        "surroundingCode": "import kotlin.concurrent.fixedRateTimer\n\ntypealias WindowState = StatesHolder.Window\n\n@Serializable"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "49b90b44c474089129582fba9322112071fb9d76b9783c6725dcec114f67ae1f"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"WindowPOJO\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/common/frontend/utils/StateHolder.kt",
      "language": "kotlin",
      "line": 89,
      "offset": 12,
      "length": 10,
      "code": {
        "startLine": 87,
        "length": 10,
        "offset": 26,
        "surroundingCode": "\n@Serializable\ndata class WindowPOJO(\n  val state: WindowState,\n  val view: View,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "90dd426e5b7887cf05fabfcf7a90e1f8bfb1d30d8f737f6e346935415b866846"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"deserializeUnStash\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/common/frontend/utils/StateHolder.kt",
      "language": "kotlin",
      "line": 69,
      "offset": 9,
      "length": 18,
      "code": {
        "startLine": 67,
        "length": 18,
        "offset": 17,
        "surroundingCode": "    }*/\n\n    fun deserializeUnStash() {\n\n    }"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "0d4bedd14c0443ad158862b8784ac8be3f8e68f7ecb9162a475221d359ce9bf7"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"disabledFilePath\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/cps/DefaultPluginStatusProvider.kt",
      "language": "kotlin",
      "line": 25,
      "offset": 7,
      "length": 16,
      "code": {
        "startLine": 23,
        "length": 16,
        "offset": 78,
        "surroundingCode": "  val enabledFilePath: Path\n    get() = getEnabledFilePath(pluginsRoot)\n  val disabledFilePath: Path\n    get() = getDisabledFilePath(pluginsRoot)\n"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "afc600062bd6c0b3207a84e5dcc9d653e522b769708ff811f5cf77bb0ffc464c"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"parse\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/cps/PluginState.kt",
      "language": "kotlin",
      "line": 37,
      "offset": 9,
      "length": 5,
      "code": {
        "startLine": 35,
        "length": 5,
        "offset": 30,
        "surroundingCode": "\n  companion object {\n    fun parse(string: String?): PluginState? {\n      for (status in PluginState.values()) {\n        if (status.toString() == string) {"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "8016a28d534630e0333ade3d9a016703a3e6c6bb8374347dcbea811c8724fcd2"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"backgroundDarkLight\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/commonMain/kotlin/com.mcxross.cohesive.mellow/MellowTheme.kt",
      "language": "kotlin",
      "line": 30,
      "offset": 9,
      "length": 19,
      "code": {
        "startLine": 28,
        "length": 19,
        "offset": 126,
        "surroundingCode": "    private val backgroundDark: Color = Color(0xFF2B2B2B)\n    private val onBackgroundDark: Color = Color(0xFFA9A9A9)\n    val backgroundDarkLight: Color = Color(0xFF4E5254)\n    private val surfaceDark: Color = Color(0xFF3C3F41)\n    private val onSurfaceDark: Color = Color(0xFFA9A9A9)"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "0b632bfe83d7a302e0d05efdab187934d47355cdd9c9e6112f490b41cf89c6a8"
}]}