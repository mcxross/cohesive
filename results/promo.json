{"version":"3","listProblem":[{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Constructor parameter is never used as a property",
  "severity": "High",
  "comment": "Constructor parameter is never used as a property",
  "detailsInfo": "Reports primary constructor parameters that can have `val` or `var` removed.\n\n\nClass properties declared in the constructor increase memory consumption.\nIf the parameter value is only used in the constructor, you can omit them.\n\nNote that the referenced object might be garbage-collected earlier.\n\n**Example:**\n\n\n      class Task(val name: String) {\n          init {\n              print(\"Task created: $name\")\n          }\n      }\n\nA quick-fix removes the extra `val` or `var` keyword:\n\n\n      class Task(name: String) {\n          init {\n              print(\"Task created: $name\")\n          }\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "csp/src/main/kotlin/com/mcxross/cohesive/csp/processor/ExtensionProcessor.kt",
      "language": "kotlin",
      "line": 11,
      "offset": 34,
      "length": 3,
      "code": {
        "startLine": 9,
        "length": 3,
        "offset": 62,
        "surroundingCode": "import java.io.OutputStream\n\nclass ExtensionProcessor(private val environment: SymbolProcessorEnvironment) :\n  BaseProcessor(environment) {\n"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.csp.main",
    "inspectionName": "CanBeParameter"
  },
  "hash": "78512f753ce729d32553539c94e2ffb915fd820915611da496298742e5c43063"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'WindowScaffold' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/WindowScaffold.kt",
      "language": "kotlin",
      "line": 28,
      "offset": 5,
      "length": 14,
      "code": {
        "startLine": 26,
        "length": 14,
        "offset": 17,
        "surroundingCode": "\n@Composable\nfun WindowScaffold(\n  modifier: Modifier = Modifier,\n  topBar: @Composable () -> Unit = {},"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "d30d40141b25830f579a3b72411236438dccbac7e73373295bec054393ec8fb0"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'TipScaffold' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/commonMain/kotlin/com/mcxross/cohesive/common/frontend/impl/ui/widget/TipScaffold.kt",
      "language": "kotlin",
      "line": 10,
      "offset": 5,
      "length": 11,
      "code": {
        "startLine": 8,
        "length": 11,
        "offset": 17,
        "surroundingCode": "\n@Composable\nfun TipScaffold(\n  tip: Boolean,\n  onTip: () -> Unit,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.commonMain",
    "inspectionName": "FunctionName"
  },
  "hash": "9b9e894623261db32741a50d7ece37bdc692eabdb44eeb12d45f7b44b9d85d8b"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'FileTreeTab' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/commonMain/kotlin/com.mcxross.cohesive.mellow/FileTree.kt",
      "language": "kotlin",
      "line": 47,
      "offset": 5,
      "length": 11,
      "code": {
        "startLine": 45,
        "length": 11,
        "offset": 17,
        "surroundingCode": "\n@Composable\nfun FileTreeTab(\n  text: String,\n) = Surface {"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.commonMain",
    "inspectionName": "FunctionName"
  },
  "hash": "272d4ef0547ab90f8f5bc1b06a274a1d639ad04ea5165771d604740ceec1dc5f"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'FileTreeItem' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/commonMain/kotlin/com.mcxross.cohesive.mellow/FileTree.kt",
      "language": "kotlin",
      "line": 111,
      "offset": 13,
      "length": 12,
      "code": {
        "startLine": 109,
        "length": 12,
        "offset": 25,
        "surroundingCode": "\n@Composable\nprivate fun FileTreeItem(\n  text: String,\n  modifier: Modifier,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.commonMain",
    "inspectionName": "FunctionName"
  },
  "hash": "9b87177c22b5f3a8234a2cc16b0e7a67477e464042f7d037132de8bd3bb353c8"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'FileItemIcon' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/commonMain/kotlin/com.mcxross.cohesive.mellow/FileTree.kt",
      "language": "kotlin",
      "line": 152,
      "offset": 13,
      "length": 12,
      "code": {
        "startLine": 150,
        "length": 12,
        "offset": 25,
        "surroundingCode": "\n@Composable\nprivate fun FileItemIcon(\n  modifier: Modifier,\n  model: FileTreeModel.Item,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.commonMain",
    "inspectionName": "FunctionName"
  },
  "hash": "f9c26ba89a7af372e8c22b8b72297bf5333b4a96116b1dcf82d59f185cde5285"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'FileTree' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/commonMain/kotlin/com.mcxross.cohesive.mellow/FileTree.kt",
      "language": "kotlin",
      "line": 64,
      "offset": 5,
      "length": 8,
      "code": {
        "startLine": 62,
        "length": 8,
        "offset": 17,
        "surroundingCode": "\n@Composable\nfun FileTree(\n  model: FileTreeModel,\n  onItemClick: (File) -> Unit = {},"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.commonMain",
    "inspectionName": "FunctionName"
  },
  "hash": "f9694742eb887da955ab6e7207048db05ed4446db5602c0f7b0ee9566f250468"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'EditorTabs' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/commonMain/kotlin/com.mcxross.cohesive.mellow/Editor.kt",
      "language": "kotlin",
      "line": 59,
      "offset": 5,
      "length": 10,
      "code": {
        "startLine": 57,
        "length": 10,
        "offset": 17,
        "surroundingCode": "\n@Composable\nfun EditorTabs(\n  editorManager: EditorManager,\n) ="
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.commonMain",
    "inspectionName": "FunctionName"
  },
  "hash": "a32311169e5247368a2b585fcca4ee02fcf5bfa319d6bfaf9f8a58dbdb505baf"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'Number' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/commonMain/kotlin/com.mcxross.cohesive.mellow/Editor.kt",
      "language": "kotlin",
      "line": 139,
      "offset": 13,
      "length": 6,
      "code": {
        "startLine": 137,
        "length": 6,
        "offset": 25,
        "surroundingCode": "\n@Composable\nprivate fun Number(\n  number: String,\n  modifier: Modifier,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.commonMain",
    "inspectionName": "FunctionName"
  },
  "hash": "7e5841371dff6adc4707fa19291242276dc4b5f6c02b221a203e4796f359691c"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'LineNumber' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/commonMain/kotlin/com.mcxross.cohesive.mellow/Editor.kt",
      "language": "kotlin",
      "line": 116,
      "offset": 14,
      "length": 10,
      "code": {
        "startLine": 114,
        "length": 10,
        "offset": 26,
        "surroundingCode": "\n@Composable\ninternal fun LineNumber(\n  modifier: Modifier,\n  maxNum: String,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.commonMain",
    "inspectionName": "FunctionName"
  },
  "hash": "a33214f18733f1f056a45b13fcc01b574312d1fede36ee3c4e15a207b7916f08"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'Lines' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/commonMain/kotlin/com.mcxross.cohesive.mellow/Editor.kt",
      "language": "kotlin",
      "line": 110,
      "offset": 21,
      "length": 5,
      "code": {
        "startLine": 108,
        "length": 5,
        "offset": 33,
        "surroundingCode": "\n@Composable\ninternal expect fun Lines(\n  textLines: TextLines,\n  fontSize: TextUnit,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.commonMain",
    "inspectionName": "FunctionName"
  },
  "hash": "c105573f9f71fafc37b8161e4e1a516281282735b95bf1e6f61d43f06eb2a661"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'EditorEmpty' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/commonMain/kotlin/com.mcxross.cohesive.mellow/Editor.kt",
      "language": "kotlin",
      "line": 223,
      "offset": 5,
      "length": 11,
      "code": {
        "startLine": 221,
        "length": 11,
        "offset": 17,
        "surroundingCode": "\n@Composable\nfun EditorEmpty(\n  text: String = \"No file opened\",\n) ="
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.commonMain",
    "inspectionName": "FunctionName"
  },
  "hash": "92b4048dbede158c3bc5245046ef1a94b47bb97cabf05e1840fa5522c450fc22"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'EditorTabs' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/commonMain/kotlin/com.mcxross.cohesive.mellow/Editor.kt",
      "language": "kotlin",
      "line": 39,
      "offset": 5,
      "length": 10,
      "code": {
        "startLine": 37,
        "length": 10,
        "offset": 17,
        "surroundingCode": "\n@Composable\nfun EditorTabs(\n  editorCompositeContainer: EditorCompositeContainer,\n  panelState: PanelState,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.commonMain",
    "inspectionName": "FunctionName"
  },
  "hash": "e0f2426f47883abae8e6828420cb0cfb9ca94c9ed71a94eed4322e4ccf41cea8"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'TextField' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/commonMain/kotlin/com.mcxross.cohesive.mellow/Editor.kt",
      "language": "kotlin",
      "line": 153,
      "offset": 12,
      "length": 9,
      "code": {
        "startLine": 151,
        "length": 9,
        "offset": 24,
        "surroundingCode": "\n@Composable\nexpect fun TextField(\n  text: String,\n  isCode: Boolean,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.commonMain",
    "inspectionName": "FunctionName"
  },
  "hash": "02d940713037c412bc104775bb2a35f1ae3043a7131928806729d8fd86e101b3"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'Editor' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/commonMain/kotlin/com.mcxross.cohesive.mellow/Editor.kt",
      "language": "kotlin",
      "line": 76,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 74,
        "length": 6,
        "offset": 17,
        "surroundingCode": "\n@Composable\nfun Editor(\n  model: EditorModel,\n  modifier: Modifier = Modifier,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.commonMain",
    "inspectionName": "FunctionName"
  },
  "hash": "880b893ea43dbbbd5bcd662c5c858cde3fccefc8f2f6214515570083a8c89106"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'CreateAccountDialog' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/common/frontend/api/ui/view/IWallet.kt",
      "language": "kotlin",
      "line": 9,
      "offset": 7,
      "length": 19,
      "code": {
        "startLine": 7,
        "length": 19,
        "offset": 21,
        "surroundingCode": "\n  @Composable\n  fun CreateAccountDialog(\n    onClose: () -> Unit,\n    text: String,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "253c19468f53b630459975660b991c0bb173472288df571c59b95977b321d241"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'ImportAccountDialog' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/common/frontend/api/ui/view/IWallet.kt",
      "language": "kotlin",
      "line": 27,
      "offset": 7,
      "length": 19,
      "code": {
        "startLine": 25,
        "length": 19,
        "offset": 21,
        "surroundingCode": "\n  @Composable\n  fun ImportAccountDialog(\n    onClose: () -> Unit,\n    text: String,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "3e6bfc2468cf7bc748ad5ba3059b99ceb4d36ea189350f1f53008492f5d4fe0a"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'WindowButton' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/Button.kt",
      "language": "kotlin",
      "line": 30,
      "offset": 5,
      "length": 12,
      "code": {
        "startLine": 28,
        "length": 12,
        "offset": 56,
        "surroundingCode": "@OptIn(ExperimentalComposeUiApi::class)\n@Composable\nfun WindowButton(\n  onClick: () -> Unit,\n  modifier: Modifier = Modifier,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "f5f7a10caf4519638a62fa59d1a848309c35cf2f2b139f7df8b270428e83f89f"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'Lines' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/Editor.kt",
      "language": "kotlin",
      "line": 25,
      "offset": 21,
      "length": 5,
      "code": {
        "startLine": 23,
        "length": 5,
        "offset": 33,
        "surroundingCode": "\n@Composable\ninternal actual fun Lines(\n  textLines: TextLines,\n  fontSize: TextUnit,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "40443ba0b9d11f97d6a30ccec22a31ad961404405424e9179848a13e12553e07"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'TextField' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/Editor.kt",
      "language": "kotlin",
      "line": 109,
      "offset": 12,
      "length": 9,
      "code": {
        "startLine": 107,
        "length": 9,
        "offset": 24,
        "surroundingCode": "\n@Composable\nactual fun TextField(\n  text: String,\n  isCode: Boolean,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "de4e7ef5b9680db089ff76353619896c4aa820e14e4afecbdba70814c01ed785"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'Wallet' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "plugin/desktop/cohesive-cohesive/src/main/kotlin/com/mcxross/cohesive/c/view/Wallet.kt",
      "language": "kotlin",
      "line": 22,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 20,
        "length": 6,
        "offset": 17,
        "surroundingCode": "\n@Composable\nfun Wallet() {\n  Box(Modifier.fillMaxSize().background(MaterialTheme.colors.background)) {\n    Column(Modifier.align(Alignment.Center)) {"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.plugin.desktop.cohesive-cohesive.main",
    "inspectionName": "FunctionName"
  },
  "hash": "b3f819a1ed684ca670baa362218213e92bc036058ba782448c9b75bd4e6c81fe"
},{
  "tool": "Code Inspection",
  "category": "Probable bugs",
  "type": "Unresolved reference in KDoc",
  "severity": "High",
  "comment": "Cannot resolve symbol 'SelectionContainer'",
  "detailsInfo": "Reports unresolved references in KDoc comments.\n\n**Example:**\n\n\n      /**\n       * [unresolvedLink]\n       */\n      fun foo() {}\n\nTo fix the problem make the link valid.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/foundation/text/selection/SelectionRegistrar.kt",
      "language": "kotlin",
      "line": 95,
      "offset": 38,
      "length": 18,
      "code": {
        "startLine": 93,
        "length": 18,
        "offset": 44,
        "surroundingCode": "\n  /**\n   * Call this method to notify the [SelectionContainer] that one of the selection handle has\n   * moved and selection should be updated.\n   * The caller of this method should make sure that [notifySelectionUpdateStart] is always"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "KDocUnresolvedReference"
  },
  "hash": "1930dbdaf4a3e5440c5a197bd5725da65005dcb74fa2453ab94cfb21c7a6e590"
},{
  "tool": "Code Inspection",
  "category": "Probable bugs",
  "type": "Unresolved reference in KDoc",
  "severity": "High",
  "comment": "Cannot resolve symbol 'SelectionContainer'",
  "detailsInfo": "Reports unresolved references in KDoc comments.\n\n**Example:**\n\n\n      /**\n       * [unresolvedLink]\n       */\n      fun foo() {}\n\nTo fix the problem make the link valid.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/foundation/text/selection/SelectionRegistrar.kt",
      "language": "kotlin",
      "line": 87,
      "offset": 38,
      "length": 18,
      "code": {
        "startLine": 85,
        "length": 18,
        "offset": 44,
        "surroundingCode": "\n  /**\n   * Call this method to notify the [SelectionContainer] that the selection has been initiated\n   * with selectAll [Selection].\n   *"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "KDocUnresolvedReference"
  },
  "hash": "71047638efb1370ede9665320d59207e8195d7f1927c8a89df17abc298f888b2"
},{
  "tool": "Code Inspection",
  "category": "Probable bugs",
  "type": "Unresolved reference in KDoc",
  "severity": "High",
  "comment": "Cannot resolve symbol 'SelectionContainer'",
  "detailsInfo": "Reports unresolved references in KDoc comments.\n\n**Example:**\n\n\n      /**\n       * [unresolvedLink]\n       */\n      fun foo() {}\n\nTo fix the problem make the link valid.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/foundation/text/selection/SelectionRegistrar.kt",
      "language": "kotlin",
      "line": 61,
      "offset": 38,
      "length": 18,
      "code": {
        "startLine": 59,
        "length": 18,
        "offset": 44,
        "surroundingCode": "\n  /**\n   * Call this method to notify the [SelectionContainer] that the selection has been initiated.\n   * Depends on the input, [notifySelectionUpdate] may be called repeatedly after\n   * [notifySelectionUpdateStart] is called. And [notifySelectionUpdateEnd] should always be"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "KDocUnresolvedReference"
  },
  "hash": "0f1d63580803b28dc8c37801bc756ee3d8571a0e4ddc54bc31c3549ce509405f"
},{
  "tool": "Code Inspection",
  "category": "Probable bugs",
  "type": "Unresolved reference in KDoc",
  "severity": "High",
  "comment": "Cannot resolve symbol 'SelectionContainer'",
  "detailsInfo": "Reports unresolved references in KDoc comments.\n\n**Example:**\n\n\n      /**\n       * [unresolvedLink]\n       */\n      fun foo() {}\n\nTo fix the problem make the link valid.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/foundation/text/selection/SelectionRegistrar.kt",
      "language": "kotlin",
      "line": 132,
      "offset": 38,
      "length": 18,
      "code": {
        "startLine": 130,
        "length": 18,
        "offset": 44,
        "surroundingCode": "\n  /**\n   * Call this method to notify the [SelectionContainer] that the content of the passed\n   * selectable has been changed.\n   *"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "KDocUnresolvedReference"
  },
  "hash": "c663e29bd6a260347bbb3df5192dfce62406e1289dd8b1aba001994dfcf5ce1e"
},{
  "tool": "Code Inspection",
  "category": "Probable bugs",
  "type": "Unresolved reference in KDoc",
  "severity": "High",
  "comment": "Cannot resolve symbol 'SelectionContainer'",
  "detailsInfo": "Reports unresolved references in KDoc comments.\n\n**Example:**\n\n\n      /**\n       * [unresolvedLink]\n       */\n      fun foo() {}\n\nTo fix the problem make the link valid.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/foundation/text/selection/SelectionRegistrar.kt",
      "language": "kotlin",
      "line": 124,
      "offset": 38,
      "length": 18,
      "code": {
        "startLine": 122,
        "length": 18,
        "offset": 44,
        "surroundingCode": "\n  /**\n   * Call this method to notify the [SelectionContainer] that the selection update has stopped.\n   *\n   * @see notifySelectionUpdateStart"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "KDocUnresolvedReference"
  },
  "hash": "bec0725870cbfc37e341dd3de59007dace3d8f65a3053e6f1755742b2029338a"
},{
  "tool": "Code Inspection",
  "category": "Probable bugs",
  "type": "Unresolved reference in KDoc",
  "severity": "High",
  "comment": "Cannot resolve symbol 'plugins'",
  "detailsInfo": "Reports unresolved references in KDoc comments.\n\n**Example:**\n\n\n      /**\n       * [unresolvedLink]\n       */\n      fun foo() {}\n\nTo fix the problem make the link valid.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/commonMain/kotlin/com/mcxross/cohesive/common/frontend/model/Platform.kt",
      "language": "kotlin",
      "line": 9,
      "offset": 14,
      "length": 7,
      "code": {
        "startLine": 7,
        "length": 7,
        "offset": 101,
        "surroundingCode": " * @property k A list of Chain flavor.\n * @property v A list of Chain flavor URL paths.\n * @property plugins A list of Primary Plugins available(installed and non-installed).\n */\nobject Platform {"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.commonMain",
    "inspectionName": "KDocUnresolvedReference"
  },
  "hash": "24bd9de91e7467310b6b873cab0f364fa0e58034888ac48cdb624fdbc8819067"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Explicit 'get' or 'set' call",
  "severity": "Info",
  "comment": "Should be replaced with indexing",
  "detailsInfo": "Reports explicit calls to `get` or `set` functions which can be replaced by an indexing operator `[]`.\n\n\nKotlin allows custom implementations for the predefined set of operators on types.\nTo overload an operator, you can mark the corresponding function with the `operator` modifier:\n\n\n      operator fun get(index: Int) {}\n      operator fun set(index: Int, value: Int) {}\n        \nThe functions above correspond to the indexing operator.\n\n**Example:**\n\n      class Test {\n          operator fun get(i: Int): Int = 0\n      }\n\n      fun test() {\n          Test().get(0) // replaceable 'get()'\n      }\n\nAfter the quick-fix is applied:\n\n      class Test {\n          operator fun get(i: Int): Int = 0\n      }\n\n      fun test() {\n          Test()[0]\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/common/frontend/impl/ui/widget/md/parser/Parser.kt",
      "language": "kotlin",
      "line": 171,
      "offset": 64,
      "length": 3,
      "code": {
        "startLine": 169,
        "length": 3,
        "offset": 105,
        "surroundingCode": "    ) {\n      isComponentTriggered = true\n      val imageUrl = line.split(MarkdownKeysManager.IMAGE_END).get(1).replace(\")\", \"\")\n      if (isImagePath(imageUrl)) {\n        emit(Image(imageUrl))"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "ReplaceGetOrSet"
  },
  "hash": "f3757d5dcf52f1c3c0dddc8868121587fd5a4fdac8bcde6f87306b9d50f7a4a4"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Explicit 'get' or 'set' call",
  "severity": "Info",
  "comment": "Should be replaced with indexing",
  "detailsInfo": "Reports explicit calls to `get` or `set` functions which can be replaced by an indexing operator `[]`.\n\n\nKotlin allows custom implementations for the predefined set of operators on types.\nTo overload an operator, you can mark the corresponding function with the `operator` modifier:\n\n\n      operator fun get(index: Int) {}\n      operator fun set(index: Int, value: Int) {}\n        \nThe functions above correspond to the indexing operator.\n\n**Example:**\n\n      class Test {\n          operator fun get(i: Int): Int = 0\n      }\n\n      fun test() {\n          Test().get(0) // replaceable 'get()'\n      }\n\nAfter the quick-fix is applied:\n\n      class Test {\n          operator fun get(i: Int): Int = 0\n      }\n\n      fun test() {\n          Test()[0]\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/common/frontend/impl/ui/widget/md/parser/Parser.kt",
      "language": "kotlin",
      "line": 181,
      "offset": 64,
      "length": 3,
      "code": {
        "startLine": 179,
        "length": 3,
        "offset": 167,
        "surroundingCode": "    if (line.startsWith(MarkdownKeysManager.IMAGE_WITHOUT_TAG_KEY)) {\n      isComponentTriggered = true\n      val imageUrl = line.split(MarkdownKeysManager.IMAGE_END).get(1).replace(\")\", \"\")\n      if (isImagePath(imageUrl)) {\n        emit(Image(imageUrl))"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "ReplaceGetOrSet"
  },
  "hash": "65a00340856a156634299427b303dd6afe7ea0e911d551adc752f75cca1ad838"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Explicit 'get' or 'set' call",
  "severity": "Info",
  "comment": "Should be replaced with indexing",
  "detailsInfo": "Reports explicit calls to `get` or `set` functions which can be replaced by an indexing operator `[]`.\n\n\nKotlin allows custom implementations for the predefined set of operators on types.\nTo overload an operator, you can mark the corresponding function with the `operator` modifier:\n\n\n      operator fun get(index: Int) {}\n      operator fun set(index: Int, value: Int) {}\n        \nThe functions above correspond to the indexing operator.\n\n**Example:**\n\n      class Test {\n          operator fun get(i: Int): Int = 0\n      }\n\n      fun test() {\n          Test().get(0) // replaceable 'get()'\n      }\n\nAfter the quick-fix is applied:\n\n      class Test {\n          operator fun get(i: Int): Int = 0\n      }\n\n      fun test() {\n          Test()[0]\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/common/frontend/impl/ui/widget/md/parser/Parser.kt",
      "language": "kotlin",
      "line": 219,
      "offset": 28,
      "length": 3,
      "code": {
        "startLine": 217,
        "length": 3,
        "offset": 103,
        "surroundingCode": "    ) {\n      val fragments = line.split(MarkdownKeysManager.LINK_CONTAINS)\n      val text = fragments.get(0).replace(\"[\", \"\")\n      val link = fragments.get(1).replace(\")\", \"\")\n      emit(Link(text, link))"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "ReplaceGetOrSet"
  },
  "hash": "f0b9dc5f4394b698a5a988662afd137785dda7b69bdbf5709e18d6ee3c1e4631"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Explicit 'get' or 'set' call",
  "severity": "Info",
  "comment": "Should be replaced with indexing",
  "detailsInfo": "Reports explicit calls to `get` or `set` functions which can be replaced by an indexing operator `[]`.\n\n\nKotlin allows custom implementations for the predefined set of operators on types.\nTo overload an operator, you can mark the corresponding function with the `operator` modifier:\n\n\n      operator fun get(index: Int) {}\n      operator fun set(index: Int, value: Int) {}\n        \nThe functions above correspond to the indexing operator.\n\n**Example:**\n\n      class Test {\n          operator fun get(i: Int): Int = 0\n      }\n\n      fun test() {\n          Test().get(0) // replaceable 'get()'\n      }\n\nAfter the quick-fix is applied:\n\n      class Test {\n          operator fun get(i: Int): Int = 0\n      }\n\n      fun test() {\n          Test()[0]\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/common/frontend/impl/ui/widget/md/parser/Parser.kt",
      "language": "kotlin",
      "line": 220,
      "offset": 28,
      "length": 3,
      "code": {
        "startLine": 218,
        "length": 3,
        "offset": 146,
        "surroundingCode": "      val fragments = line.split(MarkdownKeysManager.LINK_CONTAINS)\n      val text = fragments.get(0).replace(\"[\", \"\")\n      val link = fragments.get(1).replace(\")\", \"\")\n      emit(Link(text, link))\n      isComponentTriggered = true"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "ReplaceGetOrSet"
  },
  "hash": "ff494ad520b810028508485823039a6d30a6490fb11b9a68e1be58d2c43b537e"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant constructor body",
  "severity": "Moderate",
  "comment": "Remove empty constructor body",
  "detailsInfo": "Reports empty bodies of secondary constructors.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/cps/DefaultPluginRepository.kt",
      "language": "kotlin",
      "line": 26,
      "offset": 85,
      "length": 2,
      "code": {
        "startLine": 24,
        "length": 2,
        "offset": 91,
        "surroundingCode": "    }\n\n  constructor(vararg pluginsRoots: Path) : this(mutableListOf<Path>(*pluginsRoots)) {}\n\n  fun filter(): AndFileFilter {"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "RemoveEmptySecondaryConstructorBody"
  },
  "hash": "d418fafae8d09081296fbec81bb8926102f5dfe0c9cc1fc9e804eb4bd0523adc"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Call chain on collection type can be simplified",
  "severity": "Moderate",
  "comment": "Call chain on collection type may be simplified",
  "detailsInfo": "Reports two-call chains replaceable by a single call.\n\nIt can help you to avoid redundant code execution.\n\nThe quick-fix replaces the call chain with a single call.\n\n**Example:**\n\n\n      fun main() {\n          listOf(1, 2, 3).filter { it > 1 }.count()\n      }\n\nAfter the quick-fix is applied:\n\n\n      fun main() {\n          listOf(1, 2, 3).count { it > 1 }\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "common/src/commonMain/kotlin/com/mcxross/cohesive/common/ds/tree/TreeNode.kt",
      "language": "kotlin",
      "line": 79,
      "offset": 38,
      "length": 3,
      "code": {
        "startLine": 77,
        "length": 3,
        "offset": 65,
        "surroundingCode": "   */\n  fun height(): Int {\n    val childrenMaxDepth = _children.map { it.height() }\n      .maxOrNull()\n      ?: -1 // -1 because this method counts nodes, and edges are always one less then nodes."
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.commonMain",
    "inspectionName": "SimplifiableCallChain"
  },
  "hash": "e5af1b6244c83dcc05b1fbfed211c4a3cc82bf594680434876f68b0cd505686f"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"TextPreparedSelection\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/foundation/text/selection/TextPreparedSelection.kt",
      "language": "kotlin",
      "line": 350,
      "offset": 16,
      "length": 21,
      "code": {
        "startLine": 348,
        "length": 21,
        "offset": 18,
        "surroundingCode": "}\n\ninternal class TextPreparedSelection(\n  originalText: AnnotatedString,\n  originalSelection: TextRange,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "5fdf6cf8481c2865fdfa7c352e825a3991dab89c9deb7b97fc326cd168ddaf26"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"disabledFilePath\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/cps/DefaultPluginStatusProvider.kt",
      "language": "kotlin",
      "line": 25,
      "offset": 7,
      "length": 16,
      "code": {
        "startLine": 23,
        "length": 16,
        "offset": 78,
        "surroundingCode": "  val enabledFilePath: Path\n    get() = getEnabledFilePath(pluginsRoot)\n  val disabledFilePath: Path\n    get() = getDisabledFilePath(pluginsRoot)\n"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "afc600062bd6c0b3207a84e5dcc9d653e522b769708ff811f5cf77bb0ffc464c"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"names\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/cps/RuntimeMode.kt",
      "language": "kotlin",
      "line": 5,
      "offset": 15,
      "length": 5,
      "code": {
        "startLine": 3,
        "length": 5,
        "offset": 54,
        "surroundingCode": "enum class RuntimeMode(\n  // deployment\n  private val names: String,\n  vararg val aliases: String,\n) {"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "a0de9500ebb4bd26ac99cec92d40bff2af867bb8852b5e437681b94310a87531"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Constructor is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/cps/DevelopmentPluginRepository.kt",
      "language": "kotlin",
      "line": 14,
      "offset": 3,
      "length": 11,
      "code": {
        "startLine": 12,
        "length": 11,
        "offset": 49,
        "surroundingCode": "\n  override var filter: FileFilter? = filter()\n  constructor(vararg pluginsRoots: Path) : this(mutableListOf<Path>(*pluginsRoots))\n\n  fun filter(): AndFileFilter {"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "29d60c215d1d3171ecf5e0d6abe03fd4a276065fc2b85fa378f36f81b5d6eda7"
}]}