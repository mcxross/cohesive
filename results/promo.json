{"version":"3","listProblem":[{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Obvious explicit type",
  "severity": "High",
  "comment": "Explicitly given type is redundant here",
  "detailsInfo": "Reports local variables' explicitly given types which are obvious and thus redundant, like `val f: Foo = Foo()`.\n\n**Example:**\n\n\n      class Point(val x: Int, val y: Int)\n\n      fun foo() {\n          val t: Boolean = true\n          val p: Point = Point(1, 2)\n          val i: Int = 42\n      }\n\nAfter the quick-fix is applied:\n\n\n      class Point(val x: Int, val y: Int)\n\n      fun foo() {\n          val t = true\n          val p = Point(1, 2)\n          val i = 42\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "cps/src/main/kotlin/com/mcxross/cohesive/cps/AbstractPluginManager.kt",
      "language": "kotlin",
      "line": 731,
      "offset": 28,
      "length": 13,
      "code": {
        "startLine": 729,
        "length": 13,
        "offset": 124,
        "surroundingCode": "        // create the plugin wrapper\n        Log.d { \"Creating wrapper for plugin $pluginPath\" }\n        val pluginWrapper: PluginWrapper =\n            PluginWrapper(this, pluginDescriptor, pluginPath, pluginClassLoader)\n        pluginWrapper.setPluginFactory(pluginFactory)"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cps.main",
    "inspectionName": "RedundantExplicitType"
  },
  "hash": "98d0e1591d7b19d9c5f73c78ba4872618f0c1aa8d78b0317005f87b0876e44cd"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'Checkbox' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/commonMain/kotlin/com/mcxross/cohesive/common/frontend/ui/widget/md/markup/Checkbox.kt",
      "language": "kotlin",
      "line": 19,
      "offset": 5,
      "length": 8,
      "code": {
        "startLine": 17,
        "length": 8,
        "offset": 17,
        "surroundingCode": "\n@Composable\nfun Checkbox(\n    text: String,\n    color: Color,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.commonMain",
    "inspectionName": "FunctionName"
  },
  "hash": "ba2e68ea1b9076600d59154c58506641fb5b399aa4aeb4c0b5e29af6a2c7fc05"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'BoldText' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/commonMain/kotlin/com/mcxross/cohesive/common/frontend/ui/widget/md/markup/BoldText.kt",
      "language": "kotlin",
      "line": 12,
      "offset": 5,
      "length": 8,
      "code": {
        "startLine": 10,
        "length": 8,
        "offset": 17,
        "surroundingCode": "\n@Composable\nfun BoldText(\n    text: String,\n    color: Color,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.commonMain",
    "inspectionName": "FunctionName"
  },
  "hash": "a208c62b53d892f7ee96c6afb24ec0c16e6735a87eb3b31ac57605ce3e35153a"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'Wallet' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/commonMain/kotlin/com/mcxross/cohesive/common/frontend/ui/view/wallet/Wallet.kt",
      "language": "kotlin",
      "line": 6,
      "offset": 12,
      "length": 6,
      "code": {
        "startLine": 4,
        "length": 6,
        "offset": 24,
        "surroundingCode": "\n@Composable\nexpect fun Wallet()"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.commonMain",
    "inspectionName": "FunctionName"
  },
  "hash": "edc89a6929c91ce5577b27c3b4ef1ef14ae53346d9b13ac2fdabdd07c3b4652e"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'Code' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/commonMain/kotlin/com/mcxross/cohesive/common/frontend/ui/widget/md/markup/Code.kt",
      "language": "kotlin",
      "line": 18,
      "offset": 5,
      "length": 4,
      "code": {
        "startLine": 16,
        "length": 4,
        "offset": 51,
        "surroundingCode": "@OptIn(ExperimentalUnitApi::class)\n@Composable\nfun Code(\n    text: String,\n    backgroundColor: Color,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.commonMain",
    "inspectionName": "FunctionName"
  },
  "hash": "fb6847991aaaeed6aae598175d96a85bfd8e24e951691603d0a748b4edfaf83e"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'Card' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/Card.kt",
      "language": "kotlin",
      "line": 25,
      "offset": 5,
      "length": 4,
      "code": {
        "startLine": 23,
        "length": 4,
        "offset": 56,
        "surroundingCode": "@OptIn(ExperimentalComposeUiApi::class)\n@Composable\nfun Card(\n    modifier: Modifier = Modifier,\n    width: Dp,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "cf84e1a69111b183f1f6a8f902bab0b4f5c44cbe7fe56bbea7015d3ea121856a"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'EditorComposite' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/commonMain/kotlin/com.mcxross.cohesive.mellow/EditorComposite.kt",
      "language": "kotlin",
      "line": 18,
      "offset": 5,
      "length": 15,
      "code": {
        "startLine": 16,
        "length": 15,
        "offset": 17,
        "surroundingCode": "\n@Composable\nfun EditorComposite(\n    text: String = \"Project\",\n    file: File,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.commonMain",
    "inspectionName": "FunctionName"
  },
  "hash": "a532845009b1ac5e1e222bc4d035cdf870ca85c3fea96be4f24bee8dbbd55426"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'MenuItemView' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/Menu.kt",
      "language": "kotlin",
      "line": 153,
      "offset": 13,
      "length": 12,
      "code": {
        "startLine": 151,
        "length": 12,
        "offset": 64,
        "surroundingCode": "@OptIn(ExperimentalComposeUiApi::class)\n@Composable\nprivate fun MenuItemView(index: Int, item: MenuTree.Item) {\n    var isPerformingOnEnterTask by remember { mutableStateOf(true) }\n    var isPerformingOnExitTask by remember { mutableStateOf(true) }"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "7e2eb887ab5d2d7b7fabfeea6dd35ccf95601317be802b5247e9abd407b9484d"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'DropDown' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/Menu.kt",
      "language": "kotlin",
      "line": 124,
      "offset": 13,
      "length": 8,
      "code": {
        "startLine": 122,
        "length": 8,
        "offset": 25,
        "surroundingCode": "\n@Composable\nprivate fun DropDown(model: MenuTree, width: Dp = 200.dp) {\n\n    var offSetX = 0.dp"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "1a8c97e086b24bfbf9c4a643c7255d14ea25fba7745f007326f319856cfd8ca8"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'Menu' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/Menu.kt",
      "language": "kotlin",
      "line": 107,
      "offset": 5,
      "length": 4,
      "code": {
        "startLine": 105,
        "length": 4,
        "offset": 17,
        "surroundingCode": "\n@Composable\nfun Menu(model: MenuTree, onClicked: () -> Unit) {\n    fun onClick() {\n        onClicked()"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "588e60c828ef81e2533de962321f35b6f43cacc819d141463802c1e944fa6ee7"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'App' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/commonMain/kotlin/com/mcxross/cohesive/common/App.kt",
      "language": "kotlin",
      "line": 7,
      "offset": 5,
      "length": 3,
      "code": {
        "startLine": 5,
        "length": 3,
        "offset": 17,
        "surroundingCode": "\n@Composable\nfun App() {\n\n    Text(\"Cohesive\")"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.commonMain",
    "inspectionName": "FunctionName"
  },
  "hash": "3528f681809305f3a546297c6db94e78e7c02cb4080fdfc71b5326990a836a67"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'Wallet' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/common/frontend/ui/view/wallet/Wallet.kt",
      "language": "kotlin",
      "line": 21,
      "offset": 12,
      "length": 6,
      "code": {
        "startLine": 19,
        "length": 6,
        "offset": 24,
        "surroundingCode": "\n@Composable\nactual fun Wallet() {\n    val walle = Walle()\n    Box(Modifier.fillMaxSize().background(MaterialTheme.colors.background)) {"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "6c7746312271b2b9a1d925d7dac538bc981f5e3bdcdf85867e293d2e2c1d6158"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'Theme' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/commonMain/kotlin/com.mcxross.cohesive.mellow/MellowTheme.kt",
      "language": "kotlin",
      "line": 64,
      "offset": 9,
      "length": 5,
      "code": {
        "startLine": 62,
        "length": 5,
        "offset": 25,
        "surroundingCode": "\n    @Composable\n    fun Theme(content: @Composable () -> Unit) {\n        androidx.compose.material.MaterialTheme(\n            colors = getColors(),"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.commonMain",
    "inspectionName": "FunctionName"
  },
  "hash": "79bbaacb4dbb56a8ad812425b98873068527938f67a5e1b5187bff17e06f22e7"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused import directive",
  "severity": "High",
  "comment": "Unused import directive",
  "detailsInfo": "Reports redundant `import` statements.\n\nDefault and unused imports can be safely removed.\n\n**Example:**\n\n\n      import kotlin.*\n      import kotlin.collections.*\n      import kotlin.comparisons.*\n      import kotlin.io.*\n      import kotlin.ranges.*\n      import kotlin.sequences.*\n      import kotlin.text.*\n\n      // jvm specific\n      import java.lang.*\n      import kotlin.jvm.*\n\n      // js specific\n      import kotlin.js.*\n\n      import java.io.* // this import is unused and could be removed\n      import java.util.*\n\n      fun foo(list: ArrayList<String>) {\n          list.add(\"\")\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "common/src/commonMain/kotlin/com/mcxross/cohesive/common/frontend/ui/widget/Markdown.kt",
      "language": "kotlin",
      "line": 14,
      "offset": 1,
      "length": 70,
      "code": {
        "startLine": 12,
        "length": 70,
        "offset": 108,
        "surroundingCode": "import androidx.compose.ui.graphics.Color\nimport com.mcxross.cohesive.common.frontend.ui.widget.md.markup.*\nimport com.mcxross.cohesive.common.frontend.ui.widget.md.parser.Parser\nimport com.mcxross.cohesive.mellow.VerticalScrollbar\nimport kotlinx.coroutines.launch"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.commonMain",
    "inspectionName": "KotlinUnusedImport"
  },
  "hash": "852659e6bfc90cf92fe1034a921b8929c7145dd5fbb54831cf888f0ba80381e6"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant empty primary constructor",
  "severity": "Moderate",
  "comment": "Remove empty primary constructor",
  "detailsInfo": "Reports empty primary constructors when they are implicitly available anyway.\n\n\nA primary constructor is redundant and can be safely omitted when it does not have any annotations or visibility modifiers.\nUse the 'Remove empty primary constructor' quick-fix to clean up the code.\n\n**Examples:**\n\n\n      class MyClassA constructor() //  redundant, can be replaced with 'class MyClassA'\n\n      annotation class MyAnnotation\n      class MyClassB @MyAnnotation constructor() //  required because of annotation\n\n      class MyClassC private constructor() // required because of visibility modifier\n",
  "sources": [
    {
      "type": "file",
      "path": "cps/src/main/kotlin/com/mcxross/cohesive/cps/DependencyResolver.kt",
      "language": "kotlin",
      "line": 230,
      "offset": 36,
      "length": 2,
      "code": {
        "startLine": 228,
        "length": 2,
        "offset": 104,
        "surroundingCode": "     * It will be thrown if a cyclic dependency is detected.\n     */\n    class CyclicDependencyException() : PluginRuntimeException(\"Cyclic dependencies\")\n\n    /**"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cps.main",
    "inspectionName": "RemoveEmptyPrimaryConstructor"
  },
  "hash": "c31573f776c40a2102fc55e8f826af6030bfce0a7d8e01d47ee3f8dff11337e6"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Remove unnecessary parentheses",
  "severity": "Moderate",
  "comment": "Parentheses should be removed",
  "detailsInfo": "Reports redundant empty parentheses in annotation entries.\n\nUse the 'Remove unnecessary parentheses' quick-fix to clean up the code.\n\n**Examples:**\n\n\n      annotation class MyAnnotationA\n      annotation class MyAnnotationB(val x: Int)\n      annotation class MyAnnotationC(val x: Int = 10) // default value is present\n\n      @MyAnnotationA() // <== parentheses are redundant\n      fun testA() {\n      }\n\n      @MyAnnotationB() // <== missing argument, parentheses are required\n      fun testB() {\n      }\n\n      @MyAnnotationC() // <== parentheses are redundant\n      fun testC() {\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/TopBar.kt",
      "language": "kotlin",
      "line": 111,
      "offset": 25,
      "length": 2,
      "code": {
        "startLine": 109,
        "length": 2,
        "offset": 103,
        "surroundingCode": "    iconAlpha: Float = DefaultAlpha,\n    iconColorFilter: ColorFilter? = null,\n    content: @Composable() (BoxScope.() -> Unit)? = null\n) = Column(\n        modifier = modifier.fillMaxWidth().height(30.dp)"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "RemoveEmptyParenthesesFromAnnotationEntry"
  },
  "hash": "08e55ca704521a92a74d02c8b3b15f2fabbc7d0e851726bb468abad602967617"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Remove unnecessary parentheses",
  "severity": "Moderate",
  "comment": "Parentheses should be removed",
  "detailsInfo": "Reports redundant empty parentheses in annotation entries.\n\nUse the 'Remove unnecessary parentheses' quick-fix to clean up the code.\n\n**Examples:**\n\n\n      annotation class MyAnnotationA\n      annotation class MyAnnotationB(val x: Int)\n      annotation class MyAnnotationC(val x: Int = 10) // default value is present\n\n      @MyAnnotationA() // <== parentheses are redundant\n      fun testA() {\n      }\n\n      @MyAnnotationB() // <== missing argument, parentheses are required\n      fun testB() {\n      }\n\n      @MyAnnotationC() // <== parentheses are redundant\n      fun testC() {\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/TopBar.kt",
      "language": "kotlin",
      "line": 38,
      "offset": 29,
      "length": 2,
      "code": {
        "startLine": 36,
        "length": 2,
        "offset": 132,
        "surroundingCode": "    minimizeIconModifier: Modifier = Modifier,\n    minimizeIconDescription: String = \"Minimize window\",\n    menuContent: @Composable() (RowScope.() -> Unit)? = null,\n    content: @Composable() (RowScope.() -> Unit)? = null,\n) = WindowDraggableArea {"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "RemoveEmptyParenthesesFromAnnotationEntry"
  },
  "hash": "a9b75712a9bddb850b1242671a2f916184685bb9e20a12635990992cb33b137b"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Remove unnecessary parentheses",
  "severity": "Moderate",
  "comment": "Parentheses should be removed",
  "detailsInfo": "Reports redundant empty parentheses in annotation entries.\n\nUse the 'Remove unnecessary parentheses' quick-fix to clean up the code.\n\n**Examples:**\n\n\n      annotation class MyAnnotationA\n      annotation class MyAnnotationB(val x: Int)\n      annotation class MyAnnotationC(val x: Int = 10) // default value is present\n\n      @MyAnnotationA() // <== parentheses are redundant\n      fun testA() {\n      }\n\n      @MyAnnotationB() // <== missing argument, parentheses are required\n      fun testB() {\n      }\n\n      @MyAnnotationC() // <== parentheses are redundant\n      fun testC() {\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/TopBar.kt",
      "language": "kotlin",
      "line": 39,
      "offset": 25,
      "length": 2,
      "code": {
        "startLine": 37,
        "length": 2,
        "offset": 143,
        "surroundingCode": "    minimizeIconDescription: String = \"Minimize window\",\n    menuContent: @Composable() (RowScope.() -> Unit)? = null,\n    content: @Composable() (RowScope.() -> Unit)? = null,\n) = WindowDraggableArea {\n        Column("
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "RemoveEmptyParenthesesFromAnnotationEntry"
  },
  "hash": "3ab821144b3fb5275cf92181c16998d0730e26f90b128e4744bb079404401b0c"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'wrapper' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "cps/src/main/kotlin/com/mcxross/cohesive/cps/Plugin.kt",
      "language": "kotlin",
      "line": 12,
      "offset": 9,
      "length": 7,
      "code": {
        "startLine": 10,
        "length": 7,
        "offset": 46,
        "surroundingCode": "     * Wrapper of the plugin.\n     */\n    var wrapper: PluginWrapper\n\n    /**"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cps.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "aabe65f149247eb009c3565404d13eb11348937fa0f3be63b9ec2e68c78bcc60"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Function 'getAnnotationValue' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "cps/src/main/kotlin/com/mcxross/cohesive/cps/utils/ClassUtil.kt",
      "language": "kotlin",
      "line": 85,
      "offset": 9,
      "length": 18,
      "code": {
        "startLine": 83,
        "length": 18,
        "offset": 82,
        "surroundingCode": "     * @throws NullPointerException if `annotationMirror` is null\n     */\n    fun getAnnotationValue(annotationMirror: AnnotationMirror, annotationParameter: String): AnnotationValue? {\n       /* for ((key, value): Map.Entry<ExecutableElement?, AnnotationValue?> in annotationMirror.elementValues) {\n            if (key!!.simpleName.toString() == annotationParameter) {"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cps.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "233a0af5dc40219f3f36e2e5d20a62c67bf6690d060c0f4da2cf69cadde8736d"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Function 'getAllInterfaces' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "cps/src/main/kotlin/com/mcxross/cohesive/cps/utils/ClassUtil.kt",
      "language": "kotlin",
      "line": 13,
      "offset": 9,
      "length": 16,
      "code": {
        "startLine": 11,
        "length": 16,
        "offset": 15,
        "surroundingCode": "    }\n\n    fun getAllInterfaces(aClass: Class<*>?): List<Class<*>> {\n        var aClass1 = aClass\n        val list: MutableList<Class<*>> = ArrayList()"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cps.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "911a48a35fbd955d93d6dd2042ceed437f40aa12715d6f1dad698354e4ab234d"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Function 'getAnnotationMirror' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "cps/src/main/kotlin/com/mcxross/cohesive/cps/utils/ClassUtil.kt",
      "language": "kotlin",
      "line": 61,
      "offset": 9,
      "length": 19,
      "code": {
        "startLine": 59,
        "length": 19,
        "offset": 98,
        "surroundingCode": "     * @throws NullPointerException if `typeElement` or `annotationClass` is null\n     */\n    fun getAnnotationMirror(typeElement: TypeElement, annotationClass: Class<*>): AnnotationMirror? {\n        val annotationClassName = annotationClass.name\n        for (m in typeElement.annotationMirrors) {"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cps.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "e2a3c850da87f36419e26ed5f7ff271afde35a8d732163e305bacbfb82e3c27b"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "'protected' visibility is effectively 'private' in a final class",
  "severity": "Moderate",
  "comment": "'protected' visibility is effectively 'private' in a final class",
  "detailsInfo": "Reports `protected` visibility used inside of a `final` class. In such cases `protected` members are accessible only in the class itself, so they are effectively `private`.\n\n**Example:**\n\n\n      class FinalClass {\n          protected fun foo() {}\n      }\n\nAfter the quick-fix is applied:\n\n\n      class FinalClass {\n          private fun foo() {}\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "cps/src/main/kotlin/com/mcxross/cohesive/cps/PluginClassLoader.kt",
      "language": "kotlin",
      "line": 182,
      "offset": 5,
      "length": 9,
      "code": {
        "startLine": 180,
        "length": 9,
        "offset": 11,
        "surroundingCode": "    }\n\n    protected fun findResourceFromDependencies(name: String?): URL? {\n        Log.v { \"Search in dependencies for resource $name\" }\n        val dependencies: List<PluginDependency> = pluginDescriptor.dependencies!!"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cps.main",
    "inspectionName": "ProtectedInFinal"
  },
  "hash": "b830e1f22f044a0430179c3d1789ec943b75bfb92bc366a0302b4bb74ebaf95f"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "'protected' visibility is effectively 'private' in a final class",
  "severity": "Moderate",
  "comment": "'protected' visibility is effectively 'private' in a final class",
  "detailsInfo": "Reports `protected` visibility used inside of a `final` class. In such cases `protected` members are accessible only in the class itself, so they are effectively `private`.\n\n**Example:**\n\n\n      class FinalClass {\n          protected fun foo() {}\n      }\n\nAfter the quick-fix is applied:\n\n\n      class FinalClass {\n          private fun foo() {}\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "cps/src/main/kotlin/com/mcxross/cohesive/cps/PluginClassLoader.kt",
      "language": "kotlin",
      "line": 163,
      "offset": 5,
      "length": 9,
      "code": {
        "startLine": 161,
        "length": 9,
        "offset": 11,
        "surroundingCode": "    }\n\n    protected fun loadClassFromDependencies(className: String?): Class<*>? {\n        Log.v { \"Search in dependencies for class $className\" }\n        val dependencies: List<PluginDependency> = pluginDescriptor.dependencies!!"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cps.main",
    "inspectionName": "ProtectedInFinal"
  },
  "hash": "9b0aae4f3c0f85dda3de8b87dcdbde1af67f122a9c1e4ba0c6155d683134ecf5"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "'protected' visibility is effectively 'private' in a final class",
  "severity": "Moderate",
  "comment": "'protected' visibility is effectively 'private' in a final class",
  "detailsInfo": "Reports `protected` visibility used inside of a `final` class. In such cases `protected` members are accessible only in the class itself, so they are effectively `private`.\n\n**Example:**\n\n\n      class FinalClass {\n          protected fun foo() {}\n      }\n\nAfter the quick-fix is applied:\n\n\n      class FinalClass {\n          private fun foo() {}\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "cps/src/main/kotlin/com/mcxross/cohesive/cps/PluginClassLoader.kt",
      "language": "kotlin",
      "line": 201,
      "offset": 5,
      "length": 9,
      "code": {
        "startLine": 199,
        "length": 9,
        "offset": 37,
        "surroundingCode": "\n    @Throws(IOException::class)\n    protected fun findResourcesFromDependencies(name: String?): Collection<URL> {\n        Log.v { \"Search in dependencies for resources $name\" }\n        val results: MutableList<URL> = ArrayList()"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cps.main",
    "inspectionName": "ProtectedInFinal"
  },
  "hash": "40d26e227873371a34e592650477fa93ef4c91b93329a904fc8d270d0958bf75"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant constructor body",
  "severity": "Moderate",
  "comment": "Remove empty constructor body",
  "detailsInfo": "Reports empty bodies of secondary constructors.",
  "sources": [
    {
      "type": "file",
      "path": "cps/src/main/kotlin/com/mcxross/cohesive/cps/PluginRuntimeException.kt",
      "language": "kotlin",
      "line": 20,
      "offset": 97,
      "length": 2,
      "code": {
        "startLine": 18,
        "length": 2,
        "offset": 103,
        "surroundingCode": "    }\n\n    constructor(message: String, vararg args: Any?) : super(StringUtils.format(message, *args)) {}\n}"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cps.main",
    "inspectionName": "RemoveEmptySecondaryConstructorBody"
  },
  "hash": "b5fd4c07425f47ab104d80b45df0650306bce5f000e8c67a3136aa95d225f085"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant constructor body",
  "severity": "Moderate",
  "comment": "Remove empty constructor body",
  "detailsInfo": "Reports empty bodies of secondary constructors.",
  "sources": [
    {
      "type": "file",
      "path": "cps/src/main/kotlin/com/mcxross/cohesive/cps/PluginRuntimeException.kt",
      "language": "kotlin",
      "line": 10,
      "offset": 29,
      "length": 2,
      "code": {
        "startLine": 8,
        "length": 2,
        "offset": 87,
        "surroundingCode": " */\nopen class PluginRuntimeException : RuntimeException {\n    constructor() : super() {}\n    constructor(message: String) : super(message) {}\n    constructor(cause: Throwable) : super(cause) {}"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cps.main",
    "inspectionName": "RemoveEmptySecondaryConstructorBody"
  },
  "hash": "e89441a94b45233d9a2d92831469187ea3eeaea7f27b387d33fc1594ea34381e"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant constructor body",
  "severity": "Moderate",
  "comment": "Remove empty constructor body",
  "detailsInfo": "Reports empty bodies of secondary constructors.",
  "sources": [
    {
      "type": "file",
      "path": "cps/src/main/kotlin/com/mcxross/cohesive/cps/PluginRuntimeException.kt",
      "language": "kotlin",
      "line": 12,
      "offset": 50,
      "length": 2,
      "code": {
        "startLine": 10,
        "length": 2,
        "offset": 133,
        "surroundingCode": "    constructor() : super() {}\n    constructor(message: String) : super(message) {}\n    constructor(cause: Throwable) : super(cause) {}\n    constructor(\n        cause: Throwable,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cps.main",
    "inspectionName": "RemoveEmptySecondaryConstructorBody"
  },
  "hash": "bc7efa368726b91f11d55ea6b8dbbf37933873f350de9c51c6ae4fd37024e4f6"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant constructor body",
  "severity": "Moderate",
  "comment": "Remove empty constructor body",
  "detailsInfo": "Reports empty bodies of secondary constructors.",
  "sources": [
    {
      "type": "file",
      "path": "cps/src/main/kotlin/com/mcxross/cohesive/cps/PluginRuntimeException.kt",
      "language": "kotlin",
      "line": 11,
      "offset": 51,
      "length": 2,
      "code": {
        "startLine": 9,
        "length": 2,
        "offset": 136,
        "surroundingCode": "open class PluginRuntimeException : RuntimeException {\n    constructor() : super() {}\n    constructor(message: String) : super(message) {}\n    constructor(cause: Throwable) : super(cause) {}\n    constructor("
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cps.main",
    "inspectionName": "RemoveEmptySecondaryConstructorBody"
  },
  "hash": "cfa3e1c1495074e990bc77ae1ed9b4ae0f361b680c290504e013930c0c3b2eef"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant constructor body",
  "severity": "Moderate",
  "comment": "Remove empty constructor body",
  "detailsInfo": "Reports empty bodies of secondary constructors.",
  "sources": [
    {
      "type": "file",
      "path": "cps/src/main/kotlin/com/mcxross/cohesive/cps/PluginRuntimeException.kt",
      "language": "kotlin",
      "line": 17,
      "offset": 58,
      "length": 7,
      "code": {
        "startLine": 15,
        "length": 7,
        "offset": 109,
        "surroundingCode": "        message: String,\n        vararg args: Any?,\n    ) : super(StringUtils.format(message, *args), cause) {\n    }\n\n    constructor(message: String, vararg args: Any?) : super(StringUtils.format(message, *args)) {}"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cps.main",
    "inspectionName": "RemoveEmptySecondaryConstructorBody"
  },
  "hash": "dbfafa787fac99bb063b0bf44954daecbad881c0fdce496ed9676536e77a7090"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"EMPTY_COMPONENT\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/commonMain/kotlin/com/mcxross/cohesive/common/frontend/ui/widget/md/parser/Parser.kt",
      "language": "kotlin",
      "line": 15,
      "offset": 27,
      "length": 15,
      "code": {
        "startLine": 13,
        "length": 15,
        "offset": 50,
        "surroundingCode": "\n    companion object {\n        private const val EMPTY_COMPONENT = \"Empty Component\"\n    }\n"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "3f2542836ac4af7a5bfdfc877d8fe5f04dd85c6805c8650cc533d09e29d641c5"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"Space\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/commonMain/kotlin/com/mcxross/cohesive/common/frontend/ui/widget/md/markup/Space.kt",
      "language": "kotlin",
      "line": 11,
      "offset": 5,
      "length": 5,
      "code": {
        "startLine": 9,
        "length": 5,
        "offset": 17,
        "surroundingCode": "\n@Composable\nfun Space(\n    modifier: Modifier = Modifier,\n) {"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "1286132e8902bcad2eb669ef9eabc75295ea014f857edcbe032c18743a0db554"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"withoutWidthConstraints\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/commonMain/kotlin/com.mcxross.cohesive.mellow/Modifiers.kt",
      "language": "kotlin",
      "line": 15,
      "offset": 14,
      "length": 23,
      "code": {
        "startLine": 13,
        "length": 23,
        "offset": 56,
        "surroundingCode": "import androidx.compose.ui.semantics.Role\n\nfun Modifier.withoutWidthConstraints() = layout { measurable, constraints ->\n    val placeable = measurable.measure(constraints.copy(maxWidth = Int.MAX_VALUE))\n    layout(constraints.maxWidth, placeable.height) {"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "02fd571e5a515399e4cd8a7bd567b84bec7d8d97fa37613e16fba45f8ebb3855"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"onItemClicked\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/ToastModel.kt",
      "language": "kotlin",
      "line": 12,
      "offset": 9,
      "length": 13,
      "code": {
        "startLine": 10,
        "length": 13,
        "offset": 29,
        "surroundingCode": "        private set\n\n    fun onItemClicked(id: Long) {\n        setState { copy(editingItemId = id) }\n    }"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "99f96292ea773fd7bff22cba642e2bbba07eca74a0a50942ef8f5121c580c3db"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"loadable\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/commonMain/kotlin/com.mcxross.cohesive.mellow/Loadable.kt",
      "language": "kotlin",
      "line": 9,
      "offset": 15,
      "length": 8,
      "code": {
        "startLine": 7,
        "length": 8,
        "offset": 27,
        "surroundingCode": "\n@Composable\nfun <T : Any> loadable(\n    load: () -> T,\n): MutableState<T?> {"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "dc41405a0d7eee6e066668b50e871f0fb6090bb3dde2de188dc2368f88d53e89"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"RenderComponent\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/commonMain/kotlin/com/mcxross/cohesive/common/frontend/ui/widget/Markdown.kt",
      "language": "kotlin",
      "line": 70,
      "offset": 13,
      "length": 15,
      "code": {
        "startLine": 68,
        "length": 15,
        "offset": 25,
        "surroundingCode": "\n@Composable\nprivate fun RenderComponent(\n    item: Element,\n    config: MarkdownConfig,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "dd9360360c96e64020a2668384176ae18dbb2b1b9f3d41c8a71e6f684822e457"
}]}