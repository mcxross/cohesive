{"version":"3","listProblem":[{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Private property naming convention",
  "severity": "Moderate",
  "comment": "Private property name 'COHESIVE_PROJECT' should not contain underscores in the middle or the end",
  "detailsInfo": "Reports private property names that do not follow the recommended naming conventions.\n\n\nConsistent naming allows for easier code reading and understanding.\nAccording to the [Kotlin official style guide](https://kotlinlang.org/docs/coding-conventions.html#naming-rules),\nprivate property names should start with a lowercase letter and use camel case.\nOptionally, underscore prefix is allowed but only for **private** properties.\n\nIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\n\n**Example:**\n\n\n      val _My_Cool_Property = \"\"\n\nA quick-fix renames the class according to the Kotlin naming conventions:\n\n\n      val _myCoolProperty = \"\"\n",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/commonMain/kotlin/xyz/mcxross/cohesive/project/Project.kt",
      "language": "kotlin",
      "line": 19,
      "offset": 15,
      "length": 16,
      "code": {
        "startLine": 17,
        "length": 16,
        "offset": 37,
        "surroundingCode": "    get() = parentDir\n\n  private val COHESIVE_PROJECT = \".cohesive\"\n\n  var projectLoaded: Boolean = false"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.commonMain",
    "inspectionName": "PrivatePropertyName"
  },
  "hash": "637c6c5411187ddfa07c843d0b98ef9848b8b46c6c7770759eb18cef91c73d22"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused import directive",
  "severity": "High",
  "comment": "Unused import directive",
  "detailsInfo": "Reports redundant `import` statements.\n\nDefault and unused imports can be safely removed.\n\n**Example:**\n\n\n      import kotlin.*\n      import kotlin.collections.*\n      import kotlin.comparisons.*\n      import kotlin.io.*\n      import kotlin.ranges.*\n      import kotlin.sequences.*\n      import kotlin.text.*\n\n      // jvm specific\n      import java.lang.*\n      import kotlin.jvm.*\n\n      // js specific\n      import kotlin.js.*\n\n      import java.io.* // this import is unused and could be removed\n      import java.util.*\n\n      fun foo(list: ArrayList<String>) {\n          list.add(\"\")\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/commonMain/kotlin/xyz/mcxross/cohesive/designsystem/mellow/MellowTheme.kt",
      "language": "kotlin",
      "line": 10,
      "offset": 1,
      "length": 45,
      "code": {
        "startLine": 8,
        "length": 45,
        "offset": 84,
        "surroundingCode": "import androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.text.SpanStyle\nimport xyz.mcxross.cohesive.ui.api.theme.Code\nimport xyz.mcxross.cohesive.ui.api.theme.Theme\n"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.commonMain",
    "inspectionName": "KotlinUnusedImport"
  },
  "hash": "374b31b398ebf4f77e968ff88766d2ac771c22ba0dd8f67949775cbb48c690ae"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'BottomBar' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/designsystem/mellow/Dialog.kt",
      "language": "kotlin",
      "line": 40,
      "offset": 13,
      "length": 9,
      "code": {
        "startLine": 38,
        "length": 9,
        "offset": 25,
        "surroundingCode": "\n@Composable\nprivate fun BottomBar(\n  modifier: Modifier,\n  negativeText: String,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "47ea7038416038094cb80d6919a10de735fcb051c5367b18d9c63b445f3d0faf"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'Content' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/designsystem/mellow/Dialog.kt",
      "language": "kotlin",
      "line": 30,
      "offset": 13,
      "length": 7,
      "code": {
        "startLine": 28,
        "length": 7,
        "offset": 25,
        "surroundingCode": "\n@Composable\nprivate fun Content(\n  modifier: Modifier,\n  content: @Composable () -> Unit,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "9082663116fbc40b2fdffff0d094817a76e4a9c97fb1b6e9adb9d49a62a56116"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'Dialog' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/designsystem/mellow/Dialog.kt",
      "language": "kotlin",
      "line": 94,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 92,
        "length": 6,
        "offset": 17,
        "surroundingCode": "\n@Composable\nfun Dialog(\n  onClose: () -> Unit,\n  text: String,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "d166d6f3b863344a3d03a5ebbf94b2dcd7e42c8e534f6cd1a3dc60ff8ed30ced"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'TopMinBar' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/designsystem/mellow/TopBar.kt",
      "language": "kotlin",
      "line": 110,
      "offset": 5,
      "length": 9,
      "code": {
        "startLine": 108,
        "length": 9,
        "offset": 17,
        "surroundingCode": "\n@Composable\nfun TopMinBar(\n  onClose: () -> Unit,\n  modifier: Modifier,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "26356535888ba6ab7bcbaf82981ce931773c198745d002e6a0cd5c621fe7deb6"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'TopBar' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/designsystem/mellow/TopBar.kt",
      "language": "kotlin",
      "line": 35,
      "offset": 17,
      "length": 6,
      "code": {
        "startLine": 33,
        "length": 6,
        "offset": 29,
        "surroundingCode": "\n@Composable\nfun WindowScope.TopBar(\n  onClose: () -> Unit,\n  onRestore: () -> Unit,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "46f78c1f12f079a742b11667415cf8d0f8c2cde99921a220b04bdff33723fabb"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'Link' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/commonMain/kotlin/xyz/mcxross/cohesive/ui/impl/view/md/markup/Link.kt",
      "language": "kotlin",
      "line": 13,
      "offset": 5,
      "length": 4,
      "code": {
        "startLine": 11,
        "length": 4,
        "offset": 17,
        "surroundingCode": "\n@Composable\nfun Link(\n  text: String,\n  link: String,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.commonMain",
    "inspectionName": "FunctionName"
  },
  "hash": "823e23a8c77fb52e87c04e38c150d8a383334bc04b50c2af8be88684c500167b"
},{
  "tool": "Code Inspection",
  "category": "Probable bugs",
  "type": "Unresolved reference in KDoc",
  "severity": "High",
  "comment": "Cannot resolve symbol 'samples'",
  "detailsInfo": "Reports unresolved references in KDoc comments.\n\n**Example:**\n\n\n      /**\n       * [unresolvedLink]\n       */\n      fun foo() {}\n\nTo fix the problem make the link valid.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/designsystem/mellow/foundation/text/InlineTextContent.kt",
      "language": "kotlin",
      "line": 71,
      "offset": 40,
      "length": 7,
      "code": {
        "startLine": 69,
        "length": 7,
        "offset": 140,
        "surroundingCode": " * [androidx.compose.ui.unit.Constraints] and passed through [androidx.compose.ui.layout.Layout].\n *\n * @sample androidx.compose.foundation.samples.InlineTextContentSample\n * @see BasicText\n * @see Placeholder"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "KDocUnresolvedReference"
  },
  "hash": "a9f66f1dd01c6c74317168a33cf5904389189905cc47fd984b0dd160910f9aaa"
},{
  "tool": "Code Inspection",
  "category": "Probable bugs",
  "type": "Unresolved reference in KDoc",
  "severity": "High",
  "comment": "Cannot resolve symbol 'InlineTextContentSample'",
  "detailsInfo": "Reports unresolved references in KDoc comments.\n\n**Example:**\n\n\n      /**\n       * [unresolvedLink]\n       */\n      fun foo() {}\n\nTo fix the problem make the link valid.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/designsystem/mellow/foundation/text/InlineTextContent.kt",
      "language": "kotlin",
      "line": 71,
      "offset": 48,
      "length": 23,
      "code": {
        "startLine": 69,
        "length": 23,
        "offset": 148,
        "surroundingCode": " * [androidx.compose.ui.unit.Constraints] and passed through [androidx.compose.ui.layout.Layout].\n *\n * @sample androidx.compose.foundation.samples.InlineTextContentSample\n * @see BasicText\n * @see Placeholder"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "KDocUnresolvedReference"
  },
  "hash": "4ec5ba38ead5c75180ac27fb724fd8b56b64830f02e6d2c26aa80e91a07d87f1"
},{
  "tool": "Code Inspection",
  "category": "Probable bugs",
  "type": "Unresolved reference in KDoc",
  "severity": "High",
  "comment": "Cannot resolve symbol 'BasicText'",
  "detailsInfo": "Reports unresolved references in KDoc comments.\n\n**Example:**\n\n\n      /**\n       * [unresolvedLink]\n       */\n      fun foo() {}\n\nTo fix the problem make the link valid.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/designsystem/mellow/foundation/text/InlineTextContent.kt",
      "language": "kotlin",
      "line": 72,
      "offset": 9,
      "length": 9,
      "code": {
        "startLine": 70,
        "length": 9,
        "offset": 82,
        "surroundingCode": " *\n * @sample androidx.compose.foundation.samples.InlineTextContentSample\n * @see BasicText\n * @see Placeholder\n */"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "KDocUnresolvedReference"
  },
  "hash": "d88f85796750712b8555ccb39a7d4d7132b4f53c8152cae9b4a17f1bfa6a9cd0"
},{
  "tool": "Code Inspection",
  "category": "Probable bugs",
  "type": "Unresolved reference in KDoc",
  "severity": "High",
  "comment": "Cannot resolve symbol 'BasicText'",
  "detailsInfo": "Reports unresolved references in KDoc comments.\n\n**Example:**\n\n\n      /**\n       * [unresolvedLink]\n       */\n      fun foo() {}\n\nTo fix the problem make the link valid.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/designsystem/mellow/foundation/text/InlineTextContent.kt",
      "language": "kotlin",
      "line": 33,
      "offset": 32,
      "length": 9,
      "code": {
        "startLine": 31,
        "length": 9,
        "offset": 129,
        "surroundingCode": "/**\n * Used to insert composables into the text layout. This method can be used together with the\n * inlineContent parameter of [BasicText]. It will append the [alternateText] to this\n * [AnnotatedString] and also mark this range of text to be replaced by a composable.\n * [BasicText] will try to find an [InlineTextContent] in the map defined by inlineContent whose"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "KDocUnresolvedReference"
  },
  "hash": "33ebe92bbe139fd513c54c2bc5f9723c6e057f6eba5879b14556a12d54ee22d6"
},{
  "tool": "Code Inspection",
  "category": "Probable bugs",
  "type": "Unresolved reference in KDoc",
  "severity": "High",
  "comment": "Cannot resolve symbol 'BasicText'",
  "detailsInfo": "Reports unresolved references in KDoc comments.\n\n**Example:**\n\n\n      /**\n       * [unresolvedLink]\n       */\n      fun foo() {}\n\nTo fix the problem make the link valid.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/designsystem/mellow/foundation/text/InlineTextContent.kt",
      "language": "kotlin",
      "line": 35,
      "offset": 5,
      "length": 9,
      "code": {
        "startLine": 33,
        "length": 9,
        "offset": 176,
        "surroundingCode": " * inlineContent parameter of [BasicText]. It will append the [alternateText] to this\n * [AnnotatedString] and also mark this range of text to be replaced by a composable.\n * [BasicText] will try to find an [InlineTextContent] in the map defined by inlineContent whose\n * key equals to [id], and it will use the [InlineTextContent.children] to replace this range of\n * text."
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "KDocUnresolvedReference"
  },
  "hash": "4096351464926953e0d63c5435c54a541aa7d7f40efaab374a0f6f894347240a"
},{
  "tool": "Code Inspection",
  "category": "Probable bugs",
  "type": "Unresolved reference in KDoc",
  "severity": "High",
  "comment": "Cannot resolve symbol 'samples'",
  "detailsInfo": "Reports unresolved references in KDoc comments.\n\n**Example:**\n\n\n      /**\n       * [unresolvedLink]\n       */\n      fun foo() {}\n\nTo fix the problem make the link valid.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/designsystem/mellow/foundation/text/InlineTextContent.kt",
      "language": "kotlin",
      "line": 39,
      "offset": 40,
      "length": 7,
      "code": {
        "startLine": 37,
        "length": 7,
        "offset": 51,
        "surroundingCode": " * text.\n *\n * @sample androidx.compose.foundation.samples.InlineTextContentSample\n * @see InlineTextContent\n * @see BasicText"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "KDocUnresolvedReference"
  },
  "hash": "ac50010603c54302be9e02fb396e03dcc088cc5872d6fa7e67e73b6dce7b2ab8"
},{
  "tool": "Code Inspection",
  "category": "Probable bugs",
  "type": "Unresolved reference in KDoc",
  "severity": "High",
  "comment": "Cannot resolve symbol 'InlineTextContentSample'",
  "detailsInfo": "Reports unresolved references in KDoc comments.\n\n**Example:**\n\n\n      /**\n       * [unresolvedLink]\n       */\n      fun foo() {}\n\nTo fix the problem make the link valid.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/designsystem/mellow/foundation/text/InlineTextContent.kt",
      "language": "kotlin",
      "line": 39,
      "offset": 48,
      "length": 23,
      "code": {
        "startLine": 37,
        "length": 23,
        "offset": 59,
        "surroundingCode": " * text.\n *\n * @sample androidx.compose.foundation.samples.InlineTextContentSample\n * @see InlineTextContent\n * @see BasicText"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "KDocUnresolvedReference"
  },
  "hash": "f848e9e06118c8f500688afd9578c8209a87a589edda2b24e7ccd4f8b9f4adbc"
},{
  "tool": "Code Inspection",
  "category": "Probable bugs",
  "type": "Unresolved reference in KDoc",
  "severity": "High",
  "comment": "Cannot resolve symbol 'BasicText'",
  "detailsInfo": "Reports unresolved references in KDoc comments.\n\n**Example:**\n\n\n      /**\n       * [unresolvedLink]\n       */\n      fun foo() {}\n\nTo fix the problem make the link valid.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/designsystem/mellow/foundation/text/InlineTextContent.kt",
      "language": "kotlin",
      "line": 41,
      "offset": 9,
      "length": 9,
      "code": {
        "startLine": 39,
        "length": 9,
        "offset": 105,
        "surroundingCode": " * @sample androidx.compose.foundation.samples.InlineTextContentSample\n * @see InlineTextContent\n * @see BasicText\n *\n * @param id The id used to look up the [InlineTextContent], it is referred by the inlineContent"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "KDocUnresolvedReference"
  },
  "hash": "005a399c844505ba9660d67c3c06acd0afc2587caa98c9b63f9a0cfb8dd72b59"
},{
  "tool": "Code Inspection",
  "category": "Probable bugs",
  "type": "Unresolved reference in KDoc",
  "severity": "High",
  "comment": "Cannot resolve symbol 'BasicText'",
  "detailsInfo": "Reports unresolved references in KDoc comments.\n\n**Example:**\n\n\n      /**\n       * [unresolvedLink]\n       */\n      fun foo() {}\n\nTo fix the problem make the link valid.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/designsystem/mellow/foundation/text/InlineTextContent.kt",
      "language": "kotlin",
      "line": 44,
      "offset": 18,
      "length": 9,
      "code": {
        "startLine": 42,
        "length": 9,
        "offset": 117,
        "surroundingCode": " *\n * @param id The id used to look up the [InlineTextContent], it is referred by the inlineContent\n * parameter of [BasicText] to replace the [alternateText] to the corresponding composable.\n * @param alternateText The text to be replaced by the inline content. It's displayed when\n * the inlineContent parameter of [BasicText] doesn't contain [id]."
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "KDocUnresolvedReference"
  },
  "hash": "1f79b1e95f5782fa58f1ed739a6aa624d8d3bb3797f3b61548faea92435d1e2a"
},{
  "tool": "Code Inspection",
  "category": "Probable bugs",
  "type": "Unresolved reference in KDoc",
  "severity": "High",
  "comment": "Cannot resolve symbol 'BasicText'",
  "detailsInfo": "Reports unresolved references in KDoc comments.\n\n**Example:**\n\n\n      /**\n       * [unresolvedLink]\n       */\n      fun foo() {}\n\nTo fix the problem make the link valid.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/designsystem/mellow/foundation/text/InlineTextContent.kt",
      "language": "kotlin",
      "line": 46,
      "offset": 36,
      "length": 9,
      "code": {
        "startLine": 44,
        "length": 9,
        "offset": 218,
        "surroundingCode": " * parameter of [BasicText] to replace the [alternateText] to the corresponding composable.\n * @param alternateText The text to be replaced by the inline content. It's displayed when\n * the inlineContent parameter of [BasicText] doesn't contain [id].\n * Accessibility features will also use this text to describe the inline content.\n * @throws IllegalArgumentException if [alternateText] has zero length."
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "KDocUnresolvedReference"
  },
  "hash": "996bc87b976ed59eb91f2f1d198432838f5d66b2b98aa73238b046d4364a5bf4"
},{
  "tool": "Code Inspection",
  "category": "Probable bugs",
  "type": "Unresolved reference in KDoc",
  "severity": "High",
  "comment": "Cannot resolve symbol 'SelectionContainer'",
  "detailsInfo": "Reports unresolved references in KDoc comments.\n\n**Example:**\n\n\n      /**\n       * [unresolvedLink]\n       */\n      fun foo() {}\n\nTo fix the problem make the link valid.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/designsystem/mellow/foundation/text/selection/SelectionManager.kt",
      "language": "kotlin",
      "line": 161,
      "offset": 58,
      "length": 18,
      "code": {
        "startLine": 159,
        "length": 18,
        "offset": 64,
        "surroundingCode": "\n  /**\n   * The calculated position of the start handle in the [SelectionContainer] coordinates. It\n   * is null when handle shouldn't be displayed.\n   * It is a [State] so reading it during the composition will cause recomposition every time"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "KDocUnresolvedReference"
  },
  "hash": "896f0bf785f732384f77a20782f4eb232c7a223e6fa9cb3f58faf432bad1fe0b"
},{
  "tool": "Code Inspection",
  "category": "Probable bugs",
  "type": "Unresolved reference in KDoc",
  "severity": "High",
  "comment": "Cannot resolve symbol 'SelectionContainer'",
  "detailsInfo": "Reports unresolved references in KDoc comments.\n\n**Example:**\n\n\n      /**\n       * [unresolvedLink]\n       */\n      fun foo() {}\n\nTo fix the problem make the link valid.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/designsystem/mellow/foundation/text/selection/SelectionManager.kt",
      "language": "kotlin",
      "line": 173,
      "offset": 56,
      "length": 18,
      "code": {
        "startLine": 171,
        "length": 18,
        "offset": 62,
        "surroundingCode": "\n  /**\n   * The calculated position of the end handle in the [SelectionContainer] coordinates. It\n   * is null when handle shouldn't be displayed.\n   * It is a [State] so reading it during the composition will cause recomposition every time"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "KDocUnresolvedReference"
  },
  "hash": "c1f3d734269ed13ca2ea7fb0ea774c0da9f3dbf138b05d7ad9409f43bd1c0981"
},{
  "tool": "Code Inspection",
  "category": "Probable bugs",
  "type": "Unresolved reference in KDoc",
  "severity": "High",
  "comment": "Cannot resolve symbol 'AbstractExtensionFinder'",
  "detailsInfo": "Reports unresolved references in KDoc comments.\n\n**Example:**\n\n\n      /**\n       * [unresolvedLink]\n       */\n      fun foo() {}\n\nTo fix the problem make the link valid.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/csp/src/main/kotlin/xyz/mcxross/cohesive/csp/annotation/Extension.kt",
      "language": "kotlin",
      "line": 26,
      "offset": 7,
      "length": 23,
      "code": {
        "startLine": 24,
        "length": 23,
        "offset": 104,
        "surroundingCode": "  /**\n   * An array of plugin IDs, that have to be available in order to load this extension. The\n   * [AbstractExtensionFinder] won't load this extension, if these plugins are not available /\n   * started at runtime.\n   *"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.csp.main",
    "inspectionName": "KDocUnresolvedReference"
  },
  "hash": "d52ed8e89eee77548bfa6d32939cbe7827640499df5b64f32e1a4ee1f093d737"
},{
  "tool": "Code Inspection",
  "category": "Probable bugs",
  "type": "Unresolved reference in KDoc",
  "severity": "High",
  "comment": "Cannot resolve symbol 'AbstractExtensionFinder'",
  "detailsInfo": "Reports unresolved references in KDoc comments.\n\n**Example:**\n\n\n      /**\n       * [unresolvedLink]\n       */\n      fun foo() {}\n\nTo fix the problem make the link valid.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/csp/src/main/kotlin/xyz/mcxross/cohesive/csp/annotation/Extension.kt",
      "language": "kotlin",
      "line": 31,
      "offset": 7,
      "length": 23,
      "code": {
        "startLine": 29,
        "length": 23,
        "offset": 177,
        "surroundingCode": "   * Notice: This feature requires the optional [ASM library](https://asm.ow2.io/) to be available\n   * on the applications classpath and has to be explicitly enabled via\n   * [AbstractExtensionFinder.setCheckForExtensionDependencies].\n   *\n   * @return plugin IDs, that have to be available in order to load this extension"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.csp.main",
    "inspectionName": "KDocUnresolvedReference"
  },
  "hash": "e9cd434ff2ec9522ed63ba70d74127d23703cd386c8800bfea2002a768735044"
},{
  "tool": "Code Inspection",
  "category": "Probable bugs",
  "type": "Unresolved reference in KDoc",
  "severity": "High",
  "comment": "Cannot resolve symbol 'setCheckForExtensionDependencies'",
  "detailsInfo": "Reports unresolved references in KDoc comments.\n\n**Example:**\n\n\n      /**\n       * [unresolvedLink]\n       */\n      fun foo() {}\n\nTo fix the problem make the link valid.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/csp/src/main/kotlin/xyz/mcxross/cohesive/csp/annotation/Extension.kt",
      "language": "kotlin",
      "line": 31,
      "offset": 31,
      "length": 32,
      "code": {
        "startLine": 29,
        "length": 32,
        "offset": 201,
        "surroundingCode": "   * Notice: This feature requires the optional [ASM library](https://asm.ow2.io/) to be available\n   * on the applications classpath and has to be explicitly enabled via\n   * [AbstractExtensionFinder.setCheckForExtensionDependencies].\n   *\n   * @return plugin IDs, that have to be available in order to load this extension"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.csp.main",
    "inspectionName": "KDocUnresolvedReference"
  },
  "hash": "721911b783ff6a3faa56d909fdcf454ce08af0db3a99a3437b3bcecfb6b0acf2"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Function 'loadCohesiveProject' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/commonMain/kotlin/xyz/mcxross/cohesive/project/Project.kt",
      "language": "kotlin",
      "line": 62,
      "offset": 7,
      "length": 19,
      "code": {
        "startLine": 60,
        "length": 19,
        "offset": 11,
        "surroundingCode": "  }\n\n  fun loadCohesiveProject() {\n\n  }"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.commonMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "6c7561042b28eee53104413fc511540b02f0157c9cb07c89d1103099c416cff5"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'projectLoaded' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/commonMain/kotlin/xyz/mcxross/cohesive/project/Project.kt",
      "language": "kotlin",
      "line": 21,
      "offset": 7,
      "length": 13,
      "code": {
        "startLine": 19,
        "length": 13,
        "offset": 52,
        "surroundingCode": "  private val COHESIVE_PROJECT = \".cohesive\"\n\n  var projectLoaded: Boolean = false\n\n  init {"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.commonMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "d8b9ffe49fa64fe7a73ddcdfce4c90b9db475ddd3d4f4d599a013431199159cb"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Function 'setSelection' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/designsystem/mellow/foundation/text/selection/TextPreparedSelection.kt",
      "language": "kotlin",
      "line": 86,
      "offset": 3,
      "length": 9,
      "code": {
        "startLine": 84,
        "length": 9,
        "offset": 7,
        "surroundingCode": "  }\n\n  protected fun setSelection(start: Int, end: Int) {\n    selection = TextRange(start, end)\n  }"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "7879e32687888b48fc478eb168ffef3848738ad1ceb887377395abb2026002ab"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Function 'updateSelection' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/designsystem/mellow/foundation/text/selection/SelectionManager.kt",
      "language": "kotlin",
      "line": 690,
      "offset": 3,
      "length": 8,
      "code": {
        "startLine": 688,
        "length": 8,
        "offset": 38,
        "surroundingCode": "   * @see SelectionAdjustment\n   */\n  internal fun updateSelection(\n    startHandlePosition: Offset,\n    endHandlePosition: Offset,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "a4f86ab893a813d409f1bc910efc1857aad2654a16bc3f6d8bc1dfb980200715"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Function 'selectAll' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/designsystem/mellow/foundation/text/selection/SelectionManager.kt",
      "language": "kotlin",
      "line": 341,
      "offset": 3,
      "length": 8,
      "code": {
        "startLine": 339,
        "length": 8,
        "offset": 7,
        "surroundingCode": "  }\n\n  internal fun selectAll(\n    selectableId: Long,\n    previousSelection: Selection?"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "1c7857637cfa1015ca3bd5ff625de8d4633b742416b2f1a6a63f91fbb821ca5b"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'startHandlePosition' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/designsystem/mellow/foundation/text/selection/SelectionManager.kt",
      "language": "kotlin",
      "line": 166,
      "offset": 7,
      "length": 19,
      "code": {
        "startLine": 164,
        "length": 19,
        "offset": 48,
        "surroundingCode": "   * the position has been changed.\n   */\n  var startHandlePosition by mutableStateOf<Offset?>(\n    null,\n    policy = structuralEqualityPolicy(),"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "c962f6ec40a9cc5e50430bb80e610e9e6b495a0c2c19dd451485273561734285"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'focusRequester' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/designsystem/mellow/foundation/text/selection/SelectionManager.kt",
      "language": "kotlin",
      "line": 99,
      "offset": 7,
      "length": 14,
      "code": {
        "startLine": 97,
        "length": 14,
        "offset": 86,
        "surroundingCode": "   * Focus requester used to request focus when selection becomes active.\n   */\n  var focusRequester: FocusRequester = FocusRequester()\n\n  /**"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "f3666e66bf32f3619c19bfb69cc3ba64fb8017abd01fdb6174ecca0fe1948bc8"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'clipboardManager' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/designsystem/mellow/foundation/text/selection/SelectionManager.kt",
      "language": "kotlin",
      "line": 89,
      "offset": 7,
      "length": 16,
      "code": {
        "startLine": 87,
        "length": 16,
        "offset": 67,
        "surroundingCode": "   * [ClipboardManager] to perform clipboard features.\n   */\n  var clipboardManager: ClipboardManager? = null\n\n  /**"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "4ac21e1a9ae2ff3f0abe54c2555a30c54709bc65d9c0af8bb1b7b8cc073c1352"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'endHandlePosition' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/designsystem/mellow/foundation/text/selection/SelectionManager.kt",
      "language": "kotlin",
      "line": 178,
      "offset": 7,
      "length": 17,
      "code": {
        "startLine": 176,
        "length": 17,
        "offset": 48,
        "surroundingCode": "   * the position has been changed.\n   */\n  var endHandlePosition by mutableStateOf<Offset?>(\n    null,\n    policy = structuralEqualityPolicy(),"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "c2d26bbca7833ee7d0fb78380900a3705cd0d4423223b2b97bc13d22999379a4"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Function 'onRelease' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/designsystem/mellow/foundation/text/selection/SelectionManager.kt",
      "language": "kotlin",
      "line": 491,
      "offset": 7,
      "length": 9,
      "code": {
        "startLine": 489,
        "length": 9,
        "offset": 70,
        "surroundingCode": "\n  // This is for PressGestureDetector to cancel the selection.\n  fun onRelease() {\n    selectionRegistrar.subselections = emptyMap()\n    hideSelectionToolbar()"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "59104f9356d38d35e6802817670a3c1cdd3b3707dd22eb8b6464af6d5a6dfd64"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'hapticFeedBack' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/designsystem/mellow/foundation/text/selection/SelectionManager.kt",
      "language": "kotlin",
      "line": 84,
      "offset": 7,
      "length": 14,
      "code": {
        "startLine": 82,
        "length": 14,
        "offset": 69,
        "surroundingCode": "   * [HapticFeedback] handle to perform haptic feedback.\n   */\n  var hapticFeedBack: HapticFeedback? = null\n\n  /**"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "2661d78200aa626365b93768b70581f176e64fe03a6b64f8fbc6798c18dcd324"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'containerLayoutCoordinates' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/designsystem/mellow/foundation/text/selection/SelectionManager.kt",
      "language": "kotlin",
      "line": 135,
      "offset": 7,
      "length": 26,
      "code": {
        "startLine": 133,
        "length": 26,
        "offset": 64,
        "surroundingCode": "   * Layout Coordinates of the selection container.\n   */\n  var containerLayoutCoordinates: LayoutCoordinates? = null\n    set(value) {\n      field = value"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "bdac3a1fde6cfdc21279c00562c5d96cd37f09f6b1caf34f560e9e56f2188448"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'textToolbar' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/designsystem/mellow/foundation/text/selection/SelectionManager.kt",
      "language": "kotlin",
      "line": 94,
      "offset": 7,
      "length": 11,
      "code": {
        "startLine": 92,
        "length": 11,
        "offset": 91,
        "surroundingCode": "   * [TextToolbar] to show floating toolbar(post-M) or primary toolbar(pre-M).\n   */\n  var textToolbar: TextToolbar? = null\n\n  /**"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "c916ee1a3b475d95b30151723e582d9749708ca10e6874bccff3f1b5450d3bef"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'hasFocus' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/designsystem/mellow/foundation/text/selection/SelectionManager.kt",
      "language": "kotlin",
      "line": 104,
      "offset": 7,
      "length": 8,
      "code": {
        "startLine": 102,
        "length": 8,
        "offset": 81,
        "surroundingCode": "   * Return true if the corresponding SelectionContainer is focused.\n   */\n  var hasFocus: Boolean by mutableStateOf(false)\n\n  /**"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "97c97ec37417aa31f22a6ef077c2c169a43e57adad7ae37296cc92a368ace026"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Function 'getSelectedText' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/designsystem/mellow/foundation/text/selection/SelectionManager.kt",
      "language": "kotlin",
      "line": 359,
      "offset": 3,
      "length": 8,
      "code": {
        "startLine": 357,
        "length": 8,
        "offset": 7,
        "surroundingCode": "  }\n\n  internal fun getSelectedText(): AnnotatedString? {\n    val selectables = selectionRegistrar.sort(requireContainerCoordinates())\n    var selectedText: AnnotatedString? = null"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "904c7bc5b18aeca7e68607a92d6657a1f999f6ef6e3dc2daea0132bd117b15b2"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "'protected' visibility is effectively 'private' in a final class",
  "severity": "Moderate",
  "comment": "'protected' visibility is effectively 'private' in a final class",
  "detailsInfo": "Reports `protected` visibility used inside of a `final` class. In such cases `protected` members are accessible only in the class itself, so they are effectively `private`.\n\n**Example:**\n\n\n      class FinalClass {\n          protected fun foo() {}\n      }\n\nAfter the quick-fix is applied:\n\n\n      class FinalClass {\n          private fun foo() {}\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/cps/DependencyResolver.kt",
      "language": "kotlin",
      "line": 106,
      "offset": 3,
      "length": 9,
      "code": {
        "startLine": 104,
        "length": 9,
        "offset": 21,
        "surroundingCode": "   * @return\n   */\n  protected fun checkDependencyVersion(requiredVersion: String, existingVersion: String): Boolean {\n    return versionManager.checkVersionConstraint(existingVersion, requiredVersion)\n  }"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "ProtectedInFinal"
  },
  "hash": "568d6ae010fc54242b96819367970904e5d035f539579490156f585170a1d4f4"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"removeFileFilter\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/cps/utils/AndFileFilter.kt",
      "language": "kotlin",
      "line": 16,
      "offset": 7,
      "length": 16,
      "code": {
        "startLine": 14,
        "length": 16,
        "offset": 101,
        "surroundingCode": "  constructor(vararg fileFilters: FileFilter) : this(mutableListOf<FileFilter>(*fileFilters))\n\n  fun removeFileFilter(fileFilter: FileFilter): Boolean {\n    return fileFilters.remove(fileFilter)\n  }"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "b159f2f77b100a70c67fd4963b0d1591276b701804dfd1ddff8302a86309a781"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"EMPTY_COMPONENT\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/commonMain/kotlin/xyz/mcxross/cohesive/ui/impl/view/md/parser/Parser.kt",
      "language": "kotlin",
      "line": 16,
      "offset": 23,
      "length": 15,
      "code": {
        "startLine": 14,
        "length": 15,
        "offset": 44,
        "surroundingCode": "\n  companion object {\n    private const val EMPTY_COMPONENT = \"Empty Component\"\n  }\n"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "e166c6ebafa927f26ad5ac2b1b053cd6cbaa78f735c5933aac6f2d3e0bd8d1d5"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"toInput\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/designsystem/mellow/UriConverter.kt",
      "language": "kotlin",
      "line": 9,
      "offset": 14,
      "length": 7,
      "code": {
        "startLine": 7,
        "length": 7,
        "offset": 42,
        "surroundingCode": "\nactual class UriConverter {\n  actual fun toInput(uri: Uri): Input = when {\n    uri.path.startsWith(\"http\") -> TODO(\"unimplemented\")\n    else -> File(uri.path).inputStream().asInput()"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "f892f1ff9bf646c0e16ebb3e064e34b20ed3b6fd319c97da7cb77356383537fe"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"UriConverter\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/designsystem/mellow/UriConverter.kt",
      "language": "kotlin",
      "line": 8,
      "offset": 14,
      "length": 12,
      "code": {
        "startLine": 6,
        "length": 12,
        "offset": 41,
        "surroundingCode": "import java.nio.file.Files\n\nactual class UriConverter {\n  actual fun toInput(uri: Uri): Input = when {\n    uri.path.startsWith(\"http\") -> TODO(\"unimplemented\")"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "fc60dae2920257cd4a3e154d178ab6b0aaec2bff6f157cde599db0365bd8bcd7"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"HandleWidth\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/designsystem/mellow/foundation/text/selection/SelectionHandles.kt",
      "language": "kotlin",
      "line": 22,
      "offset": 14,
      "length": 11,
      "code": {
        "startLine": 20,
        "length": 11,
        "offset": 49,
        "surroundingCode": "import androidx.compose.ui.unit.dp\n\ninternal val HandleWidth = 25.dp\ninternal val HandleHeight = 25.dp\n"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "27b15289ce83f17536326e772cb4564ea81359b89b4c02e68dd62d2c28e17601"
}]}