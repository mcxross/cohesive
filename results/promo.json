{"version":"3","listProblem":[{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Constructor parameter is never used as a property",
  "severity": "High",
  "comment": "Constructor parameter is never used as a property",
  "detailsInfo": "Reports primary constructor parameters that can have `val` or `var` removed.\n\n\nClass properties declared in the constructor increase memory consumption.\nIf the parameter value is only used in the constructor, you can omit them.\n\nNote that the referenced object might be garbage-collected earlier.\n\n**Example:**\n\n\n      class Task(val name: String) {\n          init {\n              print(\"Task created: $name\")\n          }\n      }\n\nA quick-fix removes the extra `val` or `var` keyword:\n\n\n      class Task(name: String) {\n          init {\n              print(\"Task created: $name\")\n          }\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/csp/src/main/kotlin/com/mcxross/cohesive/csp/processor/ExtensionProcessor.kt",
      "language": "kotlin",
      "line": 11,
      "offset": 34,
      "length": 3,
      "code": {
        "startLine": 9,
        "length": 3,
        "offset": 62,
        "surroundingCode": "import java.io.OutputStream\n\nclass ExtensionProcessor(private val environment: SymbolProcessorEnvironment) :\n  BaseProcessor(environment) {\n"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.csp.main",
    "inspectionName": "CanBeParameter"
  },
  "hash": "def8668191d3e852d25a2fb26ff20bf6cc22b4b34854cbbf449694a9b9550605"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'Wallet' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/plugin/desktop/cohesive-cohesive/src/main/kotlin/com/mcxross/cohesive/c/view/Wallet.kt",
      "language": "kotlin",
      "line": 22,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 20,
        "length": 6,
        "offset": 17,
        "surroundingCode": "\n@Composable\nfun Wallet() {\n  Box(Modifier.fillMaxSize().background(MaterialTheme.colors.background)) {\n    Column(Modifier.align(Alignment.Center)) {"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.plugin.desktop.cohesive-cohesive.main",
    "inspectionName": "FunctionName"
  },
  "hash": "d5a7bc3ddf4db4439bef36020150a0337b62c87013a350b7e882778fb78b15ac"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'CoreText' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/foundation/text/CoreText.kt",
      "language": "kotlin",
      "line": 110,
      "offset": 14,
      "length": 8,
      "code": {
        "startLine": 108,
        "length": 8,
        "offset": 99,
        "surroundingCode": "@Composable\n@OptIn(InternalFoundationTextApi::class, ExperimentalComposeUiApi::class)\ninternal fun CoreText(\n  text: AnnotatedString,\n  modifier: Modifier = Modifier,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "9dc09268e5cac6b6552f7dd8333398a6427bd9a76d049c32758713ced331e0c1"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'InlineChildren' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/foundation/text/CoreText.kt",
      "language": "kotlin",
      "line": 232,
      "offset": 14,
      "length": 14,
      "code": {
        "startLine": 230,
        "length": 14,
        "offset": 26,
        "surroundingCode": "\n@Composable\ninternal fun InlineChildren(text: AnnotatedString, inlineContents: List<InlineContentRange>) {\n  inlineContents.fastForEach { (content, start, end) ->\n    Layout("
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "b571ad2ffb7a86c00ac4078a5be3e9effa0941faa90c025405de1c129bf32364"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'EditorView' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/common/frontend/api/ui/screen/IMain.kt",
      "language": "kotlin",
      "line": 27,
      "offset": 7,
      "length": 10,
      "code": {
        "startLine": 25,
        "length": 10,
        "offset": 21,
        "surroundingCode": "\n  @Composable\n  fun EditorView()\n}\n"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "a00e2a819c6e30fed54f271e58192e08b0e1b5d0930ce1ab7dc294ddf0131dfa"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'ExplorerView' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/common/frontend/api/ui/screen/IMain.kt",
      "language": "kotlin",
      "line": 21,
      "offset": 7,
      "length": 12,
      "code": {
        "startLine": 19,
        "length": 12,
        "offset": 21,
        "surroundingCode": "\n  @Composable\n  fun ExplorerView()\n\n  @Composable"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "e399b5c8f4cb7f81e96856db0dbec37ed24724bd2c2192787694da93c4a38ed5"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'WindowListMenuButton' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/common/frontend/api/ui/screen/IMain.kt",
      "language": "kotlin",
      "line": 9,
      "offset": 7,
      "length": 20,
      "code": {
        "startLine": 7,
        "length": 20,
        "offset": 21,
        "surroundingCode": "\n  @Composable\n  fun WindowListMenuButton()\n\n  @Composable"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "a33f41e357586824489b6670864265d06bb721a27606ea181e47000f79681bac"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'WalletView' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/common/frontend/api/ui/screen/IMain.kt",
      "language": "kotlin",
      "line": 24,
      "offset": 7,
      "length": 10,
      "code": {
        "startLine": 22,
        "length": 10,
        "offset": 21,
        "surroundingCode": "\n  @Composable\n  fun WalletView()\n\n  @Composable"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "7761f186966663891050fe575dc7ae223a523111f4fc5a2c1f58e50be4a0d08b"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'TitleMenuBar' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/common/frontend/api/ui/screen/IMain.kt",
      "language": "kotlin",
      "line": 18,
      "offset": 7,
      "length": 12,
      "code": {
        "startLine": 16,
        "length": 12,
        "offset": 21,
        "surroundingCode": "\n  @Composable\n  fun TitleMenuBar()\n\n  @Composable"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "63515c7b2e22d71fbfdb7fdf5ea520893c11db59a35d72a3bca2eca88e3fe199"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'SwitchView' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/common/frontend/api/ui/screen/IMain.kt",
      "language": "kotlin",
      "line": 12,
      "offset": 7,
      "length": 10,
      "code": {
        "startLine": 10,
        "length": 10,
        "offset": 21,
        "surroundingCode": "\n  @Composable\n  fun SwitchView()\n\n  @Composable"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "661b0146a1c7df0915d425f77c707d19a042d932554b4ff4dfaf243e7696bf99"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'ClusterMenu' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/common/frontend/api/ui/screen/IMain.kt",
      "language": "kotlin",
      "line": 15,
      "offset": 7,
      "length": 11,
      "code": {
        "startLine": 13,
        "length": 11,
        "offset": 21,
        "surroundingCode": "\n  @Composable\n  fun ClusterMenu()\n\n  @Composable"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "632bd39d50e4ac4035441db10f3882d91d6fb74a1bc96c50ac25e9b8b9bfb642"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'StatusBar' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/commonMain/kotlin/com.mcxross.cohesive.mellow/StatusBar.kt",
      "language": "kotlin",
      "line": 16,
      "offset": 5,
      "length": 9,
      "code": {
        "startLine": 14,
        "length": 9,
        "offset": 17,
        "surroundingCode": "\n@Composable\nfun StatusBar(\n  content: @Composable (RowScope.() -> Unit),\n) ="
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.commonMain",
    "inspectionName": "FunctionName"
  },
  "hash": "ce56c6ad92024304d9f5357c9f2cc4519239319056cb09e0700983d8abff47f2"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'VerticalSplitter' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/commonMain/kotlin/com.mcxross.cohesive.mellow/VerticalSplittable.kt",
      "language": "kotlin",
      "line": 63,
      "offset": 5,
      "length": 16,
      "code": {
        "startLine": 61,
        "length": 16,
        "offset": 17,
        "surroundingCode": "\n@Composable\nfun VerticalSplitter(\n  splitterState: SplitterState,\n  onResize: (delta: Dp) -> Unit,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.commonMain",
    "inspectionName": "FunctionName"
  },
  "hash": "e1885267c46b8298c57429f4fb6bc3e6b78bbb1651131d5cbd4c0c2750e35885"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'VerticalSplittable' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/commonMain/kotlin/com.mcxross.cohesive.mellow/VerticalSplittable.kt",
      "language": "kotlin",
      "line": 24,
      "offset": 5,
      "length": 18,
      "code": {
        "startLine": 22,
        "length": 18,
        "offset": 17,
        "surroundingCode": "\n@Composable\nfun VerticalSplittable(\n  modifier: Modifier,\n  splitterState: SplitterState,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.commonMain",
    "inspectionName": "FunctionName"
  },
  "hash": "8c7ccb28a30bca173915fb37e0b59f214f6e60b2de239a9f9e535e589eec0c9e"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'Explorer' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/plugin/desktop/cohesive-cohesive/src/main/kotlin/com/mcxross/cohesive/c/view/Explorer.kt",
      "language": "kotlin",
      "line": 18,
      "offset": 5,
      "length": 8,
      "code": {
        "startLine": 16,
        "length": 8,
        "offset": 17,
        "surroundingCode": "\n@Composable\nfun Explorer() {\n\n  Box(Modifier.fillMaxSize().background(MaterialTheme.colors.background)) {"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.plugin.desktop.cohesive-cohesive.main",
    "inspectionName": "FunctionName"
  },
  "hash": "46106454a39aa94a791f9bd6531e2896411edb551b8091ce9c2641704590f44c"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'Image' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/commonMain/kotlin/com/mcxross/cohesive/common/frontend/impl/ui/widget/md/markup/Image.kt",
      "language": "kotlin",
      "line": 6,
      "offset": 5,
      "length": 5,
      "code": {
        "startLine": 4,
        "length": 5,
        "offset": 17,
        "surroundingCode": "\n@Composable\nfun Image(\n  imageUrl: String,\n  isEnabled: Boolean,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.commonMain",
    "inspectionName": "FunctionName"
  },
  "hash": "b9c60ee1d968e8dcb7f3aaf240e7ac301be219b5da4e441bd51c8c7d1033899e"
},{
  "tool": "Code Inspection",
  "category": "Probable bugs",
  "type": "Unresolved reference in KDoc",
  "severity": "High",
  "comment": "Cannot resolve symbol 'text'",
  "detailsInfo": "Reports unresolved references in KDoc comments.\n\n**Example:**\n\n\n      /**\n       * [unresolvedLink]\n       */\n      fun foo() {}\n\nTo fix the problem make the link valid.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/foundation/text/selection/SelectionHandles.kt",
      "language": "kotlin",
      "line": 28,
      "offset": 23,
      "length": 4,
      "code": {
        "startLine": 26,
        "length": 4,
        "offset": 70,
        "surroundingCode": " * Adjust coordinates for given text offset.\n *\n * Currently [android.text.Layout.getLineBottom] returns y coordinates of the next\n * line's top offset, which is not included in current line's hit area. To be able to\n * hit current line, move up this y coordinates by 1 pixel."
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "KDocUnresolvedReference"
  },
  "hash": "c91207d3b24cdb1a6094e0e690c77d8a6bce99d13e22d23f3371acc16f127f6f"
},{
  "tool": "Code Inspection",
  "category": "Probable bugs",
  "type": "Unresolved reference in KDoc",
  "severity": "High",
  "comment": "Cannot resolve symbol 'Layout'",
  "detailsInfo": "Reports unresolved references in KDoc comments.\n\n**Example:**\n\n\n      /**\n       * [unresolvedLink]\n       */\n      fun foo() {}\n\nTo fix the problem make the link valid.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/foundation/text/selection/SelectionHandles.kt",
      "language": "kotlin",
      "line": 28,
      "offset": 28,
      "length": 6,
      "code": {
        "startLine": 26,
        "length": 6,
        "offset": 75,
        "surroundingCode": " * Adjust coordinates for given text offset.\n *\n * Currently [android.text.Layout.getLineBottom] returns y coordinates of the next\n * line's top offset, which is not included in current line's hit area. To be able to\n * hit current line, move up this y coordinates by 1 pixel."
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "KDocUnresolvedReference"
  },
  "hash": "12197f2c79f4421f4156688f1176f306ff04da5317efbbeacf833e742cf775ce"
},{
  "tool": "Code Inspection",
  "category": "Probable bugs",
  "type": "Unresolved reference in KDoc",
  "severity": "High",
  "comment": "Cannot resolve symbol 'getLineBottom'",
  "detailsInfo": "Reports unresolved references in KDoc comments.\n\n**Example:**\n\n\n      /**\n       * [unresolvedLink]\n       */\n      fun foo() {}\n\nTo fix the problem make the link valid.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/foundation/text/selection/SelectionHandles.kt",
      "language": "kotlin",
      "line": 28,
      "offset": 35,
      "length": 13,
      "code": {
        "startLine": 26,
        "length": 13,
        "offset": 82,
        "surroundingCode": " * Adjust coordinates for given text offset.\n *\n * Currently [android.text.Layout.getLineBottom] returns y coordinates of the next\n * line's top offset, which is not included in current line's hit area. To be able to\n * hit current line, move up this y coordinates by 1 pixel."
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "KDocUnresolvedReference"
  },
  "hash": "dccf398f1f53c0bad44679e7c652d6c614cef06e4c03f245155a4a64e33f143c"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused receiver parameter",
  "severity": "High",
  "comment": "Receiver parameter is never used",
  "detailsInfo": "Reports receiver parameter of extension functions and properties that is not used.\n\n**Remove redundant receiver parameter** can be used to amend the code automatically.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/commonMain/kotlin/com.mcxross.cohesive.mellow/icon/regular/Code.kt",
      "language": "kotlin",
      "line": 8,
      "offset": 12,
      "length": 13,
      "code": {
        "startLine": 6,
        "length": 13,
        "offset": 63,
        "surroundingCode": "import com.mcxross.cohesive.mellow.icon.mellowPath\n\npublic val Icons.Regular.Code: ImageVector\n  get() {\n    if (_code != null) {"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.commonMain",
    "inspectionName": "UnusedReceiverParameter"
  },
  "hash": "9081575103659dd25d168acee78152ae19657025e0794a515e486d55ec9241a3"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused receiver parameter",
  "severity": "High",
  "comment": "Receiver parameter is never used",
  "detailsInfo": "Reports receiver parameter of extension functions and properties that is not used.\n\n**Remove redundant receiver parameter** can be used to amend the code automatically.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/foundation/text/KeyEventHelpers.kt",
      "language": "kotlin",
      "line": 22,
      "offset": 14,
      "length": 8,
      "code": {
        "startLine": 20,
        "length": 8,
        "offset": 67,
        "surroundingCode": "import org.jetbrains.skiko.orderEmojiAndSymbolsPopup\n\ninternal fun KeyEvent.cancelsTextSelection(): Boolean = false\n\ninternal fun showCharacterPalette() = orderEmojiAndSymbolsPopup()"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "UnusedReceiverParameter"
  },
  "hash": "5afb2f63a4311b438c7902c95ffcad6fa959c7dc2ffbb7552fe6653295a2a8e4"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"disabledFilePath\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/cps/DefaultPluginStatusProvider.kt",
      "language": "kotlin",
      "line": 25,
      "offset": 7,
      "length": 16,
      "code": {
        "startLine": 23,
        "length": 16,
        "offset": 78,
        "surroundingCode": "  val enabledFilePath: Path\n    get() = getEnabledFilePath(pluginsRoot)\n  val disabledFilePath: Path\n    get() = getDisabledFilePath(pluginsRoot)\n"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "44d12b50e82adb4152e4d64518a232dc9220606ce76e12ab5b555b4417159d9a"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"dimension\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/common/utils/Dimension.kt",
      "language": "kotlin",
      "line": 6,
      "offset": 5,
      "length": 9,
      "code": {
        "startLine": 4,
        "length": 9,
        "offset": 29,
        "surroundingCode": "import java.awt.Toolkit\n\nfun dimension() : Dimension {\n  val screenSize = Toolkit.getDefaultToolkit().screenSize\n  return Dimension(screenSize.width, screenSize.height)"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "ce08521afdfce2274f00ef8b4f9e50984cb68865fc5acfb394cf8bc9c05fa858"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"MainView\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/plugin/desktop/cohesive-cohesive/src/main/kotlin/com/mcxross/cohesive/c/MainView.kt",
      "language": "kotlin",
      "line": 33,
      "offset": 12,
      "length": 8,
      "code": {
        "startLine": 31,
        "length": 8,
        "offset": 20,
        "surroundingCode": "    ],\n)\nopen class MainView : CohesiveView {\n\n  @Composable"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.plugin.desktop.cohesive-cohesive.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "3fa400c7ac119fab7322959dadbafb958766ffc129e3190d35eefb8c3b65f627"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"getDependencies\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/cps/DependencyResolver.kt",
      "language": "kotlin",
      "line": 82,
      "offset": 7,
      "length": 15,
      "code": {
        "startLine": 80,
        "length": 15,
        "offset": 84,
        "surroundingCode": "   * @return an immutable list of dependencies (new list for each call)\n   */\n  fun getDependencies(pluginId: String): List<String> {\n    checkResolved()\n    return ArrayList<String>(dependenciesGraph!!.getNeighbors(pluginId))"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "cdb4fcbb904d89d6af18234d489edf793387f0f878dbc605532e5ef4bac39281"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"Explorer\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/commonMain/kotlin/com.mcxross.cohesive.mellow/icon/regular/Explorer.kt",
      "language": "kotlin",
      "line": 8,
      "offset": 26,
      "length": 8,
      "code": {
        "startLine": 6,
        "length": 8,
        "offset": 77,
        "surroundingCode": "import com.mcxross.cohesive.mellow.icon.mellowPath\n\npublic val Icons.Regular.Explorer: ImageVector\n  get() {\n    if (_explorer != null) {"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "67f38d3a4717e1df91442ebcfb25366414251a262055ae4c1523723dd0579340"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"parse\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/cps/PluginState.kt",
      "language": "kotlin",
      "line": 37,
      "offset": 9,
      "length": 5,
      "code": {
        "startLine": 35,
        "length": 5,
        "offset": 30,
        "surroundingCode": "\n  companion object {\n    fun parse(string: String?): PluginState? {\n      for (status in PluginState.values()) {\n        if (status.toString() == string) {"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "cbe6f5e270fa4c7aad074d87240fed58a0086ac564389f2185629443964abc2b"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"setCheckForExtensionDependencies\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/cps/AbstractExtensionFinder.kt",
      "language": "kotlin",
      "line": 266,
      "offset": 7,
      "length": 32,
      "code": {
        "startLine": 264,
        "length": 32,
        "offset": 23,
        "surroundingCode": "   * false\n   */\n  fun setCheckForExtensionDependencies(checkForExtensionDependencies: Boolean) {\n    this.checkForExtensionDependencies = checkForExtensionDependencies\n  }"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "73cba363645b89375fd9de9951d3741c1f794e94d15927e01b326dd0c51d80f5"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"HandleWidth\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/foundation/text/selection/SelectionHandles.kt",
      "language": "kotlin",
      "line": 22,
      "offset": 14,
      "length": 11,
      "code": {
        "startLine": 20,
        "length": 11,
        "offset": 49,
        "surroundingCode": "import androidx.compose.ui.unit.dp\n\ninternal val HandleWidth = 25.dp\ninternal val HandleHeight = 25.dp\n"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "c83aa32f1ec2588e39cf28456f16fced0c600ae8b9c868baef61471c1a4ab8f1"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"addChild\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/commonMain/kotlin/com/mcxross/cohesive/common/ds/tree/TreeNode.kt",
      "language": "kotlin",
      "line": 35,
      "offset": 7,
      "length": 8,
      "code": {
        "startLine": 33,
        "length": 8,
        "offset": 87,
        "surroundingCode": "   * @param child A node which will be directly connected to current node.\n   */\n  fun addChild(child: TreeNode<T>) {\n    child._parent = this\n    _children.add(child)"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "6065e267680d097696f73277b2be2712f3e1c1228f1548f60a77cbdfb5ba38fb"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"prettyString\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/commonMain/kotlin/com/mcxross/cohesive/common/ds/tree/TreeNode.kt",
      "language": "kotlin",
      "line": 111,
      "offset": 7,
      "length": 12,
      "code": {
        "startLine": 109,
        "length": 12,
        "offset": 11,
        "surroundingCode": "  }\n\n  fun prettyString(): String {\n    val stringBuilder = StringBuilder()\n    print(stringBuilder, \"\", \"\")"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "797ea51fd219f47bf809c4067527f6fb475de6c5149021d5ae3caf1f7f31491b"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"clear\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/commonMain/kotlin/com/mcxross/cohesive/common/ds/tree/TreeNode.kt",
      "language": "kotlin",
      "line": 101,
      "offset": 7,
      "length": 5,
      "code": {
        "startLine": 99,
        "length": 5,
        "offset": 71,
        "surroundingCode": "   * Remove all children from root and every node in tree.\n   */\n  fun clear() {\n    _parent = null\n    _children.forEach { it.clear() }"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "667ecfee81168310e31a5bc680b54eb40b9c1ab755ebc486006fb64e42033256"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"removeChild\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/commonMain/kotlin/com/mcxross/cohesive/common/ds/tree/TreeNode.kt",
      "language": "kotlin",
      "line": 55,
      "offset": 7,
      "length": 11,
      "code": {
        "startLine": 53,
        "length": 11,
        "offset": 118,
        "surroundingCode": "   * @return `true` if the node has been successfully removed; `false` if it was not present in the tree.\n   */\n  fun removeChild(child: TreeNode<T>): Boolean {\n    println(child.value)\n    val removed = child._parent?._children?.remove(child)"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "6eb8d3427af8605c729ed0f3ad3a004527d011dfaf4b50fa4e1221f6e32ecdd7"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Might be 'const'",
  "severity": "Moderate",
  "comment": "Might be 'const'",
  "detailsInfo": "Reports top-level `val` properties in objects that might be declared as `const` for better performance and Java interoperability.\n\n**Example:**\n\n\n      object A {\n          val foo = 1\n      }\n\nAfter the quick-fix is applied:\n\n\n      object A {\n          const val foo = 1\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/foundation/text/TouchMode.desktop.kt",
      "language": "kotlin",
      "line": 19,
      "offset": 14,
      "length": 13,
      "code": {
        "startLine": 17,
        "length": 13,
        "offset": 66,
        "surroundingCode": "package com.mcxross.cohesive.mellow.foundation.text\n\ninternal val isInTouchMode = false\n"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "MayBeConstant"
  },
  "hash": "47b244bb6a3755a447356c2a0c45cfbf14b0ae83e7bd7d6b29b82c09807de33f"
}]}