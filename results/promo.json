{"version":"3","listProblem":[{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'VerticalSplittable' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/commonMain/kotlin/com/mcxross/cohesive/common/editor/util/VerticalSplittable.kt",
      "language": "kotlin",
      "line": 26,
      "offset": 5,
      "length": 18,
      "code": {
        "startLine": 24,
        "length": 18,
        "offset": 17,
        "surroundingCode": "\n@Composable\nfun VerticalSplittable(\n    modifier: Modifier,\n    splitterState: SplitterState,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.commonMain",
    "inspectionName": "FunctionName"
  },
  "hash": "4a986bffeb84f284fae30e13b8de1eb8e44c50cbb6e88b6b46282f08ad162c9f"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'VerticalSplitter' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/commonMain/kotlin/com/mcxross/cohesive/common/editor/util/VerticalSplittable.kt",
      "language": "kotlin",
      "line": 61,
      "offset": 5,
      "length": 16,
      "code": {
        "startLine": 59,
        "length": 16,
        "offset": 17,
        "surroundingCode": "\n@Composable\nfun VerticalSplitter(\n    splitterState: SplitterState,\n    onResize: (delta: Dp) -> Unit,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.commonMain",
    "inspectionName": "FunctionName"
  },
  "hash": "8055515ab5f97799aee8ddb08cb1b854c6c2577c16ad977b9b34dcce7bc3c722"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant SAM constructor",
  "severity": "High",
  "comment": "Redundant SAM-constructor",
  "detailsInfo": "Reports SAM (Single Abstract Method) constructor usages which can be replaced with lambdas.\n\n**Example:**\n\n\n      fun main() {\n          foo(Runnable { println(\"Hi!\") })\n      }\n\n      fun foo(other: Runnable) {}\n\nAfter the quick-fix is applied:\n\n\n      fun main() {\n          foo( { println(\"Hi!\") })\n      }\n\n      fun foo(other: Runnable) {}\n",
  "sources": [
    {
      "type": "file",
      "path": "common/src/jvmMain/kotlin/com/mcxross/cohesive/common/common/platform/JvmFile.kt",
      "language": "kotlin",
      "line": 22,
      "offset": 24,
      "length": 14,
      "code": {
        "startLine": 20,
        "length": 14,
        "offset": 96,
        "surroundingCode": "    override val children: List<File>\n        get() = this@toProjectFile\n            .listFiles(FilenameFilter { _, name -> !name.startsWith(\".\")})\n            .orEmpty()\n            .map { it.toProjectFile() }"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "RedundantSamConstructor"
  },
  "hash": "87e9c7d9b5bf30380c1d2acaa6a8e8aee3bc93a54d24a5f0925313588fa56932"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"backgroundDarkLight\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/commonMain/kotlin/com/mcxross/cohesive/common/common/Theme.kt",
      "language": "kotlin",
      "line": 29,
      "offset": 13,
      "length": 19,
      "code": {
        "startLine": 27,
        "length": 19,
        "offset": 138,
        "surroundingCode": "        private val backgroundDark: Color = Color(0xFF2B2B2B)\n        private val onBackgroundDark: Color = Color(0xFFA9A9A9)\n        val backgroundDarkLight: Color = Color(0xFF4E5254)\n        private val surfaceDark: Color = Color(0xFF3C3F41)\n        private val onSurfaceDark: Color = Color(0xFFA9A9A9)"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "8e57c8f0f92d2db4e5c7b3d8afea1a29648812afaf0aad8e6296bb38b1d2873a"
}]}