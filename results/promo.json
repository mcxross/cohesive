{"version":"3","listProblem":[{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'Card' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/commonMain/kotlin/xyz/mcxross/cohesive/designsystem/mellow/Card.kt",
      "language": "kotlin",
      "line": 28,
      "offset": 5,
      "length": 4,
      "code": {
        "startLine": 26,
        "length": 4,
        "offset": 20,
        "surroundingCode": " */\n@Composable\nfun Card(\n  modifier: Modifier,\n  shape: Shape = RoundedCornerShape(15.dp),"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.commonMain",
    "inspectionName": "FunctionName"
  },
  "hash": "8cc05a51dd6dd4507d0b335712e57177acf21202e901b5f4a4110527f893c740"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'TopBar' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/designsystem/mellow/TopBar.kt",
      "language": "kotlin",
      "line": 35,
      "offset": 17,
      "length": 6,
      "code": {
        "startLine": 33,
        "length": 6,
        "offset": 29,
        "surroundingCode": "\n@Composable\nfun WindowScope.TopBar(\n  onClose: () -> Unit,\n  onRestore: () -> Unit,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "46f78c1f12f079a742b11667415cf8d0f8c2cde99921a220b04bdff33723fabb"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'TopMinBar' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/designsystem/mellow/TopBar.kt",
      "language": "kotlin",
      "line": 110,
      "offset": 5,
      "length": 9,
      "code": {
        "startLine": 108,
        "length": 9,
        "offset": 17,
        "surroundingCode": "\n@Composable\nfun TopMinBar(\n  onClose: () -> Unit,\n  modifier: Modifier,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "26356535888ba6ab7bcbaf82981ce931773c198745d002e6a0cd5c621fe7deb6"
},{
  "tool": "Code Inspection",
  "category": "Probable bugs",
  "type": "Unresolved reference in KDoc",
  "severity": "High",
  "comment": "Cannot resolve symbol 'plugins'",
  "detailsInfo": "Reports unresolved references in KDoc comments.\n\n**Example:**\n\n\n      /**\n       * [unresolvedLink]\n       */\n      fun foo() {}\n\nTo fix the problem make the link valid.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/commonMain/kotlin/xyz/mcxross/cohesive/state/Platform.kt",
      "language": "kotlin",
      "line": 9,
      "offset": 14,
      "length": 7,
      "code": {
        "startLine": 7,
        "length": 7,
        "offset": 101,
        "surroundingCode": " * @property k A list of Chain flavor.\n * @property v A list of Chain flavor URL paths.\n * @property plugins A list of Primary Plugins available(installed and non-installed).\n */\nobject Platform {"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.commonMain",
    "inspectionName": "KDocUnresolvedReference"
  },
  "hash": "4fbc9731bf1a555b1479f6d337e23ff453fe0f0af03337e65b7d43680237db56"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Function 'loadCohesiveProject' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/commonMain/kotlin/xyz/mcxross/cohesive/project/Project.kt",
      "language": "kotlin",
      "line": 61,
      "offset": 7,
      "length": 19,
      "code": {
        "startLine": 59,
        "length": 19,
        "offset": 11,
        "surroundingCode": "  }\n\n  fun loadCohesiveProject() {\n\n  }"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.commonMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "16a8bd1efa3115de822171a9cc7bed44b8d093e0a8a8dc32946d1a0324710275"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'projectLoaded' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/commonMain/kotlin/xyz/mcxross/cohesive/project/Project.kt",
      "language": "kotlin",
      "line": 20,
      "offset": 7,
      "length": 13,
      "code": {
        "startLine": 18,
        "length": 13,
        "offset": 52,
        "surroundingCode": "  private val COHESIVE_PROJECT = \".cohesive\"\n\n  var projectLoaded: Boolean = false\n\n  init {"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.commonMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "26e4b2771769b480deb3fa8c7b64ff04a39b4289256455d3947c6ce6e3504f19"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'sorted' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/designsystem/mellow/foundation/text/selection/SelectionRegistrarImpl.kt",
      "language": "kotlin",
      "line": 30,
      "offset": 3,
      "length": 8,
      "code": {
        "startLine": 28,
        "length": 8,
        "offset": 76,
        "surroundingCode": "   * A flag to check if the [Selectable]s have already been sorted.\n   */\n  internal var sorted: Boolean = false\n\n  /**"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "898bf57d8bf16d46bfbed1b94b172825447733d32557c21ecd07e6132edb25c1"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'selectables' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/designsystem/mellow/foundation/text/selection/SelectionRegistrarImpl.kt",
      "language": "kotlin",
      "line": 41,
      "offset": 3,
      "length": 8,
      "code": {
        "startLine": 39,
        "length": 8,
        "offset": 54,
        "surroundingCode": "   * Getter for handlers that returns a List.\n   */\n  internal val selectables: List<Selectable>\n    get() = _selectables\n"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "b2807a6668f0f00a9f8f35cbdc4a85cdaeb7fd6b19008afe0dd86b150230d840"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "'protected' visibility is effectively 'private' in a final class",
  "severity": "Moderate",
  "comment": "'protected' visibility is effectively 'private' in a final class",
  "detailsInfo": "Reports `protected` visibility used inside of a `final` class. In such cases `protected` members are accessible only in the class itself, so they are effectively `private`.\n\n**Example:**\n\n\n      class FinalClass {\n          protected fun foo() {}\n      }\n\nAfter the quick-fix is applied:\n\n\n      class FinalClass {\n          private fun foo() {}\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/cps/DefaultPluginRepository.kt",
      "language": "kotlin",
      "line": 46,
      "offset": 3,
      "length": 9,
      "code": {
        "startLine": 44,
        "length": 9,
        "offset": 7,
        "surroundingCode": "  }\n\n  protected fun createHiddenPluginFilter(): FileFilter {\n    return OrFileFilter(HiddenFilter())\n  }"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "ProtectedInFinal"
  },
  "hash": "92f574a4ea9d1cac8a88b0970fe168a1c668f629204a8cdb7794ea1ac04b5400"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"onItemClicked\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/designsystem/mellow/ToastModel.kt",
      "language": "kotlin",
      "line": 12,
      "offset": 7,
      "length": 13,
      "code": {
        "startLine": 10,
        "length": 13,
        "offset": 23,
        "surroundingCode": "    private set\n\n  fun onItemClicked(id: Long) {\n    setState { copy(editingItemId = id) }\n  }"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "6c3504f8af9ca2fcb997f1fad158e326893d6c0c64bfd4c7729de1dfe195dd77"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"DAP\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/cps/ClassLoadingStrategy.kt",
      "language": "kotlin",
      "line": 28,
      "offset": 9,
      "length": 3,
      "code": {
        "startLine": 26,
        "length": 3,
        "offset": 66,
        "surroundingCode": "\n    /** dependencies -> application(parent) -> Plugin */\n    val DAP = ClassLoadingStrategy(listOf(Source.DEPENDENCIES, Source.APPLICATION, Source.PLUGIN))\n\n    /** dependencies -> Plugin -> application(parent) */"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "2e90c543d073fb0a49265cbef97301fa8f3e10b9cee3932516fdac5bcc353857"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"DPA\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/cps/ClassLoadingStrategy.kt",
      "language": "kotlin",
      "line": 31,
      "offset": 9,
      "length": 3,
      "code": {
        "startLine": 29,
        "length": 3,
        "offset": 66,
        "surroundingCode": "\n    /** dependencies -> Plugin -> application(parent) */\n    val DPA = ClassLoadingStrategy(listOf(Source.DEPENDENCIES, Source.PLUGIN, Source.APPLICATION))\n\n    /** Plugin -> dependencies -> application(parent) */"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "4fc34266d6d0aa9ef03845999009f7841b975bdeec032877880496ce05f3a5fd"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"PAD\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/cps/ClassLoadingStrategy.kt",
      "language": "kotlin",
      "line": 25,
      "offset": 9,
      "length": 3,
      "code": {
        "startLine": 23,
        "length": 3,
        "offset": 66,
        "surroundingCode": "\n    /** Plugin -> application(parent) -> dependencies */\n    val PAD = ClassLoadingStrategy(listOf(Source.PLUGIN, Source.APPLICATION, Source.DEPENDENCIES))\n\n    /** dependencies -> application(parent) -> Plugin */"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "8ec8c006149fe744f7e17ab0860eb1992fac3d8ad58a7976705d57847e869abb"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"ADP\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/cps/ClassLoadingStrategy.kt",
      "language": "kotlin",
      "line": 22,
      "offset": 9,
      "length": 3,
      "code": {
        "startLine": 20,
        "length": 3,
        "offset": 66,
        "surroundingCode": "\n    /** application(parent) -> dependencies -> Plugin */\n    val ADP = ClassLoadingStrategy(listOf(Source.APPLICATION, Source.DEPENDENCIES, Source.PLUGIN))\n\n    /** Plugin -> application(parent) -> dependencies */"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "4453e87a0e3e1eb6c44413055966b9852579376a5594d88990d95954f9116d89"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"points\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/csp/src/main/kotlin/xyz/mcxross/cohesive/csp/annotation/Extension.kt",
      "language": "kotlin",
      "line": 23,
      "offset": 7,
      "length": 6,
      "code": {
        "startLine": 21,
        "length": 6,
        "offset": 93,
        "surroundingCode": "   * @return classes of extension points, that are implemented by this extension\n   */\n  val points: Array<KClass<out ExtensionPoint>> = [],\n  /**\n   * An array of plugin IDs, that have to be available in order to load this extension. The"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.csp.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "5d5070a089f2e3352806d536c347c5461837ec0210b75cdd9da4b66435028eec"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Type alias \"WindowState\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/state/StateHolder.kt",
      "language": "kotlin",
      "line": 12,
      "offset": 11,
      "length": 11,
      "code": {
        "startLine": 10,
        "length": 11,
        "offset": 55,
        "surroundingCode": "import xyz.mcxross.cohesive.project.Project\n\ntypealias WindowState = StatesHolder.Window\n\n@Serializable"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "c02da4af18954d4e24693a46df5db51939ae3130189ba7c87b2688730f0bd3bf"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"getDependencies\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/cps/DependencyResolver.kt",
      "language": "kotlin",
      "line": 82,
      "offset": 7,
      "length": 15,
      "code": {
        "startLine": 80,
        "length": 15,
        "offset": 84,
        "surroundingCode": "   * @return an immutable list of dependencies (new list for each call)\n   */\n  fun getDependencies(pluginId: String): List<String> {\n    checkResolved()\n    return ArrayList<String>(dependenciesGraph!!.getNeighbors(pluginId))"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "1c18c12cb53ebceb64c5655aa272e800aebbb4dd7618568743d9fae143084bd7"
}]}