{"version":"3","listProblem":[{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Obvious explicit type",
  "severity": "High",
  "comment": "Explicitly given type is redundant here",
  "detailsInfo": "Reports local variables' explicitly given types which are obvious and thus redundant, like `val f: Foo = Foo()`.\n\n**Example:**\n\n\n      class Point(val x: Int, val y: Int)\n\n      fun foo() {\n          val t: Boolean = true\n          val p: Point = Point(1, 2)\n          val i: Int = 42\n      }\n\nAfter the quick-fix is applied:\n\n\n      class Point(val x: Int, val y: Int)\n\n      fun foo() {\n          val t = true\n          val p = Point(1, 2)\n          val i = 42\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/common/frontend/impl/ui/widget/md/parser/Parser.kt",
      "language": "kotlin",
      "line": 30,
      "offset": 13,
      "length": 6,
      "code": {
        "startLine": 28,
        "length": 6,
        "offset": 78,
        "surroundingCode": "\n  val contentBufferReader = BufferedReader(StringReader(string))\n  var line: String = \"\"\n  var isCodeBlock = false\n  val codeBlock = Code(\"\")"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "RedundantExplicitType"
  },
  "hash": "49a1f274cae9e62d55bb0db803974ab695405aaa638cc00b0fa7583d0b4d480b"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'Checkbox' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/commonMain/kotlin/com/mcxross/cohesive/common/frontend/impl/ui/widget/md/markup/Checkbox.kt",
      "language": "kotlin",
      "line": 19,
      "offset": 5,
      "length": 8,
      "code": {
        "startLine": 17,
        "length": 8,
        "offset": 17,
        "surroundingCode": "\n@Composable\nfun Checkbox(\n  text: String,\n  color: Color,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.commonMain",
    "inspectionName": "FunctionName"
  },
  "hash": "33a728df9379d3d5db6f3c3ad1f15d8b30d52726c16e9bb0e970caf246cb38b8"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'RenderComponent' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/commonMain/kotlin/com/mcxross/cohesive/common/frontend/impl/ui/widget/Markdown.kt",
      "language": "kotlin",
      "line": 81,
      "offset": 13,
      "length": 15,
      "code": {
        "startLine": 79,
        "length": 15,
        "offset": 25,
        "surroundingCode": "\n@Composable\nprivate fun RenderComponent(\n  item: Element,\n  config: MarkdownConfig,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.commonMain",
    "inspectionName": "FunctionName"
  },
  "hash": "dfbeb82bd2447cbe38720050fa6de9f4d91a67d6271f46fa360cc81090747cbd"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'Markdown' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/commonMain/kotlin/com/mcxross/cohesive/common/frontend/impl/ui/widget/Markdown.kt",
      "language": "kotlin",
      "line": 34,
      "offset": 5,
      "length": 8,
      "code": {
        "startLine": 32,
        "length": 8,
        "offset": 17,
        "surroundingCode": "\n@Composable\nfun Markdown(\n  modifier: Modifier,\n  content: String,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.commonMain",
    "inspectionName": "FunctionName"
  },
  "hash": "87b1732ab429a0e28b4ea199c22a28a95d1f9cc9e8cef0286581a1a6159322c9"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'Space' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/commonMain/kotlin/com/mcxross/cohesive/common/frontend/impl/ui/widget/md/markup/Space.kt",
      "language": "kotlin",
      "line": 11,
      "offset": 5,
      "length": 5,
      "code": {
        "startLine": 9,
        "length": 5,
        "offset": 17,
        "surroundingCode": "\n@Composable\nfun Space(\n  modifier: Modifier = Modifier,\n) {"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.commonMain",
    "inspectionName": "FunctionName"
  },
  "hash": "e7ea0f36af3f94c79dad48f59dfa59aac5f3d7f82b746ee6f43e92b99a2aa994"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'ResizablePanel' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/commonMain/kotlin/com.mcxross.cohesive.mellow/ResizablePanel.kt",
      "language": "kotlin",
      "line": 37,
      "offset": 5,
      "length": 14,
      "code": {
        "startLine": 35,
        "length": 14,
        "offset": 17,
        "surroundingCode": "\n@Composable\nfun ResizablePanel(\n  modifier: Modifier,\n  state: PanelState,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.commonMain",
    "inspectionName": "FunctionName"
  },
  "hash": "a7c063cd3046009db3852e95f8563b82fea772687bbe259c2f86ac85f97854aa"
},{
  "tool": "Code Inspection",
  "category": "Probable bugs",
  "type": "Unresolved reference in KDoc",
  "severity": "High",
  "comment": "Cannot resolve symbol 'compare'",
  "detailsInfo": "Reports unresolved references in KDoc comments.\n\n**Example:**\n\n\n      /**\n       * [unresolvedLink]\n       */\n      fun foo() {}\n\nTo fix the problem make the link valid.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/cps/VersionManager.kt",
      "language": "kotlin",
      "line": 15,
      "offset": 58,
      "length": 7,
      "code": {
        "startLine": 13,
        "length": 7,
        "offset": 64,
        "surroundingCode": "\n  /**\n   * Compare two versions. It's similar with [Comparator.compare].\n   *\n   * @param v1"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "KDocUnresolvedReference"
  },
  "hash": "cf762da542a590b2706774faeb901b6aac4967134151f42b82b232241ceec3a9"
},{
  "tool": "Code Inspection",
  "category": "Probable bugs",
  "type": "Unresolved reference in KDoc",
  "severity": "High",
  "comment": "Cannot resolve symbol 'text'",
  "detailsInfo": "Reports unresolved references in KDoc comments.\n\n**Example:**\n\n\n      /**\n       * [unresolvedLink]\n       */\n      fun foo() {}\n\nTo fix the problem make the link valid.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/foundation/text/selection/SelectionHandles.kt",
      "language": "kotlin",
      "line": 28,
      "offset": 23,
      "length": 4,
      "code": {
        "startLine": 26,
        "length": 4,
        "offset": 70,
        "surroundingCode": " * Adjust coordinates for given text offset.\n *\n * Currently [android.text.Layout.getLineBottom] returns y coordinates of the next\n * line's top offset, which is not included in current line's hit area. To be able to\n * hit current line, move up this y coordinates by 1 pixel."
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "KDocUnresolvedReference"
  },
  "hash": "c91207d3b24cdb1a6094e0e690c77d8a6bce99d13e22d23f3371acc16f127f6f"
},{
  "tool": "Code Inspection",
  "category": "Probable bugs",
  "type": "Unresolved reference in KDoc",
  "severity": "High",
  "comment": "Cannot resolve symbol 'Layout'",
  "detailsInfo": "Reports unresolved references in KDoc comments.\n\n**Example:**\n\n\n      /**\n       * [unresolvedLink]\n       */\n      fun foo() {}\n\nTo fix the problem make the link valid.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/foundation/text/selection/SelectionHandles.kt",
      "language": "kotlin",
      "line": 28,
      "offset": 28,
      "length": 6,
      "code": {
        "startLine": 26,
        "length": 6,
        "offset": 75,
        "surroundingCode": " * Adjust coordinates for given text offset.\n *\n * Currently [android.text.Layout.getLineBottom] returns y coordinates of the next\n * line's top offset, which is not included in current line's hit area. To be able to\n * hit current line, move up this y coordinates by 1 pixel."
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "KDocUnresolvedReference"
  },
  "hash": "12197f2c79f4421f4156688f1176f306ff04da5317efbbeacf833e742cf775ce"
},{
  "tool": "Code Inspection",
  "category": "Probable bugs",
  "type": "Unresolved reference in KDoc",
  "severity": "High",
  "comment": "Cannot resolve symbol 'getLineBottom'",
  "detailsInfo": "Reports unresolved references in KDoc comments.\n\n**Example:**\n\n\n      /**\n       * [unresolvedLink]\n       */\n      fun foo() {}\n\nTo fix the problem make the link valid.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/foundation/text/selection/SelectionHandles.kt",
      "language": "kotlin",
      "line": 28,
      "offset": 35,
      "length": 13,
      "code": {
        "startLine": 26,
        "length": 13,
        "offset": 82,
        "surroundingCode": " * Adjust coordinates for given text offset.\n *\n * Currently [android.text.Layout.getLineBottom] returns y coordinates of the next\n * line's top offset, which is not included in current line's hit area. To be able to\n * hit current line, move up this y coordinates by 1 pixel."
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "KDocUnresolvedReference"
  },
  "hash": "dccf398f1f53c0bad44679e7c652d6c614cef06e4c03f245155a4a64e33f143c"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Object property naming convention",
  "severity": "Moderate",
  "comment": "Object or top-level property name '_code' should not start with an underscore",
  "detailsInfo": "Reports properties that do not follow the naming conventions.\n\nThe following properties are reported:\n\n* Top-level properties\n* Properties in objects and companion objects\n\nYou can specify the required pattern in the inspection options.\n\n[Recommended naming conventions](https://kotlinlang.org/docs/coding-conventions.html#naming-rules): it has to start with an uppercase letter, use camel case and no underscores.\n\n**Example:**\n\n\n      // top-level property\n      val USER_NAME_FIELD = \"UserName\"\n      // top-level property holding reference to singleton object\n      val PersonComparator: Comparator<Person> = /*...*/\n\n      class Person {\n        companion object {\n          // property in companion object\n          val NO_NAME = Person()\n        }\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/commonMain/kotlin/com.mcxross.cohesive.mellow/icon/regular/Code.kt",
      "language": "kotlin",
      "line": 36,
      "offset": 13,
      "length": 5,
      "code": {
        "startLine": 34,
        "length": 5,
        "offset": 17,
        "surroundingCode": "  }\n\nprivate var _code: ImageVector? = null\n"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.commonMain",
    "inspectionName": "ObjectPropertyName"
  },
  "hash": "c0a009a2923d2505164449ca673ad556932e7803c17f99ac15383c80c0f03897"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused receiver parameter",
  "severity": "High",
  "comment": "Receiver parameter is never used",
  "detailsInfo": "Reports receiver parameter of extension functions and properties that is not used.\n\n**Remove redundant receiver parameter** can be used to amend the code automatically.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/foundation/text/selection/TextFieldSelectionManager.desktop.kt",
      "language": "kotlin",
      "line": 21,
      "offset": 14,
      "length": 12,
      "code": {
        "startLine": 19,
        "length": 12,
        "offset": 68,
        "surroundingCode": "import androidx.compose.ui.input.pointer.PointerEvent\n\ninternal val PointerEvent.isShiftPressed: Boolean\n  get() = false // TODO implement\n// mouseEvent?.isShiftDown ?: false"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "UnusedReceiverParameter"
  },
  "hash": "55001d08e76aaddcbfaa80dc1e6e4aac09b15f514d731851de030d6d99364cdb"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'versionManager' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/cps/DependencyResolver.kt",
      "language": "kotlin",
      "line": 17,
      "offset": 30,
      "length": 14,
      "code": {
        "startLine": 15,
        "length": 14,
        "offset": 75,
        "surroundingCode": " * in the process of `resolve` operation.\n */\nclass DependencyResolver(val versionManager: VersionManager) {\n  // the value is 'pluginId'\n  private var dependenciesGraph: DirectedGraph<String>? = null"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "535aa0836407457c6673c22563b96e9fd2f2b671b37cc977783144271766bad6"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'dependencyId' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/cps/DependencyResolver.kt",
      "language": "kotlin",
      "line": 179,
      "offset": 9,
      "length": 12,
      "code": {
        "startLine": 177,
        "length": 12,
        "offset": 63,
        "surroundingCode": "  class WrongDependencyVersion\n  internal constructor(\n    val dependencyId: String, // value is \"pluginId\"\n    var dependentId: String,\n    val existingVersion: String,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "90461f4701bd0d8d2f6c201b6c3826c183322da95126da75a09753c2a3e6f59d"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'dependentId' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/cps/DependencyResolver.kt",
      "language": "kotlin",
      "line": 180,
      "offset": 9,
      "length": 11,
      "code": {
        "startLine": 178,
        "length": 11,
        "offset": 85,
        "surroundingCode": "  internal constructor(\n    val dependencyId: String, // value is \"pluginId\"\n    var dependentId: String,\n    val existingVersion: String,\n    val requiredVersion: String,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "909b081bf526be7a41fcb099903e0170b6eaacffb61a70d536be63ef4a150f5c"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'existingVersion' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/cps/DependencyResolver.kt",
      "language": "kotlin",
      "line": 181,
      "offset": 9,
      "length": 15,
      "code": {
        "startLine": 179,
        "length": 15,
        "offset": 90,
        "surroundingCode": "    val dependencyId: String, // value is \"pluginId\"\n    var dependentId: String,\n    val existingVersion: String,\n    val requiredVersion: String,\n  ) {"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "fb53c6bb895a34b2ff308dc2e6fe1f85887ee0ebe5a28e7f325f1867a8932e4b"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'requiredVersion' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/cps/DependencyResolver.kt",
      "language": "kotlin",
      "line": 182,
      "offset": 9,
      "length": 15,
      "code": {
        "startLine": 180,
        "length": 15,
        "offset": 70,
        "surroundingCode": "    var dependentId: String,\n    val existingVersion: String,\n    val requiredVersion: String,\n  ) {\n"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "25359f4f0aaa46480caa150c47760c23f3e1ff425a47c06d60432f11efb70016"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'comparator' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/cps/BasePluginRepository.kt",
      "language": "kotlin",
      "line": 20,
      "offset": 7,
      "length": 10,
      "code": {
        "startLine": 18,
        "length": 10,
        "offset": 30,
        "surroundingCode": ") : PluginRepository {\n\n  var comparator: Comparator<File>? = Comparator.comparingLong { obj: File -> obj.lastModified() }\n  override val pluginPaths: List<Path>\n    get() ="
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "750291b238b7cc9d777eb03fe1aab0d66c7ac1713a11d0f2c688c82e9ff99c3f"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "'protected' visibility is effectively 'private' in a final class",
  "severity": "Moderate",
  "comment": "'protected' visibility is effectively 'private' in a final class",
  "detailsInfo": "Reports `protected` visibility used inside of a `final` class. In such cases `protected` members are accessible only in the class itself, so they are effectively `private`.\n\n**Example:**\n\n\n      class FinalClass {\n          protected fun foo() {}\n      }\n\nAfter the quick-fix is applied:\n\n\n      class FinalClass {\n          private fun foo() {}\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/cps/DevelopmentPluginRepository.kt",
      "language": "kotlin",
      "line": 20,
      "offset": 3,
      "length": 9,
      "code": {
        "startLine": 18,
        "length": 9,
        "offset": 7,
        "surroundingCode": "  }\n\n  protected fun createHiddenPluginFilter(): FileFilter {\n    val hiddenPluginFilter = OrFileFilter(HiddenFilter())\n"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "ProtectedInFinal"
  },
  "hash": "da93f9ebcf5ad4b9f13b33644892a17b062263298ce77e9c1126ebc217f7177a"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Object \"Daemon\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/common/Daemon.kt",
      "language": "kotlin",
      "line": 7,
      "offset": 8,
      "length": 6,
      "code": {
        "startLine": 5,
        "length": 6,
        "offset": 57,
        "surroundingCode": "import kotlinx.coroutines.newSingleThreadContext\n\nobject Daemon {\n  @OptIn(DelicateCoroutinesApi::class)\n  val scope = CoroutineScope(newSingleThreadContext(\"Daemon\"))"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "69400a6635ff52f5504a78d6f71b63aca45e899862c8a994fc389623caedf8e5"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"SwitchView\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/common/frontend/api/ui/screen/IMain.kt",
      "language": "kotlin",
      "line": 12,
      "offset": 7,
      "length": 10,
      "code": {
        "startLine": 10,
        "length": 10,
        "offset": 21,
        "surroundingCode": "\n  @Composable\n  fun SwitchView()\n\n  @Composable"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "1c2b655b8925c62994aeec1e462eeb419664ba856a39e61abb3ca42fa28308ac"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"ExplorerView\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/common/frontend/api/ui/screen/IMain.kt",
      "language": "kotlin",
      "line": 21,
      "offset": 7,
      "length": 12,
      "code": {
        "startLine": 19,
        "length": 12,
        "offset": 21,
        "surroundingCode": "\n  @Composable\n  fun ExplorerView()\n\n  @Composable"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "29f9c1106b6db0d87ad11fefb98a5cfff46409d7dff255325f9d9b6f474a24b3"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"ClusterMenu\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/common/frontend/api/ui/screen/IMain.kt",
      "language": "kotlin",
      "line": 15,
      "offset": 7,
      "length": 11,
      "code": {
        "startLine": 13,
        "length": 11,
        "offset": 21,
        "surroundingCode": "\n  @Composable\n  fun ClusterMenu()\n\n  @Composable"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "2e8c8ee7275e26caf6ac8c71ab48ce2908cb0033291c272c0aafcf79e59c2200"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Interface \"IMain\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/common/frontend/api/ui/screen/IMain.kt",
      "language": "kotlin",
      "line": 6,
      "offset": 11,
      "length": 5,
      "code": {
        "startLine": 4,
        "length": 5,
        "offset": 73,
        "surroundingCode": "import com.mcxross.cohesive.common.frontend.api.ui.view.IView\n\ninterface IMain : IView {\n\n  @Composable"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "584fd3407e6a68c2cb71ff53fcc85881584b6ac4d42bc0e31d8a59e4b343e2f5"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"EditorView\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/common/frontend/api/ui/screen/IMain.kt",
      "language": "kotlin",
      "line": 27,
      "offset": 7,
      "length": 10,
      "code": {
        "startLine": 25,
        "length": 10,
        "offset": 21,
        "surroundingCode": "\n  @Composable\n  fun EditorView()\n}\n"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "a6baf1c7e540f6968cf09b6c3ee76b982251780e2ddad1c8896fb1394c8f1163"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"WindowListMenuButton\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/common/frontend/api/ui/screen/IMain.kt",
      "language": "kotlin",
      "line": 9,
      "offset": 7,
      "length": 20,
      "code": {
        "startLine": 7,
        "length": 20,
        "offset": 21,
        "surroundingCode": "\n  @Composable\n  fun WindowListMenuButton()\n\n  @Composable"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "10bae72a4b4c527378ca28347b6eef3053f35cda78f5321479461247d1f8b95e"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"TitleMenuBar\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/common/frontend/api/ui/screen/IMain.kt",
      "language": "kotlin",
      "line": 18,
      "offset": 7,
      "length": 12,
      "code": {
        "startLine": 16,
        "length": 12,
        "offset": 21,
        "surroundingCode": "\n  @Composable\n  fun TitleMenuBar()\n\n  @Composable"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "a5696792352afc2f833555788cf85e9d4e5b00a325cc756d31c7afa62f0b7e13"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"WalletView\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/common/frontend/api/ui/screen/IMain.kt",
      "language": "kotlin",
      "line": 24,
      "offset": 7,
      "length": 10,
      "code": {
        "startLine": 22,
        "length": 10,
        "offset": 21,
        "surroundingCode": "\n  @Composable\n  fun WalletView()\n\n  @Composable"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "fabec8be54e5117112132cb5c996e8f060664bef584a1d9e2dc7339f40184f8f"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"HandleWidth\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/foundation/text/selection/SelectionHandles.kt",
      "language": "kotlin",
      "line": 22,
      "offset": 14,
      "length": 11,
      "code": {
        "startLine": 20,
        "length": 11,
        "offset": 49,
        "surroundingCode": "import androidx.compose.ui.unit.dp\n\ninternal val HandleWidth = 25.dp\ninternal val HandleHeight = 25.dp\n"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "c83aa32f1ec2588e39cf28456f16fced0c600ae8b9c868baef61471c1a4ab8f1"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"getFileFromPath\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/File.kt",
      "language": "kotlin",
      "line": 10,
      "offset": 5,
      "length": 15,
      "code": {
        "startLine": 8,
        "length": 15,
        "offset": 77,
        "surroundingCode": "  get() = java.io.File(System.getProperty(\"user.home\")).toProjectFile()\n\nfun getFileFromPath(path: String): File = java.io.File(path).toProjectFile()\n"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "c285974ce4feccde8cff5c447e3d58e917df5db6a6ff3aec83608cd611d8b4b2"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"removeFileFilter\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/cps/utils/AndFileFilter.kt",
      "language": "kotlin",
      "line": 16,
      "offset": 7,
      "length": 16,
      "code": {
        "startLine": 14,
        "length": 16,
        "offset": 101,
        "surroundingCode": "  constructor(vararg fileFilters: FileFilter) : this(mutableListOf<FileFilter>(*fileFilters))\n\n  fun removeFileFilter(fileFilter: FileFilter): Boolean {\n    return fileFilters.remove(fileFilter)\n  }"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "c241d6d3d8905e69e23e84409067df3f519f6e9d808c2c591af478cd602b80de"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Constructor is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/cps/DevelopmentPluginRepository.kt",
      "language": "kotlin",
      "line": 14,
      "offset": 3,
      "length": 11,
      "code": {
        "startLine": 12,
        "length": 11,
        "offset": 49,
        "surroundingCode": "\n  override var filter: FileFilter? = filter()\n  constructor(vararg pluginsRoots: Path) : this(mutableListOf<Path>(*pluginsRoots))\n\n  fun filter(): AndFileFilter {"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "36592df368cc2d0935f4094e5e13706f91c3e8e488d0652664b677fc49bcd5c1"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"runtimeMode\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/cps/PluginWrapper.kt",
      "language": "kotlin",
      "line": 20,
      "offset": 7,
      "length": 11,
      "code": {
        "startLine": 18,
        "length": 11,
        "offset": 102,
        "surroundingCode": "  var pluginFactory: PluginFactory? = null\n  var pluginState: PluginState = PluginState.CREATED\n  var runtimeMode: RuntimeMode = pluginManager.runtimeMode!!\n\n  /**"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "eae662cc7b8b3ec9870a9a29dd1453c6f356423c32247e7da80cd53c605e102c"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Constructor is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/cps/DefaultPluginRepository.kt",
      "language": "kotlin",
      "line": 26,
      "offset": 3,
      "length": 11,
      "code": {
        "startLine": 24,
        "length": 11,
        "offset": 9,
        "surroundingCode": "    }\n\n  constructor(vararg pluginsRoots: Path) : this(mutableListOf<Path>(*pluginsRoots)) {}\n\n  fun filter(): AndFileFilter {"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "2123b69204423799b9c74f05a59fb4cfac633a20eb97bc77a2ad18b1046eb00f"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"prettyString\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/commonMain/kotlin/com/mcxross/cohesive/common/ds/tree/TreeNode.kt",
      "language": "kotlin",
      "line": 111,
      "offset": 7,
      "length": 12,
      "code": {
        "startLine": 109,
        "length": 12,
        "offset": 11,
        "surroundingCode": "  }\n\n  fun prettyString(): String {\n    val stringBuilder = StringBuilder()\n    print(stringBuilder, \"\", \"\")"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "797ea51fd219f47bf809c4067527f6fb475de6c5149021d5ae3caf1f7f31491b"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"clear\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/commonMain/kotlin/com/mcxross/cohesive/common/ds/tree/TreeNode.kt",
      "language": "kotlin",
      "line": 101,
      "offset": 7,
      "length": 5,
      "code": {
        "startLine": 99,
        "length": 5,
        "offset": 71,
        "surroundingCode": "   * Remove all children from root and every node in tree.\n   */\n  fun clear() {\n    _parent = null\n    _children.forEach { it.clear() }"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "667ecfee81168310e31a5bc680b54eb40b9c1ab755ebc486006fb64e42033256"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"addChild\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/commonMain/kotlin/com/mcxross/cohesive/common/ds/tree/TreeNode.kt",
      "language": "kotlin",
      "line": 35,
      "offset": 7,
      "length": 8,
      "code": {
        "startLine": 33,
        "length": 8,
        "offset": 87,
        "surroundingCode": "   * @param child A node which will be directly connected to current node.\n   */\n  fun addChild(child: TreeNode<T>) {\n    child._parent = this\n    _children.add(child)"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "6065e267680d097696f73277b2be2712f3e1c1228f1548f60a77cbdfb5ba38fb"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"removeChild\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/commonMain/kotlin/com/mcxross/cohesive/common/ds/tree/TreeNode.kt",
      "language": "kotlin",
      "line": 55,
      "offset": 7,
      "length": 11,
      "code": {
        "startLine": 53,
        "length": 11,
        "offset": 118,
        "surroundingCode": "   * @return `true` if the node has been successfully removed; `false` if it was not present in the tree.\n   */\n  fun removeChild(child: TreeNode<T>): Boolean {\n    println(child.value)\n    val removed = child._parent?._children?.remove(child)"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "6eb8d3427af8605c729ed0f3ad3a004527d011dfaf4b50fa4e1221f6e32ecdd7"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Might be 'const'",
  "severity": "Moderate",
  "comment": "Might be 'const'",
  "detailsInfo": "Reports top-level `val` properties in objects that might be declared as `const` for better performance and Java interoperability.\n\n**Example:**\n\n\n      object A {\n          val foo = 1\n      }\n\nAfter the quick-fix is applied:\n\n\n      object A {\n          const val foo = 1\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/foundation/text/UndoManager.kt",
      "language": "kotlin",
      "line": 21,
      "offset": 14,
      "length": 25,
      "code": {
        "startLine": 19,
        "length": 25,
        "offset": 67,
        "surroundingCode": "import androidx.compose.ui.text.input.TextFieldValue\n\ninternal val SNAPSHOTS_INTERVAL_MILLIS = 5000\n\n/**"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "MayBeConstant"
  },
  "hash": "64e3a2e587be3395046e48a8d7af088a009a00ad83b620d8186cfa7583c4a71c"
}]}