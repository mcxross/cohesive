{"version":"3","listProblem":[{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'Text' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/commonMain/kotlin/com/mcxross/cohesive/common/frontend/ui/widget/md/markup/Text.kt",
      "language": "kotlin",
      "line": 15,
      "offset": 5,
      "length": 4,
      "code": {
        "startLine": 13,
        "length": 4,
        "offset": 51,
        "surroundingCode": "@OptIn(ExperimentalUnitApi::class)\n@Composable\nfun Text(\n    text: String,\n    color: Color,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.commonMain",
    "inspectionName": "FunctionName"
  },
  "hash": "d400f5ed538329ea3870dcff64b8db02cc85faf835d2363192ffb5a66ef330d9"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'MKStyledText' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/commonMain/kotlin/com/mcxross/cohesive/common/frontend/ui/widget/md/markup/StyledText.kt",
      "language": "kotlin",
      "line": 16,
      "offset": 5,
      "length": 12,
      "code": {
        "startLine": 14,
        "length": 12,
        "offset": 51,
        "surroundingCode": "@OptIn(ExperimentalUnitApi::class)\n@Composable\nfun MKStyledText(\n    text: String,\n    layer: String,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.commonMain",
    "inspectionName": "FunctionName"
  },
  "hash": "79c82e6c8576cff8de72cc4ba872004b5c8ce991ecffc618fa439c315ea7ad9e"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'CursorHandle' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/foundation/text/DesktopCursorHandle.kt",
      "language": "kotlin",
      "line": 25,
      "offset": 14,
      "length": 12,
      "code": {
        "startLine": 23,
        "length": 12,
        "offset": 55,
        "surroundingCode": "@Composable\n@Suppress(\"UNUSED_PARAMETER\")\ninternal fun CursorHandle(\n    handlePosition: Offset,\n    modifier: Modifier,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "67add6a3c0742eba0277f14983a5b599d5d9e60b3db0f30e80a31260e43d8246"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'FileTreeTab' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/commonMain/kotlin/com.mcxross.cohesive.mellow/FileTree.kt",
      "language": "kotlin",
      "line": 29,
      "offset": 5,
      "length": 11,
      "code": {
        "startLine": 27,
        "length": 11,
        "offset": 17,
        "surroundingCode": "\n@Composable\nfun FileTreeTab(\n    text: String,\n) = Surface {"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.commonMain",
    "inspectionName": "FunctionName"
  },
  "hash": "cc35bd96d98081b815b1938908beb1746e84f6d0b9ec37c76f98e0278719c732"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'FileTree' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/commonMain/kotlin/com.mcxross.cohesive.mellow/FileTree.kt",
      "language": "kotlin",
      "line": 46,
      "offset": 5,
      "length": 8,
      "code": {
        "startLine": 44,
        "length": 8,
        "offset": 17,
        "surroundingCode": "\n@Composable\nfun FileTree(\n    model: FileTreeModel,\n    onItemClick: (File) -> Unit = {},"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.commonMain",
    "inspectionName": "FunctionName"
  },
  "hash": "a3c2ceeb841bcddd07a5615fd0afaf9c11cbcffbf6bdfc4e21aef65c4cf7d9b1"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'FileTreeItem' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/commonMain/kotlin/com.mcxross.cohesive.mellow/FileTree.kt",
      "language": "kotlin",
      "line": 93,
      "offset": 13,
      "length": 12,
      "code": {
        "startLine": 91,
        "length": 12,
        "offset": 25,
        "surroundingCode": "\n@Composable\nprivate fun FileTreeItem(\n    text: String,\n    modifier: Modifier,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.commonMain",
    "inspectionName": "FunctionName"
  },
  "hash": "d3be3195d1bdbf01d906cc15f3d4f0abebd1e7e911d9c2fe8c0479ceba7fe6c3"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'FileItemIcon' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/commonMain/kotlin/com.mcxross.cohesive.mellow/FileTree.kt",
      "language": "kotlin",
      "line": 138,
      "offset": 13,
      "length": 12,
      "code": {
        "startLine": 136,
        "length": 12,
        "offset": 25,
        "surroundingCode": "\n@Composable\nprivate fun FileItemIcon(\n    modifier: Modifier,\n    model: FileTreeModel.Item,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.commonMain",
    "inspectionName": "FunctionName"
  },
  "hash": "56099f791c293e3e6d2d8e032057acead9a89fef07f156184b735aa293f1c396"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'EditorSimple' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/commonMain/kotlin/com.mcxross.cohesive.mellow/EditorSimple.kt",
      "language": "kotlin",
      "line": 12,
      "offset": 5,
      "length": 12,
      "code": {
        "startLine": 10,
        "length": 12,
        "offset": 17,
        "surroundingCode": "\n@Composable\nfun EditorSimple(\n    file: File,\n) {"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.commonMain",
    "inspectionName": "FunctionName"
  },
  "hash": "ae4fd56af0e035dc203208ea4cb8f42792d029cf92d752595fda5983e4e85eb4"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'Image' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/commonMain/kotlin/com/mcxross/cohesive/common/frontend/ui/widget/md/markup/Image.kt",
      "language": "kotlin",
      "line": 6,
      "offset": 5,
      "length": 5,
      "code": {
        "startLine": 4,
        "length": 5,
        "offset": 17,
        "surroundingCode": "\n@Composable\nfun Image(\n    imageUrl: String,\n    isEnabled: Boolean,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.commonMain",
    "inspectionName": "FunctionName"
  },
  "hash": "a0f99bcf62c1178ce3cd1374454c7004884fd2f0a487530aa2d43a60f2bcd36e"
},{
  "tool": "Code Inspection",
  "category": "Other problems",
  "type": "@Deprecated annotation without 'replaceWith' argument",
  "severity": "Info",
  "comment": "'@Deprecated' annotation without a 'replaceWith' argument",
  "detailsInfo": "Reports deprecated functions and properties that do not have the `kotlin.ReplaceWith` argument in its `kotlin.deprecated` annotation and suggests to add one based on their body.\n\n\nKotlin provides the `ReplaceWith` argument to replace deprecated declarations automatically.\nIt is recommended to use the argument to fix deprecation issues in code.\n\n**Example:**\n\n\n      @Deprecated(\"Use refined() instead.\")\n      fun deprecated() = refined()\n\n      fun refined() = 42\n\nA quick-fix adds the `ReplaceWith()` argument:\n\n\n      @Deprecated(\"Use refined() instead.\", ReplaceWith(\"refined()\"))\n      fun deprecated() = refined()\n\n      fun refined() = 42\n",
  "sources": [
    {
      "type": "file",
      "path": "cps/src/main/kotlin/com/mcxross/cohesive/cps/utils/FileUtils.kt",
      "language": "kotlin",
      "line": 39,
      "offset": 5,
      "length": 15,
      "code": {
        "startLine": 37,
        "length": 15,
        "offset": 46,
        "surroundingCode": "     * Use [.writeLines] instead.\n     */\n    @Deprecated(\"\")\n    @Throws(IOException::class)\n    fun writeLines(lines: Collection<String?>?, file: File) {"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cps.main",
    "inspectionName": "DeprecatedCallableAddReplaceWith"
  },
  "hash": "dfbbd6fd41b2584eaf50d9d39d2927ce74d074c022564f6f45087737bdf2fbf7"
},{
  "tool": "Code Inspection",
  "category": "Probable bugs",
  "type": "Unresolved reference in KDoc",
  "severity": "High",
  "comment": "Cannot resolve symbol 'KeyboardOptions'",
  "detailsInfo": "Reports unresolved references in KDoc comments.\n\n**Example:**\n\n\n      /**\n       * [unresolvedLink]\n       */\n      fun foo() {}\n\nTo fix the problem make the link valid.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/foundation/text/CoreTextField.kt",
      "language": "kotlin",
      "line": 157,
      "offset": 5,
      "length": 15,
      "code": {
        "startLine": 155,
        "length": 15,
        "offset": 185,
        "surroundingCode": " * @param keyboardActions when the input service emits an IME action, the corresponding callback\n * is called. Note that this IME action may be different from what you specified in\n * [KeyboardOptions.imeAction].\n * @param enabled controls the enabled state of the text field. When `false`, the text\n * field will be neither editable nor focusable, the input of the text field will not be selectable"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "KDocUnresolvedReference"
  },
  "hash": "3e5dc35e000fe5d4dd02aa663e08c21f830d512956afc54909453c62e135ed5b"
},{
  "tool": "Code Inspection",
  "category": "Probable bugs",
  "type": "Unresolved reference in KDoc",
  "severity": "High",
  "comment": "Cannot resolve symbol 'imeAction'",
  "detailsInfo": "Reports unresolved references in KDoc comments.\n\n**Example:**\n\n\n      /**\n       * [unresolvedLink]\n       */\n      fun foo() {}\n\nTo fix the problem make the link valid.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/foundation/text/CoreTextField.kt",
      "language": "kotlin",
      "line": 157,
      "offset": 21,
      "length": 9,
      "code": {
        "startLine": 155,
        "length": 9,
        "offset": 201,
        "surroundingCode": " * @param keyboardActions when the input service emits an IME action, the corresponding callback\n * is called. Note that this IME action may be different from what you specified in\n * [KeyboardOptions.imeAction].\n * @param enabled controls the enabled state of the text field. When `false`, the text\n * field will be neither editable nor focusable, the input of the text field will not be selectable"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "KDocUnresolvedReference"
  },
  "hash": "585258c85d45f6d13689ebae86b5ffb37324cd557324c6d502b826bc2c1aaa26"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Explicit 'get' or 'set' call",
  "severity": "Info",
  "comment": "Should be replaced with indexing",
  "detailsInfo": "Reports explicit calls to `get` or `set` functions which can be replaced by an indexing operator `[]`.\n\n\nKotlin allows custom implementations for the predefined set of operators on types.\nTo overload an operator, you can mark the corresponding function with the `operator` modifier:\n\n\n      operator fun get(index: Int) {}\n      operator fun set(index: Int, value: Int) {}\n        \nThe functions above correspond to the indexing operator.\n\n**Example:**\n\n      class Test {\n          operator fun get(i: Int): Int = 0\n      }\n\n      fun test() {\n          Test().get(0) // replaceable 'get()'\n      }\n\nAfter the quick-fix is applied:\n\n      class Test {\n          operator fun get(i: Int): Int = 0\n      }\n\n      fun test() {\n          Test()[0]\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/common/frontend/ui/widget/md/parser/Parser.kt",
      "language": "kotlin",
      "line": 110,
      "offset": 70,
      "length": 3,
      "code": {
        "startLine": 108,
        "length": 3,
        "offset": 221,
        "surroundingCode": "        if (line.startsWith(MarkdownKeysManager.IMAGE_START) && line.contains(MarkdownKeysManager.IMAGE_END)) {\n            isComponentTriggered = true\n            val imageUrl = line.split(MarkdownKeysManager.IMAGE_END).get(1).replace(\")\", \"\")\n            if (isImagePath(imageUrl)) {\n                emit(Image(imageUrl))"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "ReplaceGetOrSet"
  },
  "hash": "a3bc013752aa9380bf8d5934658d88cd1d4d23cfe2d4cac9ff8223b1ed566a83"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Explicit 'get' or 'set' call",
  "severity": "Info",
  "comment": "Should be replaced with indexing",
  "detailsInfo": "Reports explicit calls to `get` or `set` functions which can be replaced by an indexing operator `[]`.\n\n\nKotlin allows custom implementations for the predefined set of operators on types.\nTo overload an operator, you can mark the corresponding function with the `operator` modifier:\n\n\n      operator fun get(index: Int) {}\n      operator fun set(index: Int, value: Int) {}\n        \nThe functions above correspond to the indexing operator.\n\n**Example:**\n\n      class Test {\n          operator fun get(i: Int): Int = 0\n      }\n\n      fun test() {\n          Test().get(0) // replaceable 'get()'\n      }\n\nAfter the quick-fix is applied:\n\n      class Test {\n          operator fun get(i: Int): Int = 0\n      }\n\n      fun test() {\n          Test()[0]\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/common/frontend/ui/widget/md/parser/Parser.kt",
      "language": "kotlin",
      "line": 120,
      "offset": 70,
      "length": 3,
      "code": {
        "startLine": 118,
        "length": 3,
        "offset": 183,
        "surroundingCode": "        if (line.startsWith(MarkdownKeysManager.IMAGE_WITHOUT_TAG_KEY)) {\n            isComponentTriggered = true\n            val imageUrl = line.split(MarkdownKeysManager.IMAGE_END).get(1).replace(\")\", \"\")\n            if (isImagePath(imageUrl)) {\n                emit(Image(imageUrl))"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "ReplaceGetOrSet"
  },
  "hash": "6ece66380b6a0ded217d1b0084d9b1e8f7635a062b7017b051a16c7b728f6897"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Explicit 'get' or 'set' call",
  "severity": "Info",
  "comment": "Should be replaced with indexing",
  "detailsInfo": "Reports explicit calls to `get` or `set` functions which can be replaced by an indexing operator `[]`.\n\n\nKotlin allows custom implementations for the predefined set of operators on types.\nTo overload an operator, you can mark the corresponding function with the `operator` modifier:\n\n\n      operator fun get(index: Int) {}\n      operator fun set(index: Int, value: Int) {}\n        \nThe functions above correspond to the indexing operator.\n\n**Example:**\n\n      class Test {\n          operator fun get(i: Int): Int = 0\n      }\n\n      fun test() {\n          Test().get(0) // replaceable 'get()'\n      }\n\nAfter the quick-fix is applied:\n\n      class Test {\n          operator fun get(i: Int): Int = 0\n      }\n\n      fun test() {\n          Test()[0]\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/common/frontend/ui/widget/md/parser/Parser.kt",
      "language": "kotlin",
      "line": 155,
      "offset": 34,
      "length": 3,
      "code": {
        "startLine": 153,
        "length": 3,
        "offset": 222,
        "surroundingCode": "        if (line.startsWith(MarkdownKeysManager.LINK_START) && line.contains(MarkdownKeysManager.LINK_CONTAINS)) {\n            val fragments = line.split(MarkdownKeysManager.LINK_CONTAINS)\n            val text = fragments.get(0).replace(\"[\", \"\")\n            val link = fragments.get(1).replace(\")\", \"\")\n            emit(Link(text, link))"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "ReplaceGetOrSet"
  },
  "hash": "99a30fc01ae194e73d700f89caaa67216df2ca4ad35fc6865c326f0a63cc984c"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Explicit 'get' or 'set' call",
  "severity": "Info",
  "comment": "Should be replaced with indexing",
  "detailsInfo": "Reports explicit calls to `get` or `set` functions which can be replaced by an indexing operator `[]`.\n\n\nKotlin allows custom implementations for the predefined set of operators on types.\nTo overload an operator, you can mark the corresponding function with the `operator` modifier:\n\n\n      operator fun get(index: Int) {}\n      operator fun set(index: Int, value: Int) {}\n        \nThe functions above correspond to the indexing operator.\n\n**Example:**\n\n      class Test {\n          operator fun get(i: Int): Int = 0\n      }\n\n      fun test() {\n          Test().get(0) // replaceable 'get()'\n      }\n\nAfter the quick-fix is applied:\n\n      class Test {\n          operator fun get(i: Int): Int = 0\n      }\n\n      fun test() {\n          Test()[0]\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/common/frontend/ui/widget/md/parser/Parser.kt",
      "language": "kotlin",
      "line": 156,
      "offset": 34,
      "length": 3,
      "code": {
        "startLine": 154,
        "length": 3,
        "offset": 164,
        "surroundingCode": "            val fragments = line.split(MarkdownKeysManager.LINK_CONTAINS)\n            val text = fragments.get(0).replace(\"[\", \"\")\n            val link = fragments.get(1).replace(\")\", \"\")\n            emit(Link(text, link))\n            isComponentTriggered = true"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "ReplaceGetOrSet"
  },
  "hash": "5da8d8f37dc4be987334bbb4e5b2d99e0197851aee85f1a3df0f12ab34cc3db9"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant constructor body",
  "severity": "Moderate",
  "comment": "Remove empty constructor body",
  "detailsInfo": "Reports empty bodies of secondary constructors.",
  "sources": [
    {
      "type": "file",
      "path": "cps/src/main/kotlin/com/mcxross/cohesive/cps/PluginClassLoader.kt",
      "language": "kotlin",
      "line": 42,
      "offset": 7,
      "length": 7,
      "code": {
        "startLine": 40,
        "length": 7,
        "offset": 102,
        "surroundingCode": "        parent,\n        if (parentFirst) ClassLoadingStrategy.APD else ClassLoadingStrategy.PDA\n    ) {\n    }\n\n    /**"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cps.main",
    "inspectionName": "RemoveEmptySecondaryConstructorBody"
  },
  "hash": "44354d20f64fb8e2064471ce5c498785e8a39eca5038df69ec7adb5bee30b107"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"addDependency\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cps/src/main/kotlin/com/mcxross/cohesive/cps/DefaultPluginDescriptor.kt",
      "language": "kotlin",
      "line": 47,
      "offset": 9,
      "length": 13,
      "code": {
        "startLine": 45,
        "length": 13,
        "offset": 15,
        "surroundingCode": "    }\n\n    fun addDependency(dependency: PluginDependency) {\n        dependencies.add(dependency)\n    }"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cps.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "2da04c37dbee8e910c9a57cea2435c4e8a66f0e03affa72cef1454d5447bdeba"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Constructor is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cps/src/main/kotlin/com/mcxross/cohesive/cps/DefaultPluginDescriptor.kt",
      "language": "kotlin",
      "line": 29,
      "offset": 5,
      "length": 11,
      "code": {
        "startLine": 27,
        "length": 11,
        "offset": 11,
        "surroundingCode": "    }\n\n    constructor(\n        pluginId: String,\n        pluginDescription: String,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cps.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "da6861ec8331f9e11a6fd0004ec75edcbfb70f02744dcd886feadebddd365407"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"HandleWidth\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/foundation/text/selection/SelectionHandles.kt",
      "language": "kotlin",
      "line": 22,
      "offset": 14,
      "length": 11,
      "code": {
        "startLine": 20,
        "length": 11,
        "offset": 49,
        "surroundingCode": "import androidx.compose.ui.unit.dp\n\ninternal val HandleWidth = 25.dp\ninternal val HandleHeight = 25.dp\n"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "44da4791628f9c04a6969a635c5a6843feec204046224d329d9b9ebbc67de4a0"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"addServiceProviderExtensionFinder\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cps/src/main/kotlin/com/mcxross/cohesive/cps/DefaultExtensionFinder.kt",
      "language": "kotlin",
      "line": 58,
      "offset": 9,
      "length": 33,
      "code": {
        "startLine": 56,
        "length": 33,
        "offset": 15,
        "surroundingCode": "    }\n\n    fun addServiceProviderExtensionFinder(): DefaultExtensionFinder {\n        return add(ServiceProviderExtensionFinder(pluginManager))\n    }"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cps.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "7e68fb9b1b474d5d2e1cf5f92d3f3f567e2e2ed3fd43fdbff1bb7e44706559a4"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"Table\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/commonMain/kotlin/com/mcxross/cohesive/common/frontend/ui/widget/md/markup/Table.kt",
      "language": "kotlin",
      "line": 3,
      "offset": 12,
      "length": 5,
      "code": {
        "startLine": 1,
        "length": 5,
        "offset": 77,
        "surroundingCode": "package com.mcxross.cohesive.common.frontend.ui.widget.md.markup\n\ndata class Table(\n    val table: LinkedHashMap<String, String>\n): Element"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "da5c7d31a0ac1192d98688d4822e81a8263caf448f2bd6c66b79cf275d8d7dd6"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"isInternetAvailable\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/common/frontend/utils/Network.kt",
      "language": "kotlin",
      "line": 22,
      "offset": 12,
      "length": 19,
      "code": {
        "startLine": 20,
        "length": 19,
        "offset": 47,
        "surroundingCode": "val ktorHttpClient = HttpClient {}\n\nactual fun isInternetAvailable(): Boolean {\n    return runBlocking {\n        try {"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "f38baf205dd09f01b1e9405fe957905f9891f6f7bd7a572cd67e13e3919fd78b"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"loadXmlImageVector\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/common/frontend/utils/Network.kt",
      "language": "kotlin",
      "line": 62,
      "offset": 13,
      "length": 18,
      "code": {
        "startLine": 60,
        "length": 18,
        "offset": 68,
        "surroundingCode": "    urlStream(url).use { loadSvgPainter(it, density) }\n\nsuspend fun loadXmlImageVector(\n    url: String,\n    density: Density,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "1f62eee3cefcbc1511c556b21bc777224fbd1ca5ee1abc9cad3d57f21c966a66"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"loadSvgPainter\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/common/frontend/utils/Network.kt",
      "language": "kotlin",
      "line": 56,
      "offset": 13,
      "length": 14,
      "code": {
        "startLine": 54,
        "length": 14,
        "offset": 55,
        "surroundingCode": "    urlStream(url).use(::loadImageBitmap)\n\nsuspend fun loadSvgPainter(\n    url: String,\n    density: Density,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "e4e8951523bfb189af23ca7c2f8233f01f154bb364c96eebce628230398a62f5"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"points\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cps/src/main/kotlin/com/mcxross/cohesive/cps/Extension.kt",
      "language": "kotlin",
      "line": 24,
      "offset": 9,
      "length": 6,
      "code": {
        "startLine": 22,
        "length": 6,
        "offset": 99,
        "surroundingCode": "     * @return classes of extension points, that are implemented by this extension\n     */\n    val points: Array<KClass<out ExtensionPoint>> = [],\n    /**\n     * An array of holder IDs, that have to be available in order to load this extension."
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cps.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "428c1ff55b06c302196dc7647519c89fc6eac7e2d9cd9ffd8a7769b6b26d6bcf"
}]}