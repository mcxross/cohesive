{"version":"3","listProblem":[{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'SimpleLayout' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/foundation/text/selection/SimpleLayout.kt",
      "language": "kotlin",
      "line": 32,
      "offset": 14,
      "length": 12,
      "code": {
        "startLine": 30,
        "length": 12,
        "offset": 29,
        "surroundingCode": " */\n@Composable\ninternal fun SimpleLayout(modifier: Modifier = Modifier, content: @Composable () -> Unit) {\n    Layout(modifier = modifier, content = content) { measurables, constraints ->\n        val placeables = measurables.fastMap { measurable ->"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "9ce3027ed97892380bb00bec0c5f18abc479338ff6e561c75c7a3613e36f3f2b"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'VerticalScrollbar' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/Scrollbar.kt",
      "language": "kotlin",
      "line": 11,
      "offset": 12,
      "length": 17,
      "code": {
        "startLine": 9,
        "length": 17,
        "offset": 24,
        "surroundingCode": "\n@Composable\nactual fun VerticalScrollbar(\n    modifier: Modifier,\n    scrollState: ScrollState,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "ca1ab3dcb9627dcc0ff0a68741f35d4d31a4ed8eb65ebf2cfc8869e671a25ad0"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'HorizontalScrollbar' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/Scrollbar.kt",
      "language": "kotlin",
      "line": 38,
      "offset": 12,
      "length": 19,
      "code": {
        "startLine": 36,
        "length": 19,
        "offset": 24,
        "surroundingCode": "\n@Composable\nactual fun HorizontalScrollbar(\n    modifier: Modifier,\n    scrollState: ScrollState,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "ec67641785c764a8ba8f106f1046cd8244ccca0dd5ede781b6f73584e00bd8ca"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'VerticalScrollbar' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/Scrollbar.kt",
      "language": "kotlin",
      "line": 20,
      "offset": 12,
      "length": 17,
      "code": {
        "startLine": 18,
        "length": 17,
        "offset": 24,
        "surroundingCode": "\n@Composable\nactual fun VerticalScrollbar(\n    modifier: Modifier,\n    scrollState: LazyListState,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "9de29fb76b6b03c86c6cfd0bfa26619c8a1ed7ea631c036a61d05434a872edff"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'HorizontalScrollbar' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/Scrollbar.kt",
      "language": "kotlin",
      "line": 47,
      "offset": 12,
      "length": 19,
      "code": {
        "startLine": 45,
        "length": 19,
        "offset": 24,
        "surroundingCode": "\n@Composable\nactual fun HorizontalScrollbar(\n    modifier: Modifier,\n    scrollState: LazyListState,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "9331af2eab02fc7dd4243e004694827639f803a10d8f9f0e054d75adb6df2e1a"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'VerticalScrollbar' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/Scrollbar.kt",
      "language": "kotlin",
      "line": 29,
      "offset": 5,
      "length": 17,
      "code": {
        "startLine": 27,
        "length": 17,
        "offset": 17,
        "surroundingCode": "\n@Composable\nfun VerticalScrollbar(\n    scrollbarAdapter: ScrollbarAdapter,\n    modifier: Modifier,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "d6b71712603cf576452e588e82f1dce21d37919e5fd9b729f058850d6ba58d3c"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'WindowScaffold' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/WindowScaffold.kt",
      "language": "kotlin",
      "line": 28,
      "offset": 5,
      "length": 14,
      "code": {
        "startLine": 26,
        "length": 14,
        "offset": 17,
        "surroundingCode": "\n@Composable\nfun WindowScaffold(\n    modifier: Modifier = Modifier,\n    topBar: @Composable () -> Unit = {},"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "eeff5df381ff467ddab52f0390f05914061c4794b64ee6d81cbd420100c73844"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'FileTreeTab' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/commonMain/kotlin/com.mcxross.cohesive.mellow/FileTree.kt",
      "language": "kotlin",
      "line": 29,
      "offset": 5,
      "length": 11,
      "code": {
        "startLine": 27,
        "length": 11,
        "offset": 17,
        "surroundingCode": "\n@Composable\nfun FileTreeTab(\n    text: String,\n) = Surface {"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.commonMain",
    "inspectionName": "FunctionName"
  },
  "hash": "cc35bd96d98081b815b1938908beb1746e84f6d0b9ec37c76f98e0278719c732"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'FileTree' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/commonMain/kotlin/com.mcxross.cohesive.mellow/FileTree.kt",
      "language": "kotlin",
      "line": 46,
      "offset": 5,
      "length": 8,
      "code": {
        "startLine": 44,
        "length": 8,
        "offset": 17,
        "surroundingCode": "\n@Composable\nfun FileTree(\n    model: FileTreeModel,\n    onItemClick: (File) -> Unit = {},"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.commonMain",
    "inspectionName": "FunctionName"
  },
  "hash": "a3c2ceeb841bcddd07a5615fd0afaf9c11cbcffbf6bdfc4e21aef65c4cf7d9b1"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'FileTreeItem' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/commonMain/kotlin/com.mcxross.cohesive.mellow/FileTree.kt",
      "language": "kotlin",
      "line": 93,
      "offset": 13,
      "length": 12,
      "code": {
        "startLine": 91,
        "length": 12,
        "offset": 25,
        "surroundingCode": "\n@Composable\nprivate fun FileTreeItem(\n    text: String,\n    modifier: Modifier,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.commonMain",
    "inspectionName": "FunctionName"
  },
  "hash": "d3be3195d1bdbf01d906cc15f3d4f0abebd1e7e911d9c2fe8c0479ceba7fe6c3"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'FileItemIcon' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/commonMain/kotlin/com.mcxross.cohesive.mellow/FileTree.kt",
      "language": "kotlin",
      "line": 138,
      "offset": 13,
      "length": 12,
      "code": {
        "startLine": 136,
        "length": 12,
        "offset": 25,
        "surroundingCode": "\n@Composable\nprivate fun FileItemIcon(\n    modifier: Modifier,\n    model: FileTreeModel.Item,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.commonMain",
    "inspectionName": "FunctionName"
  },
  "hash": "56099f791c293e3e6d2d8e032057acead9a89fef07f156184b735aa293f1c396"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'CoreText' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/foundation/text/CoreText.kt",
      "language": "kotlin",
      "line": 106,
      "offset": 14,
      "length": 8,
      "code": {
        "startLine": 104,
        "length": 8,
        "offset": 99,
        "surroundingCode": "@Composable\n@OptIn(InternalFoundationTextApi::class, ExperimentalComposeUiApi::class)\ninternal fun CoreText(\n    text: AnnotatedString,\n    modifier: Modifier = Modifier,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "3c6b1cbb2b041fef9bff05b3506e2fb3b1f1e6b728bab3107bb98b3171d571b3"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'InlineChildren' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/foundation/text/CoreText.kt",
      "language": "kotlin",
      "line": 223,
      "offset": 14,
      "length": 14,
      "code": {
        "startLine": 221,
        "length": 14,
        "offset": 26,
        "surroundingCode": "\n@Composable\ninternal fun InlineChildren(\n    text: AnnotatedString,\n    inlineContents: List<InlineContentRange>"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "2fa9a2bbd277262aeadc19e771918ab11f40e712d76ad92796d7411f48233964"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'Markdown' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/commonMain/kotlin/com/mcxross/cohesive/common/frontend/ui/widget/Markdown.kt",
      "language": "kotlin",
      "line": 22,
      "offset": 5,
      "length": 8,
      "code": {
        "startLine": 20,
        "length": 8,
        "offset": 17,
        "surroundingCode": "\n@Composable\nfun Markdown(\n    modifier: Modifier,\n    content: String,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.commonMain",
    "inspectionName": "FunctionName"
  },
  "hash": "02cfcfa92c7484aa3e66ff559d11a215d14800170c107f229f3b2d1f9d070f13"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'RenderComponent' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/commonMain/kotlin/com/mcxross/cohesive/common/frontend/ui/widget/Markdown.kt",
      "language": "kotlin",
      "line": 70,
      "offset": 13,
      "length": 15,
      "code": {
        "startLine": 68,
        "length": 15,
        "offset": 25,
        "surroundingCode": "\n@Composable\nprivate fun RenderComponent(\n    item: Element,\n    config: MarkdownConfig,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.commonMain",
    "inspectionName": "FunctionName"
  },
  "hash": "109613699a9d32b23ebef71a8283eb7533f87a4bffa831585293956ca71abf84"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'SkipButton' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/common/frontend/ui/screen/Store.kt",
      "language": "kotlin",
      "line": 193,
      "offset": 17,
      "length": 10,
      "code": {
        "startLine": 191,
        "length": 10,
        "offset": 33,
        "surroundingCode": "\n    @Composable\n    private fun SkipButton(\n        show: Boolean,\n        modifier: Modifier,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "09be48b3bbc207898f45cc2a98fd94d28644f3e0f12382ea0b90af61b328b12b"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'StoreViewLoading' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/common/frontend/ui/screen/Store.kt",
      "language": "kotlin",
      "line": 186,
      "offset": 19,
      "length": 16,
      "code": {
        "startLine": 184,
        "length": 16,
        "offset": 35,
        "surroundingCode": "\n    @Composable\n    protected fun StoreViewLoading(\n        modifier: Modifier = Modifier.padding(top = 30.dp).fillMaxWidth().height(1.dp),\n    ) {"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "0e7b516a18bc3d4b2773efb44525b8c90bad3b0c9ee9945f246fbd628426b537"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'StoreViewChains' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/common/frontend/ui/screen/Store.kt",
      "language": "kotlin",
      "line": 79,
      "offset": 19,
      "length": 15,
      "code": {
        "startLine": 77,
        "length": 15,
        "offset": 79,
        "surroundingCode": "    @OptIn(ExperimentalFoundationApi::class)\n    @Composable\n    protected fun StoreViewChains(\n        modifier: Modifier,\n        plugins: List<com.mcxross.cohesive.common.frontend.model.Plugin>,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "c4ea64a3f018388b9c92febda977131d45701857a839781dc6f25ec11b027306"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'PluginItem' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/common/frontend/ui/screen/Store.kt",
      "language": "kotlin",
      "line": 98,
      "offset": 19,
      "length": 10,
      "code": {
        "startLine": 96,
        "length": 10,
        "offset": 79,
        "surroundingCode": "    @OptIn(ExperimentalFoundationApi::class)\n    @Composable\n    protected fun PluginItem(plugin: com.mcxross.cohesive.common.frontend.model.Plugin) {\n\n        Column("
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "06da7690a62da9c96532f17ad102b9f0412c5a2bf8ab0dce646bb748adaa9de1"
},{
  "tool": "Code Inspection",
  "category": "Probable bugs",
  "type": "Unresolved reference in KDoc",
  "severity": "High",
  "comment": "Cannot resolve symbol 'exactVersionAllowed'",
  "detailsInfo": "Reports unresolved references in KDoc comments.\n\n**Example:**\n\n\n      /**\n       * [unresolvedLink]\n       */\n      fun foo() {}\n\nTo fix the problem make the link valid.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/cps/AbstractPluginManager.kt",
      "language": "kotlin",
      "line": 102,
      "offset": 15,
      "length": 19,
      "code": {
        "startLine": 100,
        "length": 19,
        "offset": 64,
        "surroundingCode": "     * implicitly mean the same as >=x.y.z\n     *\n     * @param exactVersionAllowed set to true or false\n     */\n    var isExactVersionAllowed: Boolean = false"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "KDocUnresolvedReference"
  },
  "hash": "9f34babcaf3c840bfa0fa9874113367ba6f2c09abb3342cebc00108bba645d5e"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused receiver parameter",
  "severity": "High",
  "comment": "Receiver parameter is never used",
  "detailsInfo": "Reports receiver parameter of extension functions and properties that is not used.\n\n**Remove redundant receiver parameter** can be used to amend the code automatically.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/foundation/text/KeyEventHelpers.kt",
      "language": "kotlin",
      "line": 22,
      "offset": 14,
      "length": 8,
      "code": {
        "startLine": 20,
        "length": 8,
        "offset": 67,
        "surroundingCode": "import org.jetbrains.skiko.orderEmojiAndSymbolsPopup\n\ninternal fun KeyEvent.cancelsTextSelection(): Boolean = false\n\ninternal fun showCharacterPalette() = orderEmojiAndSymbolsPopup()"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "UnusedReceiverParameter"
  },
  "hash": "9f31e50d3636afe010ebe7f49af66626fabf80cca68b607a05e439250b1e3cb7"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'wrapper' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/cps/Plugin.kt",
      "language": "kotlin",
      "line": 12,
      "offset": 9,
      "length": 7,
      "code": {
        "startLine": 10,
        "length": 7,
        "offset": 46,
        "surroundingCode": "     * Wrapper of the plugin.\n     */\n    var wrapper: PluginWrapper\n\n    /**"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "bf6d701e6ab6cbecfec0f787326f17b317b4166408962d13c760d2880c142801"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"TextPreparedSelection\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/foundation/text/selection/TextPreparedSelection.kt",
      "language": "kotlin",
      "line": 349,
      "offset": 16,
      "length": 21,
      "code": {
        "startLine": 347,
        "length": 21,
        "offset": 18,
        "surroundingCode": "}\n\ninternal class TextPreparedSelection(\n    originalText: AnnotatedString,\n    originalSelection: TextRange,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "81fa623971437cef4c0c2aa51ad87af2eb7cf4a1c857e6e034beb36411a2fbb7"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"k\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "csp/src/main/kotlin/com/mcxross/cohesive/csp/annotation/Net.kt",
      "language": "kotlin",
      "line": 5,
      "offset": 9,
      "length": 1,
      "code": {
        "startLine": 3,
        "length": 1,
        "offset": 48,
        "surroundingCode": "@MustBeDocumented\nannotation class Net(\n    val k: String,\n    val v: String,\n)"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.csp.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "e1397322add2a6de74702b943d5bb77f902e49a83776a780863f477954f5c7b5"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"v\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "csp/src/main/kotlin/com/mcxross/cohesive/csp/annotation/Net.kt",
      "language": "kotlin",
      "line": 6,
      "offset": 9,
      "length": 1,
      "code": {
        "startLine": 4,
        "length": 1,
        "offset": 49,
        "surroundingCode": "annotation class Net(\n    val k: String,\n    val v: String,\n)\n"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.csp.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "6da8fc1f81af8a2afb86d20d79a67daabdd0a5b5328099248461f14b9ba55edb"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"withoutWidthConstraints\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/commonMain/kotlin/com.mcxross.cohesive.mellow/Modifiers.kt",
      "language": "kotlin",
      "line": 15,
      "offset": 14,
      "length": 23,
      "code": {
        "startLine": 13,
        "length": 23,
        "offset": 56,
        "surroundingCode": "import androidx.compose.ui.semantics.Role\n\nfun Modifier.withoutWidthConstraints() = layout { measurable, constraints ->\n    val placeable = measurable.measure(constraints.copy(maxWidth = Int.MAX_VALUE))\n    layout(constraints.maxWidth, placeable.height) {"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "02fd571e5a515399e4cd8a7bd567b84bec7d8d97fa37613e16fba45f8ebb3855"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"parse\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/cps/PluginState.kt",
      "language": "kotlin",
      "line": 44,
      "offset": 13,
      "length": 5,
      "code": {
        "startLine": 42,
        "length": 5,
        "offset": 36,
        "surroundingCode": "\n    companion object {\n        fun parse(string: String?): PluginState? {\n            for (status in PluginState.values()) {\n                if (status.toString() == string) {"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "7b634b8d58d0ab71f430a66796f91d5a3289fae1ae663773bd22b9a5035bf592"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"loadable\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/commonMain/kotlin/com.mcxross.cohesive.mellow/Loadable.kt",
      "language": "kotlin",
      "line": 9,
      "offset": 15,
      "length": 8,
      "code": {
        "startLine": 7,
        "length": 8,
        "offset": 27,
        "surroundingCode": "\n@Composable\nfun <T : Any> loadable(\n    load: () -> T,\n): MutableState<T?> {"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "dc41405a0d7eee6e066668b50e871f0fb6090bb3dde2de188dc2368f88d53e89"
}]}