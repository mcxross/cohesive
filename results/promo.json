{"version":"3","listProblem":[{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'EditorComposite' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/commonMain/kotlin/com.mcxross.cohesive.mellow/EditorComposite.kt",
      "language": "kotlin",
      "line": 23,
      "offset": 5,
      "length": 15,
      "code": {
        "startLine": 21,
        "length": 15,
        "offset": 17,
        "surroundingCode": "\n@Composable\nfun EditorComposite(\n  text: String = \"Project\",\n  file: File,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.commonMain",
    "inspectionName": "FunctionName"
  },
  "hash": "e443a3b87d4581b9a12bb0fb93c93dd1bb5ca85e735889139913453d015eea14"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'TextFieldCursorHandle' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/foundation/text/CoreTextField.kt",
      "language": "kotlin",
      "line": 836,
      "offset": 14,
      "length": 21,
      "code": {
        "startLine": 834,
        "length": 21,
        "offset": 26,
        "surroundingCode": "\n@Composable\ninternal fun TextFieldCursorHandle(manager: TextFieldSelectionManager) {\n  val offset = manager.offsetMapping.originalToTransformed(manager.value.selection.start)\n  val observer = remember(manager) { manager.cursorDragObserver() }"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "1fdaf4d4ba38a19b21e10200b2ae98c9daa6d193a23c869f183c4e14b9baddda"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'CoreTextField' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/foundation/text/CoreTextField.kt",
      "language": "kotlin",
      "line": 172,
      "offset": 14,
      "length": 13,
      "code": {
        "startLine": 170,
        "length": 13,
        "offset": 66,
        "surroundingCode": "@Composable\n@OptIn(InternalFoundationTextApi::class)\ninternal fun CoreTextField(\n  value: TextFieldValue,\n  onValueChange: (TextFieldValue) -> Unit,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "45476940f585485eb778eebfdf7130199fed71f0b1799979a4ad1905cd29836f"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'SelectionToolbarAndHandles' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/foundation/text/CoreTextField.kt",
      "language": "kotlin",
      "line": 795,
      "offset": 13,
      "length": 26,
      "code": {
        "startLine": 793,
        "length": 26,
        "offset": 25,
        "surroundingCode": "\n@Composable\nprivate fun SelectionToolbarAndHandles(manager: TextFieldSelectionManager, show: Boolean) {\n  if (show) {\n    with(manager) {"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "d13e310201ed30ec55317770dbe05c1d6d4624f6fed7b61656b025413cb596f6"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'CoreTextFieldRootBox' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/foundation/text/CoreTextField.kt",
      "language": "kotlin",
      "line": 583,
      "offset": 20,
      "length": 20,
      "code": {
        "startLine": 581,
        "length": 20,
        "offset": 32,
        "surroundingCode": "\n@Composable\nprivate inline fun CoreTextFieldRootBox(\n  modifier: Modifier,\n  manager: TextFieldSelectionManager,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "5b1eac72a1891273ed94b38a4f3caa9c8801aa15ed0d072a57b198f779775c5b"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'CompositeEditor' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/common/frontend/api/ui/view/CohesiveView.kt",
      "language": "kotlin",
      "line": 36,
      "offset": 7,
      "length": 15,
      "code": {
        "startLine": 34,
        "length": 15,
        "offset": 21,
        "surroundingCode": "\n  @Composable\n  fun CompositeEditor() {\n  }\n}"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "b12d82c2595bb27967f796516e3aeb7f8efc851259b0d080ffe7bc6b845fe20d"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'Explorer' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/common/frontend/api/ui/view/CohesiveView.kt",
      "language": "kotlin",
      "line": 24,
      "offset": 7,
      "length": 8,
      "code": {
        "startLine": 22,
        "length": 8,
        "offset": 21,
        "surroundingCode": "\n  @Composable\n  fun Explorer() {\n  }\n"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "9c9999021564b171ba377c3adb80af8dcd720eba5003de2a66e2958d2da4d359"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'Wallet' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/common/frontend/api/ui/view/CohesiveView.kt",
      "language": "kotlin",
      "line": 28,
      "offset": 7,
      "length": 6,
      "code": {
        "startLine": 26,
        "length": 6,
        "offset": 21,
        "surroundingCode": "\n  @Composable\n  fun Wallet() {\n  }\n"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "69abd7004fb3d1fa249f35cea832ff430bd0cad290936a2998c3481e16faf73f"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'SimpleEditor' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/common/frontend/api/ui/view/CohesiveView.kt",
      "language": "kotlin",
      "line": 32,
      "offset": 7,
      "length": 12,
      "code": {
        "startLine": 30,
        "length": 12,
        "offset": 21,
        "surroundingCode": "\n  @Composable\n  fun SimpleEditor() {\n  }\n"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "a477afa0318367d1c4e417efd4bb900b1ab0f50ce33d564e5b3e2a60c21edf4e"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'EditorMap' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/Editor.kt",
      "language": "kotlin",
      "line": 25,
      "offset": 21,
      "length": 9,
      "code": {
        "startLine": 23,
        "length": 9,
        "offset": 33,
        "surroundingCode": "\n@Composable\ninternal actual fun EditorMap(\n  textLines: TextLines,\n  fontSize: TextUnit,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "8c3b46938f1d2ed6750be175c720f348704ccbfbb6a71043266dc152e6bde1da"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'TextField' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/Editor.kt",
      "language": "kotlin",
      "line": 109,
      "offset": 12,
      "length": 9,
      "code": {
        "startLine": 107,
        "length": 9,
        "offset": 24,
        "surroundingCode": "\n@Composable\nactual fun TextField(\n  text: String,\n  isCode: Boolean,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "04e76ac20a0951acf745bfdcd9de247a63ec488fce66b8a3fe7b2bad14ea858e"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'ContextMenuArea' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/ContextMenu.kt",
      "language": "kotlin",
      "line": 36,
      "offset": 14,
      "length": 15,
      "code": {
        "startLine": 34,
        "length": 15,
        "offset": 66,
        "surroundingCode": "@OptIn(ExperimentalFoundationApi::class)\n@Composable\ninternal fun ContextMenuArea(\n    manager: TextFieldSelectionManager,\n    content: @Composable () -> Unit,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "3f7bad9a9f8f031c2eec64f291718144f51d9dc5dd38c66eecbb88437109db53"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'OpenMenuAdjuster' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/ContextMenu.kt",
      "language": "kotlin",
      "line": 62,
      "offset": 14,
      "length": 16,
      "code": {
        "startLine": 60,
        "length": 16,
        "offset": 66,
        "surroundingCode": "@OptIn(ExperimentalFoundationApi::class)\n@Composable\ninternal fun OpenMenuAdjuster(state: ContextMenuState, adjustAction: (Offset) -> Unit) {\n    LaunchedEffect(state) {\n        snapshotFlow { state.status }.collect { status ->"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "ae4ae1d8dcf18e12ed7e8c93c32163aba296af073e5573fabd4d2c0d111d6e80"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'ContextMenuArea' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/ContextMenu.kt",
      "language": "kotlin",
      "line": 49,
      "offset": 14,
      "length": 15,
      "code": {
        "startLine": 47,
        "length": 15,
        "offset": 66,
        "surroundingCode": "@OptIn(ExperimentalFoundationApi::class)\n@Composable\ninternal fun ContextMenuArea(\n    manager: SelectionManager,\n    content: @Composable () -> Unit,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "8311b08149a41b69716dcbea88597fbe4c1f455a4c81036e357978f6134e4d67"
},{
  "tool": "Code Inspection",
  "category": "Probable bugs",
  "type": "Unresolved reference in KDoc",
  "severity": "High",
  "comment": "Cannot resolve symbol 'tunjid'",
  "detailsInfo": "Reports unresolved references in KDoc comments.\n\n**Example:**\n\n\n      /**\n       * [unresolvedLink]\n       */\n      fun foo() {}\n\nTo fix the problem make the link valid.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/commonMain/kotlin/com.mcxross.cohesive.mellow/DropTarget.kt",
      "language": "kotlin",
      "line": 12,
      "offset": 22,
      "length": 6,
      "code": {
        "startLine": 10,
        "length": 6,
        "offset": 64,
        "surroundingCode": " * Interface for receiving drag events.\n *\n * Original Author: [tunjid]\n *\n * Code attributed to [tunjid] as the original author."
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.commonMain",
    "inspectionName": "KDocUnresolvedReference"
  },
  "hash": "1fdd5749022c584ff24c945c428a27ea8a2ebd14fad713faa0422adce37c725f"
},{
  "tool": "Code Inspection",
  "category": "Probable bugs",
  "type": "Unresolved reference in KDoc",
  "severity": "High",
  "comment": "Cannot resolve symbol 'tunjid'",
  "detailsInfo": "Reports unresolved references in KDoc comments.\n\n**Example:**\n\n\n      /**\n       * [unresolvedLink]\n       */\n      fun foo() {}\n\nTo fix the problem make the link valid.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/commonMain/kotlin/com.mcxross.cohesive.mellow/DropTarget.kt",
      "language": "kotlin",
      "line": 14,
      "offset": 24,
      "length": 6,
      "code": {
        "startLine": 12,
        "length": 6,
        "offset": 55,
        "surroundingCode": " * Original Author: [tunjid]\n *\n * Code attributed to [tunjid] as the original author.\n */\ninterface DropTarget {"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.commonMain",
    "inspectionName": "KDocUnresolvedReference"
  },
  "hash": "eef275b5f8fe4660fc9da468f592deab8fdd85f260a8bcde29b99e1e7c4fdcaf"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Function 'inDegree' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/cps/utils/DirectedGraph.kt",
      "language": "kotlin",
      "line": 77,
      "offset": 7,
      "length": 8,
      "code": {
        "startLine": 75,
        "length": 8,
        "offset": 25,
        "surroundingCode": "   * vertex.\n   */\n  fun inDegree(): MutableMap<V, Int> {\n    val result: MutableMap<V, Int> = HashMap()\n    neighbors.keys.forEach {"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "64f0d13d1f30c727e7958e956cbe7baccb6f2bd661e0710b337f2f16c0b30ac9"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Function 'containsVertex' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/cps/utils/DirectedGraph.kt",
      "language": "kotlin",
      "line": 31,
      "offset": 7,
      "length": 14,
      "code": {
        "startLine": 29,
        "length": 14,
        "offset": 47,
        "surroundingCode": "\n  /** True if graph contains vertex. */\n  fun containsVertex(vertex: V): Boolean {\n    return neighbors.containsKey(vertex)\n  }"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "615d15aebbe43bbb17820f48327e973c59f604ef71cc8a639d087e3290dea8bc"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Function 'topologicalSort' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/cps/utils/DirectedGraph.kt",
      "language": "kotlin",
      "line": 94,
      "offset": 7,
      "length": 15,
      "code": {
        "startLine": 92,
        "length": 15,
        "offset": 97,
        "surroundingCode": "   * [this](https://en.wikipedia.org/wiki/Topological_sorting) for more information.\n   */\n  fun topologicalSort(): List<V> {\n    val degree = inDegree()\n"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "01f506a530bbe4005617d2865f7bedc067660e108e9305328fa2ec12a7359fb7"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'checkForExtensionDependencies' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/cps/AbstractExtensionFinder.kt",
      "language": "kotlin",
      "line": 16,
      "offset": 3,
      "length": 9,
      "code": {
        "startLine": 14,
        "length": 9,
        "offset": 129,
        "surroundingCode": "  // cache extension infos by class name\n  @Volatile protected lateinit var extensionInfos: MutableMap<String, ExtensionInfo?>\n  protected var checkForExtensionDependencies: Boolean? = null\n\n  /**"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "9462ca79f079afcf03fe90514e5a88b5976b45a4aeb932b04f893d5fdbf095d1"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Function 'isCheckForExtensionDependencies' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/cps/AbstractExtensionFinder.kt",
      "language": "kotlin",
      "line": 247,
      "offset": 7,
      "length": 31,
      "code": {
        "startLine": 245,
        "length": 31,
        "offset": 98,
        "surroundingCode": "   * @return true, if the extension finder checks extensions for its required plugins\n   */\n  fun isCheckForExtensionDependencies(): Boolean {\n    return java.lang.Boolean.TRUE == checkForExtensionDependencies\n  }"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "e1828acadf6284bc875ac965a5408c0725e84b956ebeff47cb63532a88648194"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "'protected' visibility is effectively 'private' in a final class",
  "severity": "Moderate",
  "comment": "'protected' visibility is effectively 'private' in a final class",
  "detailsInfo": "Reports `protected` visibility used inside of a `final` class. In such cases `protected` members are accessible only in the class itself, so they are effectively `private`.\n\n**Example:**\n\n\n      class FinalClass {\n          protected fun foo() {}\n      }\n\nAfter the quick-fix is applied:\n\n\n      class FinalClass {\n          private fun foo() {}\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/cps/PluginClassLoader.kt",
      "language": "kotlin",
      "line": 143,
      "offset": 3,
      "length": 9,
      "code": {
        "startLine": 141,
        "length": 9,
        "offset": 7,
        "surroundingCode": "  }\n\n  protected fun loadClassFromDependencies(className: String?): Class<*>? {\n    Log.v { \"Search in dependencies for class $className\" }\n    val dependencies: List<PluginDependency> = pluginDescriptor.dependencies!!"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "ProtectedInFinal"
  },
  "hash": "0af743b2f35608c445ee297f13638d75f1eef7418bcf39f585b95ba2d55417e1"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "'protected' visibility is effectively 'private' in a final class",
  "severity": "Moderate",
  "comment": "'protected' visibility is effectively 'private' in a final class",
  "detailsInfo": "Reports `protected` visibility used inside of a `final` class. In such cases `protected` members are accessible only in the class itself, so they are effectively `private`.\n\n**Example:**\n\n\n      class FinalClass {\n          protected fun foo() {}\n      }\n\nAfter the quick-fix is applied:\n\n\n      class FinalClass {\n          private fun foo() {}\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/cps/PluginClassLoader.kt",
      "language": "kotlin",
      "line": 162,
      "offset": 3,
      "length": 9,
      "code": {
        "startLine": 160,
        "length": 9,
        "offset": 7,
        "surroundingCode": "  }\n\n  protected fun findResourceFromDependencies(name: String?): URL? {\n    Log.v { \"Search in dependencies for resource $name\" }\n    val dependencies: List<PluginDependency> = pluginDescriptor.dependencies!!"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "ProtectedInFinal"
  },
  "hash": "f20af93927354deba99ddc026d5b5e332f9c2bc81003cd2b0ee3100ce8878fb7"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "'protected' visibility is effectively 'private' in a final class",
  "severity": "Moderate",
  "comment": "'protected' visibility is effectively 'private' in a final class",
  "detailsInfo": "Reports `protected` visibility used inside of a `final` class. In such cases `protected` members are accessible only in the class itself, so they are effectively `private`.\n\n**Example:**\n\n\n      class FinalClass {\n          protected fun foo() {}\n      }\n\nAfter the quick-fix is applied:\n\n\n      class FinalClass {\n          private fun foo() {}\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/cps/PluginClassLoader.kt",
      "language": "kotlin",
      "line": 182,
      "offset": 3,
      "length": 9,
      "code": {
        "startLine": 180,
        "length": 9,
        "offset": 33,
        "surroundingCode": "\n  @Throws(IOException::class)\n  protected fun findResourcesFromDependencies(name: String?): Collection<URL> {\n    Log.v { \"Search in dependencies for resources $name\" }\n    val results: MutableList<URL> = ArrayList()"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "ProtectedInFinal"
  },
  "hash": "e7ed0ec6cd74a5ea0375b51a23622d3bb0e9a3df99aa8a52bc6b60781cc3bda8"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Constructor is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/cps/DevelopmentPluginRepository.kt",
      "language": "kotlin",
      "line": 14,
      "offset": 3,
      "length": 11,
      "code": {
        "startLine": 12,
        "length": 11,
        "offset": 49,
        "surroundingCode": "\n  override var filter: FileFilter? = filter()\n  constructor(vararg pluginsRoots: Path) : this(mutableListOf<Path>(*pluginsRoots))\n\n  fun filter(): AndFileFilter {"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "36592df368cc2d0935f4094e5e13706f91c3e8e488d0652664b677fc49bcd5c1"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"WindowPOJO\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/common/frontend/utils/StateHolder.kt",
      "language": "kotlin",
      "line": 89,
      "offset": 12,
      "length": 10,
      "code": {
        "startLine": 87,
        "length": 10,
        "offset": 26,
        "surroundingCode": "\n@Serializable\ndata class WindowPOJO(\n  val state: WindowState,\n  val view: View,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "672dd821826381027631b92a44c04fbb7f628f97dd80c48e161436e30b7dd3fd"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"deserializeUnStash\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/common/frontend/utils/StateHolder.kt",
      "language": "kotlin",
      "line": 69,
      "offset": 9,
      "length": 18,
      "code": {
        "startLine": 67,
        "length": 18,
        "offset": 17,
        "surroundingCode": "    }*/\n\n    fun deserializeUnStash() {\n\n    }"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "6cef9350cb6c1e81657cb3096f8840c97f351784018fda32e0023350509120fa"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"serializeStash\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/common/frontend/utils/StateHolder.kt",
      "language": "kotlin",
      "line": 64,
      "offset": 9,
      "length": 14,
      "code": {
        "startLine": 62,
        "length": 14,
        "offset": 15,
        "surroundingCode": "    }\n\n    fun serializeStash() {}\n    /*private suspend fun deserialize(): WindowPOJO {\n      return windowPOJOKStore.get()"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "981d861e10216cec3e8d6c7014d23503e6abdf40c015c7ad53ac58fe2ddc81e2"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Type alias \"WindowState\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/common/frontend/utils/StateHolder.kt",
      "language": "kotlin",
      "line": 15,
      "offset": 11,
      "length": 11,
      "code": {
        "startLine": 13,
        "length": 11,
        "offset": 51,
        "surroundingCode": "import kotlin.concurrent.fixedRateTimer\n\ntypealias WindowState = StatesHolder.Window\n\n@Serializable"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "7e23d5633bde9257a10ffd5d41f97316d5b7fffdd91ab5da584b9167c0ccd705"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"pointerMoveFilter\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/Mouse.kt",
      "language": "kotlin",
      "line": 12,
      "offset": 21,
      "length": 17,
      "code": {
        "startLine": 10,
        "length": 17,
        "offset": 61,
        "surroundingCode": "\n@OptIn(ExperimentalComposeUiApi::class)\nactual fun Modifier.pointerMoveFilter(\n  onEnter: () -> Boolean,\n  onExit: () -> Boolean,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "3c4e09d93fbc1955f6269fc0bbfdb43c1dc9a5ae6194f07eea4756cf147865f7"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"HomeFolder\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/androidAndroidTestRelease/kotlin/com/mcxross/cohesive/common/editor/platform/HomeFolder.kt",
      "language": "kotlin",
      "line": 5,
      "offset": 12,
      "length": 10,
      "code": {
        "startLine": 3,
        "length": 10,
        "offset": 52,
        "surroundingCode": "import com.mcxross.cohesive.mellow.File\n\nactual val HomeFolder: File\n    get() = TODO(\"Not yet implemented\")"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.androidAndroidTestRelease",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "e0c389e6fdf5f59cc0f3338bed66bd8cea8bfa1aa71354bb79ae4c6d9255e5e8"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"points\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/csp/src/main/kotlin/com/mcxross/cohesive/csp/annotation/Extension.kt",
      "language": "kotlin",
      "line": 23,
      "offset": 7,
      "length": 6,
      "code": {
        "startLine": 21,
        "length": 6,
        "offset": 93,
        "surroundingCode": "   * @return classes of extension points, that are implemented by this extension\n   */\n  val points: Array<KClass<out ExtensionPoint>> = [],\n  /**\n   * An array of plugin IDs, that have to be available in order to load this extension. The"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.csp.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "288c9705223b17efc78f23244a2789078ecc00eb98d8ff46b2aed2bf5df2969e"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Constructor is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/cps/DefaultPluginManager.kt",
      "language": "kotlin",
      "line": 75,
      "offset": 3,
      "length": 11,
      "code": {
        "startLine": 73,
        "length": 11,
        "offset": 29,
        "surroundingCode": "\n  constructor() : super()\n  constructor(vararg pluginsRoots: Path) : super(*pluginsRoots)\n  constructor(pluginsRoots: List<Path>) : super(pluginsRoots)\n"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "7ef005e51a1cfc0ee5210a8ea72b7d33ce707917fee7bc649f6317579ef2c63d"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Constructor is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/cps/DefaultPluginManager.kt",
      "language": "kotlin",
      "line": 76,
      "offset": 3,
      "length": 11,
      "code": {
        "startLine": 74,
        "length": 11,
        "offset": 92,
        "surroundingCode": "  constructor() : super()\n  constructor(vararg pluginsRoots: Path) : super(*pluginsRoots)\n  constructor(pluginsRoots: List<Path>) : super(pluginsRoots)\n\n  private fun getPluginManager(): PluginManager {"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "f90579f2b889759dfdbe1d6f5c9949447ecb5adfaf853e71e4fa521d46b5ca03"
}]}