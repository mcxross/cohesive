{"version":"3","listProblem":[{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'SimpleLayout' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/foundation/text/selection/SimpleLayout.kt",
      "language": "kotlin",
      "line": 32,
      "offset": 14,
      "length": 12,
      "code": {
        "startLine": 30,
        "length": 12,
        "offset": 29,
        "surroundingCode": " */\n@Composable\ninternal fun SimpleLayout(modifier: Modifier = Modifier, content: @Composable () -> Unit) {\n    Layout(modifier = modifier, content = content) { measurables, constraints ->\n        val placeables = measurables.fastMap { measurable ->"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "9ce3027ed97892380bb00bec0c5f18abc479338ff6e561c75c7a3613e36f3f2b"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'HorizontalScrollbar' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/Scrollbar.kt",
      "language": "kotlin",
      "line": 38,
      "offset": 12,
      "length": 19,
      "code": {
        "startLine": 36,
        "length": 19,
        "offset": 24,
        "surroundingCode": "\n@Composable\nactual fun HorizontalScrollbar(\n    modifier: Modifier,\n    scrollState: ScrollState,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "ec67641785c764a8ba8f106f1046cd8244ccca0dd5ede781b6f73584e00bd8ca"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'HorizontalScrollbar' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/Scrollbar.kt",
      "language": "kotlin",
      "line": 47,
      "offset": 12,
      "length": 19,
      "code": {
        "startLine": 45,
        "length": 19,
        "offset": 24,
        "surroundingCode": "\n@Composable\nactual fun HorizontalScrollbar(\n    modifier: Modifier,\n    scrollState: LazyListState,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "9331af2eab02fc7dd4243e004694827639f803a10d8f9f0e054d75adb6df2e1a"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'VerticalScrollbar' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/Scrollbar.kt",
      "language": "kotlin",
      "line": 20,
      "offset": 12,
      "length": 17,
      "code": {
        "startLine": 18,
        "length": 17,
        "offset": 24,
        "surroundingCode": "\n@Composable\nactual fun VerticalScrollbar(\n    modifier: Modifier,\n    scrollState: LazyListState,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "9de29fb76b6b03c86c6cfd0bfa26619c8a1ed7ea631c036a61d05434a872edff"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'VerticalScrollbar' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/Scrollbar.kt",
      "language": "kotlin",
      "line": 11,
      "offset": 12,
      "length": 17,
      "code": {
        "startLine": 9,
        "length": 17,
        "offset": 24,
        "surroundingCode": "\n@Composable\nactual fun VerticalScrollbar(\n    modifier: Modifier,\n    scrollState: ScrollState,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "ca1ab3dcb9627dcc0ff0a68741f35d4d31a4ed8eb65ebf2cfc8869e671a25ad0"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'VerticalScrollbar' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/Scrollbar.kt",
      "language": "kotlin",
      "line": 29,
      "offset": 5,
      "length": 17,
      "code": {
        "startLine": 27,
        "length": 17,
        "offset": 17,
        "surroundingCode": "\n@Composable\nfun VerticalScrollbar(\n    scrollbarAdapter: ScrollbarAdapter,\n    modifier: Modifier,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "d6b71712603cf576452e588e82f1dce21d37919e5fd9b729f058850d6ba58d3c"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'TextFieldSelectionHandle' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/foundation/text/selection/TextFieldSelectionManager.kt",
      "language": "kotlin",
      "line": 741,
      "offset": 14,
      "length": 24,
      "code": {
        "startLine": 739,
        "length": 24,
        "offset": 26,
        "surroundingCode": "\n@Composable\ninternal fun TextFieldSelectionHandle(\n    isStartHandle: Boolean,\n    direction: ResolvedTextDirection,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "3bb5282be74bebe0af6e93cdb57e85184c90b8e78864adb2907d3f81d2ad60a2"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'Card' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/Card.kt",
      "language": "kotlin",
      "line": 25,
      "offset": 5,
      "length": 4,
      "code": {
        "startLine": 23,
        "length": 4,
        "offset": 56,
        "surroundingCode": "@OptIn(ExperimentalComposeUiApi::class)\n@Composable\nfun Card(\n    modifier: Modifier = Modifier,\n    width: Dp,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "cf84e1a69111b183f1f6a8f902bab0b4f5c44cbe7fe56bbea7015d3ea121856a"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'WindowButton' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/Button.kt",
      "language": "kotlin",
      "line": 26,
      "offset": 5,
      "length": 12,
      "code": {
        "startLine": 24,
        "length": 12,
        "offset": 56,
        "surroundingCode": "@OptIn(ExperimentalComposeUiApi::class)\n@Composable\nfun WindowButton(\n    onClick: () -> Unit,\n    modifier: Modifier = Modifier,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "be2ed692070dd95ec21b5b1683a938b5f670044f03565be77b04c55425abf00a"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'DropDown' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/Menu.kt",
      "language": "kotlin",
      "line": 124,
      "offset": 13,
      "length": 8,
      "code": {
        "startLine": 122,
        "length": 8,
        "offset": 25,
        "surroundingCode": "\n@Composable\nprivate fun DropDown(model: MenuTree, width: Dp = 200.dp) {\n\n    var offSetX = 0.dp"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "1a8c97e086b24bfbf9c4a643c7255d14ea25fba7745f007326f319856cfd8ca8"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'MenuItemView' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/Menu.kt",
      "language": "kotlin",
      "line": 153,
      "offset": 13,
      "length": 12,
      "code": {
        "startLine": 151,
        "length": 12,
        "offset": 64,
        "surroundingCode": "@OptIn(ExperimentalComposeUiApi::class)\n@Composable\nprivate fun MenuItemView(index: Int, item: MenuTree.Item) {\n    var isPerformingOnEnterTask by remember { mutableStateOf(true) }\n    var isPerformingOnExitTask by remember { mutableStateOf(true) }"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "7e2eb887ab5d2d7b7fabfeea6dd35ccf95601317be802b5247e9abd407b9484d"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'Menu' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/Menu.kt",
      "language": "kotlin",
      "line": 107,
      "offset": 5,
      "length": 4,
      "code": {
        "startLine": 105,
        "length": 4,
        "offset": 17,
        "surroundingCode": "\n@Composable\nfun Menu(model: MenuTree, onClicked: () -> Unit) {\n    fun onClick() {\n        onClicked()"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "588e60c828ef81e2533de962321f35b6f43cacc819d141463802c1e944fa6ee7"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'TopMinBar' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/TopBar.kt",
      "language": "kotlin",
      "line": 100,
      "offset": 5,
      "length": 9,
      "code": {
        "startLine": 98,
        "length": 9,
        "offset": 17,
        "surroundingCode": "\n@Composable\nfun TopMinBar(\n    onClose: () -> Unit,\n    modifier: Modifier,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "61975736a53033eaf5cd63b10374a3f37bac71fb1494eb6bf6de0fec6cabf2c9"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'TopBar' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/TopBar.kt",
      "language": "kotlin",
      "line": 21,
      "offset": 17,
      "length": 6,
      "code": {
        "startLine": 19,
        "length": 6,
        "offset": 29,
        "surroundingCode": "\n@Composable\nfun WindowScope.TopBar(\n    onClose: () -> Unit,\n    onRestore: () -> Unit,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "25e78588250a91b38af600dccb06ebbc8533a1011c0aefaa546850b769f9980d"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'Theme' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/commonMain/kotlin/com.mcxross.cohesive.mellow/MellowTheme.kt",
      "language": "kotlin",
      "line": 64,
      "offset": 9,
      "length": 5,
      "code": {
        "startLine": 62,
        "length": 5,
        "offset": 25,
        "surroundingCode": "\n    @Composable\n    fun Theme(content: @Composable () -> Unit) {\n        androidx.compose.material.MaterialTheme(\n            colors = getColors(),"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.commonMain",
    "inspectionName": "FunctionName"
  },
  "hash": "79bbaacb4dbb56a8ad812425b98873068527938f67a5e1b5187bff17e06f22e7"
},{
  "tool": "Code Inspection",
  "category": "Other problems",
  "type": "@Deprecated annotation without 'replaceWith' argument",
  "severity": "Info",
  "comment": "'@Deprecated' annotation without a 'replaceWith' argument",
  "detailsInfo": "Reports deprecated functions and properties that do not have the `kotlin.ReplaceWith` argument in its `kotlin.deprecated` annotation and suggests to add one based on their body.\n\n\nKotlin provides the `ReplaceWith` argument to replace deprecated declarations automatically.\nIt is recommended to use the argument to fix deprecation issues in code.\n\n**Example:**\n\n\n      @Deprecated(\"Use refined() instead.\")\n      fun deprecated() = refined()\n\n      fun refined() = 42\n\nA quick-fix adds the `ReplaceWith()` argument:\n\n\n      @Deprecated(\"Use refined() instead.\", ReplaceWith(\"refined()\"))\n      fun deprecated() = refined()\n\n      fun refined() = 42\n",
  "sources": [
    {
      "type": "file",
      "path": "cps/src/main/kotlin/com/mcxross/cohesive/cps/utils/FileUtils.kt",
      "language": "kotlin",
      "line": 39,
      "offset": 5,
      "length": 15,
      "code": {
        "startLine": 37,
        "length": 15,
        "offset": 46,
        "surroundingCode": "     * Use [.writeLines] instead.\n     */\n    @Deprecated(\"\")\n    @Throws(IOException::class)\n    fun writeLines(lines: Collection<String?>?, file: File) {"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cps.main",
    "inspectionName": "DeprecatedCallableAddReplaceWith"
  },
  "hash": "dfbbd6fd41b2584eaf50d9d39d2927ce74d074c022564f6f45087737bdf2fbf7"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Replace empty class body",
  "severity": "Info",
  "comment": "Redundant empty class body",
  "detailsInfo": "Reports declarations of classes and objects with an empty body.\n\nUse the 'Remove redundant empty class body' quick-fix to clean up the code.\n\n**Examples:**\n\n\n      class EmptyA() {} // <== empty body\n\n      class EmptyB {\n          companion object {} // <== empty body\n      }\n\n      fun emptyC() {\n         object {} // <== anonymous object, it's ok (not reported)\n      }\n\nAfter the quick fix is applied:\n\n\n      class EmptyA()\n\n      class EmptyB {\n          companion object\n      }\n\n      fun emptyC() {\n         object {}\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "common/src/commonMain/kotlin/com/mcxross/cohesive/common/frontend/model/Context.kt",
      "language": "kotlin",
      "line": 3,
      "offset": 22,
      "length": 3,
      "code": {
        "startLine": 1,
        "length": 3,
        "offset": 73,
        "surroundingCode": "package com.mcxross.cohesive.common.frontend.model\n\nexpect class Context {\n}"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.commonMain",
    "inspectionName": "RemoveEmptyClassBody"
  },
  "hash": "a2af166f5321ba18dc82cc06000c23ac0f661d99d02aa52df0ae3b1e232f9916"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused receiver parameter",
  "severity": "High",
  "comment": "Receiver parameter is never used",
  "detailsInfo": "Reports receiver parameter of extension functions and properties that is not used.\n\n**Remove redundant receiver parameter** can be used to amend the code automatically.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/foundation/text/KeyEventHelpers.kt",
      "language": "kotlin",
      "line": 22,
      "offset": 14,
      "length": 8,
      "code": {
        "startLine": 20,
        "length": 8,
        "offset": 67,
        "surroundingCode": "import org.jetbrains.skiko.orderEmojiAndSymbolsPopup\n\ninternal fun KeyEvent.cancelsTextSelection(): Boolean = false\n\ninternal fun showCharacterPalette() = orderEmojiAndSymbolsPopup()"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "UnusedReceiverParameter"
  },
  "hash": "9f31e50d3636afe010ebe7f49af66626fabf80cca68b607a05e439250b1e3cb7"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'endHandlePosition' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/foundation/text/selection/SelectionManager.kt",
      "language": "kotlin",
      "line": 176,
      "offset": 9,
      "length": 17,
      "code": {
        "startLine": 174,
        "length": 17,
        "offset": 54,
        "surroundingCode": "     * the position has been changed.\n     */\n    var endHandlePosition by mutableStateOf<Offset?>(\n        null,\n        policy = structuralEqualityPolicy()"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "70dd031965f61101ac21d190424bdd3007c0eadd92a7ff06e7cff5536a7f6330"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'hasFocus' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/foundation/text/selection/SelectionManager.kt",
      "language": "kotlin",
      "line": 104,
      "offset": 9,
      "length": 8,
      "code": {
        "startLine": 102,
        "length": 8,
        "offset": 87,
        "surroundingCode": "     * Return true if the corresponding SelectionContainer is focused.\n     */\n    var hasFocus: Boolean by mutableStateOf(false)\n\n    /**"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "0a1e71e1a524ffb2ebd5758977b6f1f56dee32aad3977fea380248b81b2b519d"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'startHandlePosition' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/foundation/text/selection/SelectionManager.kt",
      "language": "kotlin",
      "line": 164,
      "offset": 9,
      "length": 19,
      "code": {
        "startLine": 162,
        "length": 19,
        "offset": 54,
        "surroundingCode": "     * the position has been changed.\n     */\n    var startHandlePosition by mutableStateOf<Offset?>(\n        null,\n        policy = structuralEqualityPolicy()"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "ee88923bc237c8da936277a4f92a090fa3eba5dd92071757e07b01e4624cd1cd"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'containerLayoutCoordinates' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/foundation/text/selection/SelectionManager.kt",
      "language": "kotlin",
      "line": 133,
      "offset": 9,
      "length": 26,
      "code": {
        "startLine": 131,
        "length": 26,
        "offset": 70,
        "surroundingCode": "     * Layout Coordinates of the selection container.\n     */\n    var containerLayoutCoordinates: LayoutCoordinates? = null\n        set(value) {\n            field = value"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "e51b47347f9a10cc389f652e25221721d0b0e8c7a56473ef0030027ad96c513f"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'textToolbar' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/foundation/text/selection/SelectionManager.kt",
      "language": "kotlin",
      "line": 94,
      "offset": 9,
      "length": 11,
      "code": {
        "startLine": 92,
        "length": 11,
        "offset": 97,
        "surroundingCode": "     * [TextToolbar] to show floating toolbar(post-M) or primary toolbar(pre-M).\n     */\n    var textToolbar: TextToolbar? = null\n\n    /**"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "203e2990b2311d6baf06bd0a1aa9860162685be4a78244b7f9a4ced0d37df3a1"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Function 'updateSelection' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/foundation/text/selection/SelectionManager.kt",
      "language": "kotlin",
      "line": 688,
      "offset": 5,
      "length": 8,
      "code": {
        "startLine": 686,
        "length": 8,
        "offset": 44,
        "surroundingCode": "     * @see SelectionAdjustment\n     */\n    internal fun updateSelection(\n        startHandlePosition: Offset,\n        endHandlePosition: Offset,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "e1ba72dfb1a3339fca1fb9d27fc2fa174058c20f4dec5df818db245c40d2e1ab"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'hapticFeedBack' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/foundation/text/selection/SelectionManager.kt",
      "language": "kotlin",
      "line": 84,
      "offset": 9,
      "length": 14,
      "code": {
        "startLine": 82,
        "length": 14,
        "offset": 75,
        "surroundingCode": "     * [HapticFeedback] handle to perform haptic feedback.\n     */\n    var hapticFeedBack: HapticFeedback? = null\n\n    /**"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "08c0704384a84bb75936648ed9b508481a677bf94e2832af868bcad5fc84fa7d"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Function 'onRelease' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/foundation/text/selection/SelectionManager.kt",
      "language": "kotlin",
      "line": 489,
      "offset": 9,
      "length": 9,
      "code": {
        "startLine": 487,
        "length": 9,
        "offset": 74,
        "surroundingCode": "\n    // This is for PressGestureDetector to cancel the selection.\n    fun onRelease() {\n        selectionRegistrar.subselections = emptyMap()\n        hideSelectionToolbar()"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "5d118211fca321121654dc1ac895dd16879dbdf8d27713fd4146d388e7617359"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'focusRequester' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/foundation/text/selection/SelectionManager.kt",
      "language": "kotlin",
      "line": 99,
      "offset": 9,
      "length": 14,
      "code": {
        "startLine": 97,
        "length": 14,
        "offset": 92,
        "surroundingCode": "     * Focus requester used to request focus when selection becomes active.\n     */\n    var focusRequester: FocusRequester = FocusRequester()\n\n    /**"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "2742d310124d8bed07e03723038a0142132b9b13591b1b18e3b5272ce7da8153"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'clipboardManager' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/foundation/text/selection/SelectionManager.kt",
      "language": "kotlin",
      "line": 89,
      "offset": 9,
      "length": 16,
      "code": {
        "startLine": 87,
        "length": 16,
        "offset": 73,
        "surroundingCode": "     * [ClipboardManager] to perform clipboard features.\n     */\n    var clipboardManager: ClipboardManager? = null\n\n    /**"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "96f73f0db5d197c196a9db6824e537e92abd9530e73c2c4d10b6774eb9d8c32a"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Function 'getSelectedText' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/foundation/text/selection/SelectionManager.kt",
      "language": "kotlin",
      "line": 357,
      "offset": 5,
      "length": 8,
      "code": {
        "startLine": 355,
        "length": 8,
        "offset": 11,
        "surroundingCode": "    }\n\n    internal fun getSelectedText(): AnnotatedString? {\n        val selectables = selectionRegistrar.sort(requireContainerCoordinates())\n        var selectedText: AnnotatedString? = null"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "19be170ac4e3d8b6b5c54df0da0dc66fb770d6cc4e6961e79d8dae11b3120eb4"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Function 'selectAll' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/foundation/text/selection/SelectionManager.kt",
      "language": "kotlin",
      "line": 339,
      "offset": 5,
      "length": 8,
      "code": {
        "startLine": 337,
        "length": 8,
        "offset": 11,
        "surroundingCode": "    }\n\n    internal fun selectAll(\n        selectableId: Long,\n        previousSelection: Selection?"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "140c017d7c0f4a2903dd58e73223cda14d76e97c29520d93ff7862ab4b62a79e"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Function 'topologicalSort' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "cps/src/main/kotlin/com/mcxross/cohesive/cps/utils/DirectedGraph.kt",
      "language": "kotlin",
      "line": 100,
      "offset": 9,
      "length": 15,
      "code": {
        "startLine": 98,
        "length": 15,
        "offset": 107,
        "surroundingCode": "     * See [this](https://en.wikipedia.org/wiki/Topological_sorting) for more information.\n     */\n    fun topologicalSort(): List<V?>? {\n        val degree = inDegree()\n"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cps.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "55cc9870fc192bfdfba1e7748457b6b54b4a4046237542dca0a7f0f20a63f854"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Function 'inDegree' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "cps/src/main/kotlin/com/mcxross/cohesive/cps/utils/DirectedGraph.kt",
      "language": "kotlin",
      "line": 83,
      "offset": 9,
      "length": 8,
      "code": {
        "startLine": 81,
        "length": 8,
        "offset": 120,
        "surroundingCode": "     * Report (as a [Map]) the in-degree (the number of head ends adjacent to a vertex) of each vertex.\n     */\n    fun inDegree(): MutableMap<V, Int> {\n        val result: MutableMap<V, Int> = HashMap()\n        for (vertex in neighbors.keys) {"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cps.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "a8c306df03478896abc59ccf7495291f3fc0242e4f6ac422dc8eb78cd0c96fb1"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Function 'containsVertex' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "cps/src/main/kotlin/com/mcxross/cohesive/cps/utils/DirectedGraph.kt",
      "language": "kotlin",
      "line": 37,
      "offset": 9,
      "length": 14,
      "code": {
        "startLine": 35,
        "length": 14,
        "offset": 54,
        "surroundingCode": "     * True if graph contains vertex.\n     */\n    fun containsVertex(vertex: V): Boolean {\n        return neighbors.containsKey(vertex)\n    }"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cps.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "bd82ca480e797d03626885cf9b5341c91fb6ff5ff9d26b7b3e8d91a9ebe12f17"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "'protected' visibility is effectively 'private' in a final class",
  "severity": "Moderate",
  "comment": "'protected' visibility is effectively 'private' in a final class",
  "detailsInfo": "Reports `protected` visibility used inside of a `final` class. In such cases `protected` members are accessible only in the class itself, so they are effectively `private`.\n\n**Example:**\n\n\n      class FinalClass {\n          protected fun foo() {}\n      }\n\nAfter the quick-fix is applied:\n\n\n      class FinalClass {\n          private fun foo() {}\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "cps/src/main/kotlin/com/mcxross/cohesive/cps/DevelopmentPluginRepository.kt",
      "language": "kotlin",
      "line": 20,
      "offset": 5,
      "length": 9,
      "code": {
        "startLine": 18,
        "length": 9,
        "offset": 11,
        "surroundingCode": "    }\n\n    protected fun createHiddenPluginFilter(): FileFilter {\n        val hiddenPluginFilter = OrFileFilter(HiddenFilter())\n"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cps.main",
    "inspectionName": "ProtectedInFinal"
  },
  "hash": "d5bb9f90aa7817fd4c4363a9f03446ad3679b1eca3145445ebe97ca4830a71bc"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant constructor body",
  "severity": "Moderate",
  "comment": "Remove empty constructor body",
  "detailsInfo": "Reports empty bodies of secondary constructors.",
  "sources": [
    {
      "type": "file",
      "path": "cps/src/main/kotlin/com/mcxross/cohesive/cps/DevelopmentPluginRepository.kt",
      "language": "kotlin",
      "line": 12,
      "offset": 87,
      "length": 2,
      "code": {
        "startLine": 10,
        "length": 2,
        "offset": 135,
        "surroundingCode": "    override var filter: FileFilter? = filter()\n\n    constructor(vararg pluginsRoots: Path) : this(mutableListOf<Path>(*pluginsRoots)) {}\n\n    fun filter(): AndFileFilter {"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cps.main",
    "inspectionName": "RemoveEmptySecondaryConstructorBody"
  },
  "hash": "3b61ac3ee4869eeb5cc6b71ef034e3afb88e91f19803c47d03fdaf8002c143ac"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"loadConfig\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "desktop/src/jvmMain/kotlin/com/mcxross/cohesive/desktop/Main.kt",
      "language": "kotlin",
      "line": 21,
      "offset": 12,
      "length": 10,
      "code": {
        "startLine": 19,
        "length": 10,
        "offset": 51,
        "surroundingCode": "import kotlin.system.measureTimeMillis\n\ninline fun loadConfig(onLoaded: (environment: com.mcxross.cohesive.common.frontend.model.Environment) -> Unit) {\n    Log.i { \"Loading config\" }\n    var configuration: com.mcxross.cohesive.common.frontend.model.Configuration"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.desktop.jvmMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "cbea12d6bad9c5e460cb39e7b89f429429eb375b4834bdc591383ec27c4ef4bd"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"BrewContextCompositionLocal\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "desktop/src/jvmMain/kotlin/com/mcxross/cohesive/desktop/Main.kt",
      "language": "kotlin",
      "line": 38,
      "offset": 5,
      "length": 27,
      "code": {
        "startLine": 36,
        "length": 27,
        "offset": 17,
        "surroundingCode": "\n@Composable\nfun BrewContextCompositionLocal(\n    windowScope: WindowScope,\n    environment: com.mcxross.cohesive.common.frontend.model.Environment,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.desktop.jvmMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "c0307bd7f0188fd9d6f67eed48f456050d6774edb215f79b2d78152ce696b18d"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"ContextMenuArea\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/ContextMenu.kt",
      "language": "kotlin",
      "line": 49,
      "offset": 14,
      "length": 15,
      "code": {
        "startLine": 47,
        "length": 15,
        "offset": 66,
        "surroundingCode": "@OptIn(ExperimentalFoundationApi::class)\n@Composable\ninternal fun ContextMenuArea(\n    manager: SelectionManager,\n    content: @Composable () -> Unit,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "86484d6be1bf9340ba36d9d51c22488b424fe8718c8475264644d4331680998e"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"getAnnotationValue\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cps/src/main/kotlin/com/mcxross/cohesive/cps/utils/ClassUtil.kt",
      "language": "kotlin",
      "line": 104,
      "offset": 9,
      "length": 18,
      "code": {
        "startLine": 102,
        "length": 18,
        "offset": 98,
        "surroundingCode": "     * @throws NullPointerException if `typeElement` or `annotationClass` is null\n     */\n    fun getAnnotationValue(\n        typeElement: TypeElement,\n        annotationClass: Class<*>,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cps.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "6cb4700bb08b56d9f8ccf16220188633bae386ab13a6672f3d6a12a483080847"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"isPrintable\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/foundation/text/TextFieldKeyInput.desktop.kt",
      "language": "kotlin",
      "line": 19,
      "offset": 18,
      "length": 11,
      "code": {
        "startLine": 17,
        "length": 11,
        "offset": 70,
        "surroundingCode": "package com.mcxross.cohesive.mellow.foundation.text\n\nprivate fun Char.isPrintable(): Boolean {\n    val block = Character.UnicodeBlock.of(this)\n    return (!Character.isISOControl(this)) &&"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "c9f02aa73c851aff334d8c7faf6677b640b23cb06851163c811a801d034c476b"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"v\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/commonMain/kotlin/com/mcxross/cohesive/common/utils/Log.kt",
      "language": "kotlin",
      "line": 15,
      "offset": 9,
      "length": 1,
      "code": {
        "startLine": 13,
        "length": 1,
        "offset": 15,
        "surroundingCode": "    }\n\n    fun v(message: () -> String) {\n        Napier.v(tag = TAG) { message() }\n    }"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "b2b6c7886d6594e89ef24c13cf0f7b7359a4e44ae068c32f2111c9bc09d81062"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"w\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/commonMain/kotlin/com/mcxross/cohesive/common/utils/Log.kt",
      "language": "kotlin",
      "line": 27,
      "offset": 9,
      "length": 1,
      "code": {
        "startLine": 25,
        "length": 1,
        "offset": 15,
        "surroundingCode": "    }\n\n    fun w(message: () -> String) {\n        Napier.w(tag = TAG) { message() }\n    }"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "86f815e133eea810e73527e4b853c8df653cbe55713d52b34547596e98c5f108"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"wtf\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/commonMain/kotlin/com/mcxross/cohesive/common/utils/Log.kt",
      "language": "kotlin",
      "line": 35,
      "offset": 9,
      "length": 3,
      "code": {
        "startLine": 33,
        "length": 3,
        "offset": 15,
        "surroundingCode": "    }\n\n    fun wtf(message: () -> String) {\n        Napier.wtf(tag = TAG) { message() }\n    }"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "12be760105572dbb0b1954afd937bf07d95dcf04e5cf9ca8511ca6c6260c04a3"
}]}