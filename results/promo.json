{"version":"3","listProblem":[{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'Image' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/commonMain/kotlin/xyz/mcxross/cohesive/mellow/Image.kt",
      "language": "kotlin",
      "line": 20,
      "offset": 9,
      "length": 5,
      "code": {
        "startLine": 18,
        "length": 5,
        "offset": 21,
        "surroundingCode": "\n@Composable\nfun <T> Image(\n  load: suspend () -> T,\n  painterFor: @Composable (T) -> Painter,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.commonMain",
    "inspectionName": "FunctionName"
  },
  "hash": "75b9d238ed944b9c71aff83d79e97762f5e245a449b819d97bf61db03d9348d4"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'HorizontalScrollbar' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/mellow/Scrollbar.kt",
      "language": "kotlin",
      "line": 47,
      "offset": 12,
      "length": 19,
      "code": {
        "startLine": 45,
        "length": 19,
        "offset": 24,
        "surroundingCode": "\n@Composable\nactual fun HorizontalScrollbar(\n  modifier: Modifier,\n  scrollState: LazyListState,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "939917c2647810e2fda72f4bd55ef1e0e57a14c33bc650e5941f95160a55c0cd"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'VerticalScrollbar' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/mellow/Scrollbar.kt",
      "language": "kotlin",
      "line": 29,
      "offset": 5,
      "length": 17,
      "code": {
        "startLine": 27,
        "length": 17,
        "offset": 17,
        "surroundingCode": "\n@Composable\nfun VerticalScrollbar(\n  scrollbarAdapter: ScrollbarAdapter,\n  modifier: Modifier,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "796c80106d2b555aa8695e954d1b61edd3fa451170a14dc22519f8affd78b1f1"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'VerticalScrollbar' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/mellow/Scrollbar.kt",
      "language": "kotlin",
      "line": 11,
      "offset": 12,
      "length": 17,
      "code": {
        "startLine": 9,
        "length": 17,
        "offset": 24,
        "surroundingCode": "\n@Composable\nactual fun VerticalScrollbar(\n  modifier: Modifier,\n  scrollState: ScrollState,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "5d1b57b11d21bc63ffaca3ae3bf83802a669624ad9b7841ce84ef2e176c82e65"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'HorizontalScrollbar' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/mellow/Scrollbar.kt",
      "language": "kotlin",
      "line": 38,
      "offset": 12,
      "length": 19,
      "code": {
        "startLine": 36,
        "length": 19,
        "offset": 24,
        "surroundingCode": "\n@Composable\nactual fun HorizontalScrollbar(\n  modifier: Modifier,\n  scrollState: ScrollState,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "6f50a5b22804ae8858a6427934e113fe197bc74acf88d88d6eb406e6009285c3"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'VerticalScrollbar' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/mellow/Scrollbar.kt",
      "language": "kotlin",
      "line": 20,
      "offset": 12,
      "length": 17,
      "code": {
        "startLine": 18,
        "length": 17,
        "offset": 24,
        "surroundingCode": "\n@Composable\nactual fun VerticalScrollbar(\n  modifier: Modifier,\n  scrollState: LazyListState,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "fb2b9a97c82df7378d7799d5e7c17cd657efd2c3a7450d3116d2c22f21ca996d"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'SelectionHandle' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/mellow/foundation/text/selection/DesktopSelectionHandles.desktop.kt",
      "language": "kotlin",
      "line": 25,
      "offset": 14,
      "length": 15,
      "code": {
        "startLine": 23,
        "length": 15,
        "offset": 26,
        "surroundingCode": "\n@Composable\ninternal fun SelectionHandle(\n  position: Offset,\n  isStartHandle: Boolean,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "9f25022c8888bcaf382ed87ecdb2e107b7aafa0b01f2210d308ba60b29f0e687"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'WindowScaffold' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/mellow/WindowScaffold.kt",
      "language": "kotlin",
      "line": 28,
      "offset": 5,
      "length": 14,
      "code": {
        "startLine": 26,
        "length": 14,
        "offset": 17,
        "surroundingCode": "\n@Composable\nfun WindowScaffold(\n  modifier: Modifier = Modifier,\n  topBar: @Composable () -> Unit = {},"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "a8809d106660c8c1ac3e7180b699f8b21736bdc05eedab7d417bda1a073e7bfd"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'backgroundWhiteMedium' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/commonMain/kotlin/xyz/mcxross/cohesive/mellow/MellowTheme.kt",
      "language": "kotlin",
      "line": 45,
      "offset": 9,
      "length": 21,
      "code": {
        "startLine": 43,
        "length": 21,
        "offset": 60,
        "surroundingCode": "\n    val backgroundWhite: Color = Color(0xFFFFFFFF)\n    val backgroundWhiteMedium: Color = Color(0xFFF2F2F2)\n\n    val materialWhite: androidx.compose.material.Colors ="
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.commonMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "9ba21dfb7935743691bd062ef1471fe8048e737cd694fa60cd39b4e5ca5f5b7d"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'backgroundWhite' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/commonMain/kotlin/xyz/mcxross/cohesive/mellow/MellowTheme.kt",
      "language": "kotlin",
      "line": 44,
      "offset": 9,
      "length": 15,
      "code": {
        "startLine": 42,
        "length": 15,
        "offset": 17,
        "surroundingCode": "      )\n\n    val backgroundWhite: Color = Color(0xFFFFFFFF)\n    val backgroundWhiteMedium: Color = Color(0xFFF2F2F2)\n"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.commonMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "dd71210f3a19220d3e09a89e404818c845fcb2c2dc0c624c929dc5e4f039347e"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Function 'clear' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/commonMain/kotlin/xyz/mcxross/cohesive/common/ds/tree/TreeNode.kt",
      "language": "kotlin",
      "line": 100,
      "offset": 7,
      "length": 5,
      "code": {
        "startLine": 98,
        "length": 5,
        "offset": 71,
        "surroundingCode": "   * Remove all children from root and every node in tree.\n   */\n  fun clear() {\n    _parent = null\n    _children.forEach { it.clear() }"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.commonMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "cf74bf8dd3790cb9f5d18b5b5f0f4a06ed3dd59f0b668ddb5e0a94faa2d43562"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Function 'inDegree' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/cps/utils/DirectedGraph.kt",
      "language": "kotlin",
      "line": 77,
      "offset": 7,
      "length": 8,
      "code": {
        "startLine": 75,
        "length": 8,
        "offset": 25,
        "surroundingCode": "   * vertex.\n   */\n  fun inDegree(): MutableMap<V, Int> {\n    val result: MutableMap<V, Int> = HashMap()\n    neighbors.keys.forEach {"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "54691a4060ece47075fbff97497576d5de0f9c078e39c312cbd914b2907d03e2"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Function 'containsVertex' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/cps/utils/DirectedGraph.kt",
      "language": "kotlin",
      "line": 31,
      "offset": 7,
      "length": 14,
      "code": {
        "startLine": 29,
        "length": 14,
        "offset": 47,
        "surroundingCode": "\n  /** True if graph contains vertex. */\n  fun containsVertex(vertex: V): Boolean {\n    return neighbors.containsKey(vertex)\n  }"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "98ffb0654fcfc0bbe9f1fc6b99db99e3fbaf904edb9e86a0deccdf41fc51f05b"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Function 'topologicalSort' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/cps/utils/DirectedGraph.kt",
      "language": "kotlin",
      "line": 94,
      "offset": 7,
      "length": 15,
      "code": {
        "startLine": 92,
        "length": 15,
        "offset": 97,
        "surroundingCode": "   * [this](https://en.wikipedia.org/wiki/Topological_sorting) for more information.\n   */\n  fun topologicalSort(): List<V> {\n    val degree = inDegree()\n"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "c02f6503373391ac75a31a2be69822a0e35485069af66d63df6d824fd08b5c11"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "'protected' visibility is effectively 'private' in a final class",
  "severity": "Moderate",
  "comment": "'protected' visibility is effectively 'private' in a final class",
  "detailsInfo": "Reports `protected` visibility used inside of a `final` class. In such cases `protected` members are accessible only in the class itself, so they are effectively `private`.\n\n**Example:**\n\n\n      class FinalClass {\n          protected fun foo() {}\n      }\n\nAfter the quick-fix is applied:\n\n\n      class FinalClass {\n          private fun foo() {}\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/cps/ManifestPluginDescriptorFinder.kt",
      "language": "kotlin",
      "line": 34,
      "offset": 3,
      "length": 9,
      "code": {
        "startLine": 32,
        "length": 9,
        "offset": 7,
        "surroundingCode": "  }\n\n  protected fun readManifest(pluginPath: Path): Manifest {\n    if (isJarFile(pluginPath)) {\n      return readManifestFromJar(pluginPath)"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "ProtectedInFinal"
  },
  "hash": "1546393532834be09f554adc5235f0454da2a7f6dc3f7605652769628cb1a5b3"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "'protected' visibility is effectively 'private' in a final class",
  "severity": "Moderate",
  "comment": "'protected' visibility is effectively 'private' in a final class",
  "detailsInfo": "Reports `protected` visibility used inside of a `final` class. In such cases `protected` members are accessible only in the class itself, so they are effectively `private`.\n\n**Example:**\n\n\n      class FinalClass {\n          protected fun foo() {}\n      }\n\nAfter the quick-fix is applied:\n\n\n      class FinalClass {\n          private fun foo() {}\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/cps/ManifestPluginDescriptorFinder.kt",
      "language": "kotlin",
      "line": 103,
      "offset": 3,
      "length": 9,
      "code": {
        "startLine": 101,
        "length": 9,
        "offset": 7,
        "surroundingCode": "  }\n\n  protected fun readManifestFromDirectory(pluginPath: Path): Manifest {\n    // legacy (the path is something like \"classes/META-INF/MANIFEST.MF\")\n    val manifestPath: Path ="
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "ProtectedInFinal"
  },
  "hash": "b12f802484851422c46b222089880c7ca1ba46aad051d942610d308d03a495a5"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "'protected' visibility is effectively 'private' in a final class",
  "severity": "Moderate",
  "comment": "'protected' visibility is effectively 'private' in a final class",
  "detailsInfo": "Reports `protected` visibility used inside of a `final` class. In such cases `protected` members are accessible only in the class itself, so they are effectively `private`.\n\n**Example:**\n\n\n      class FinalClass {\n          protected fun foo() {}\n      }\n\nAfter the quick-fix is applied:\n\n\n      class FinalClass {\n          private fun foo() {}\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/cps/ManifestPluginDescriptorFinder.kt",
      "language": "kotlin",
      "line": 43,
      "offset": 3,
      "length": 9,
      "code": {
        "startLine": 41,
        "length": 9,
        "offset": 7,
        "surroundingCode": "  }\n\n  protected fun createPluginDescriptor(manifest: Manifest): PluginDescriptor {\n    val pluginDescriptor: DefaultPluginDescriptor = createPluginDescriptorInstance()\n"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "ProtectedInFinal"
  },
  "hash": "a43ea1a07b1adb0e966224c393094fd3d15ba3afbb357c954e204dc77dd20c13"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "'protected' visibility is effectively 'private' in a final class",
  "severity": "Moderate",
  "comment": "'protected' visibility is effectively 'private' in a final class",
  "detailsInfo": "Reports `protected` visibility used inside of a `final` class. In such cases `protected` members are accessible only in the class itself, so they are effectively `private`.\n\n**Example:**\n\n\n      class FinalClass {\n          protected fun foo() {}\n      }\n\nAfter the quick-fix is applied:\n\n\n      class FinalClass {\n          private fun foo() {}\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/cps/ManifestPluginDescriptorFinder.kt",
      "language": "kotlin",
      "line": 90,
      "offset": 3,
      "length": 9,
      "code": {
        "startLine": 88,
        "length": 9,
        "offset": 7,
        "surroundingCode": "  }\n\n  protected fun readManifestFromZip(zipPath: Path): Manifest {\n    try {\n      ZipFile(zipPath.toFile()).use { zip ->"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "ProtectedInFinal"
  },
  "hash": "818cc254be1c54a61b16f77ebcb64f495111235de43a4dfd1d4085f2342d35fe"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "'protected' visibility is effectively 'private' in a final class",
  "severity": "Moderate",
  "comment": "'protected' visibility is effectively 'private' in a final class",
  "detailsInfo": "Reports `protected` visibility used inside of a `final` class. In such cases `protected` members are accessible only in the class itself, so they are effectively `private`.\n\n**Example:**\n\n\n      class FinalClass {\n          protected fun foo() {}\n      }\n\nAfter the quick-fix is applied:\n\n\n      class FinalClass {\n          private fun foo() {}\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/cps/ManifestPluginDescriptorFinder.kt",
      "language": "kotlin",
      "line": 76,
      "offset": 3,
      "length": 9,
      "code": {
        "startLine": 74,
        "length": 9,
        "offset": 7,
        "surroundingCode": "  }\n\n  protected fun createPluginDescriptorInstance(): DefaultPluginDescriptor {\n    return DefaultPluginDescriptor()\n  }"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "ProtectedInFinal"
  },
  "hash": "91e40a55d32ba9fc99f1228920d59c7b22ec3ad6cefecbf0e24e525165327534"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "'protected' visibility is effectively 'private' in a final class",
  "severity": "Moderate",
  "comment": "'protected' visibility is effectively 'private' in a final class",
  "detailsInfo": "Reports `protected` visibility used inside of a `final` class. In such cases `protected` members are accessible only in the class itself, so they are effectively `private`.\n\n**Example:**\n\n\n      class FinalClass {\n          protected fun foo() {}\n      }\n\nAfter the quick-fix is applied:\n\n\n      class FinalClass {\n          private fun foo() {}\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/cps/ManifestPluginDescriptorFinder.kt",
      "language": "kotlin",
      "line": 80,
      "offset": 3,
      "length": 9,
      "code": {
        "startLine": 78,
        "length": 9,
        "offset": 7,
        "surroundingCode": "  }\n\n  protected fun readManifestFromJar(jarPath: Path): Manifest {\n    try {\n      JarFile(jarPath.toFile()).use { jar ->"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "ProtectedInFinal"
  },
  "hash": "43b7790e1174c4e53f074d375e00a7e415c0b34ec0f36abc0c689436d7c43671"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Constructor is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/cps/DevelopmentPluginRepository.kt",
      "language": "kotlin",
      "line": 14,
      "offset": 3,
      "length": 11,
      "code": {
        "startLine": 12,
        "length": 11,
        "offset": 49,
        "surroundingCode": "\n  override var filter: FileFilter? = filter()\n  constructor(vararg pluginsRoots: Path) : this(mutableListOf<Path>(*pluginsRoots))\n\n  fun filter(): AndFileFilter {"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "a44da83ffb8d585fd9b12a10000ddcb9b8b6f83b2b88492fe00318a0d94cae6a"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"EditorComposite\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/commonMain/kotlin/xyz/mcxross/cohesive/mellow/EditorComposite.kt",
      "language": "kotlin",
      "line": 23,
      "offset": 5,
      "length": 15,
      "code": {
        "startLine": 21,
        "length": 15,
        "offset": 17,
        "surroundingCode": "\n@Composable\nfun EditorComposite(\n    text: String = \"Project\",\n    file: File,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "e3f7411214bce0c92b25b071134f386af868e1a753c4ec38515e20925f9abb27"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"TextPreparedSelection\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/mellow/foundation/text/selection/TextPreparedSelection.kt",
      "language": "kotlin",
      "line": 350,
      "offset": 16,
      "length": 21,
      "code": {
        "startLine": 348,
        "length": 21,
        "offset": 18,
        "surroundingCode": "}\n\ninternal class TextPreparedSelection(\n  originalText: AnnotatedString,\n  originalSelection: TextRange,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "3bfd13b098d95f2463447aa7c2abfa36b050171c016098bf4680f5056b6e9368"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"disabledFilePath\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/cps/DefaultPluginStatusProvider.kt",
      "language": "kotlin",
      "line": 25,
      "offset": 7,
      "length": 16,
      "code": {
        "startLine": 23,
        "length": 16,
        "offset": 78,
        "surroundingCode": "  val enabledFilePath: Path\n    get() = getEnabledFilePath(pluginsRoot)\n  val disabledFilePath: Path\n    get() = getDisabledFilePath(pluginsRoot)\n"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "bd1b8512e3e8b08827df53d42b6c61f00a766caa00a65906d042c776904b23a4"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"addServiceProviderExtensionFinder\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/cps/CompositeExtensionFinder.kt",
      "language": "kotlin",
      "line": 101,
      "offset": 7,
      "length": 33,
      "code": {
        "startLine": 99,
        "length": 33,
        "offset": 11,
        "surroundingCode": "  }\n\n  fun addServiceProviderExtensionFinder() {\n    finders.add(ServiceProviderExtensionFinder(pluginManager))\n  }"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "104d785cb736c7547c3e0987189badf1bbfacee197af2061f77c23fda7645d9e"
}]}