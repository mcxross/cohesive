{"version":"3","listProblem":[{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'Card' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/commonMain/kotlin/com.mcxross.cohesive.mellow/Card.kt",
      "language": "kotlin",
      "line": 28,
      "offset": 5,
      "length": 4,
      "code": {
        "startLine": 26,
        "length": 4,
        "offset": 20,
        "surroundingCode": " */\n@Composable\nfun Card(\n  modifier: Modifier,\n  shape: Shape = RoundedCornerShape(15.dp),"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.commonMain",
    "inspectionName": "FunctionName"
  },
  "hash": "6346be087d234a0a73303068869fc8f377d3dd0f3abf9e51af18e53191dabec3"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'EditorSimple' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/commonMain/kotlin/com.mcxross.cohesive.mellow/EditorSimple.kt",
      "language": "kotlin",
      "line": 12,
      "offset": 5,
      "length": 12,
      "code": {
        "startLine": 10,
        "length": 12,
        "offset": 17,
        "surroundingCode": "\n@Composable\nfun EditorSimple(\n  file: File,\n) {"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.commonMain",
    "inspectionName": "FunctionName"
  },
  "hash": "5b7b4e426f1dea1bdc649caba5477971a64cbb0723891d165204f18e5d89db92"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'BoldText' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/commonMain/kotlin/com/mcxross/cohesive/common/frontend/impl/ui/widget/md/markup/BoldText.kt",
      "language": "kotlin",
      "line": 12,
      "offset": 5,
      "length": 8,
      "code": {
        "startLine": 10,
        "length": 8,
        "offset": 17,
        "surroundingCode": "\n@Composable\nfun BoldText(\n  text: String,\n  color: Color,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.commonMain",
    "inspectionName": "FunctionName"
  },
  "hash": "613bed288de0d48f1e86840c95e911f0bcb9ec9097dd00a6775b82f5cb12f69a"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'EditorMap' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/Editor.kt",
      "language": "kotlin",
      "line": 25,
      "offset": 21,
      "length": 9,
      "code": {
        "startLine": 23,
        "length": 9,
        "offset": 33,
        "surroundingCode": "\n@Composable\ninternal actual fun EditorMap(\n  textLines: TextLines,\n  fontSize: TextUnit,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "8c3b46938f1d2ed6750be175c720f348704ccbfbb6a71043266dc152e6bde1da"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'TextField' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/Editor.kt",
      "language": "kotlin",
      "line": 109,
      "offset": 12,
      "length": 9,
      "code": {
        "startLine": 107,
        "length": 9,
        "offset": 24,
        "surroundingCode": "\n@Composable\nactual fun TextField(\n  text: String,\n  isCode: Boolean,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "04e76ac20a0951acf745bfdcd9de247a63ec488fce66b8a3fe7b2bad14ea858e"
},{
  "tool": "Code Inspection",
  "category": "Probable bugs",
  "type": "Unresolved reference in KDoc",
  "severity": "High",
  "comment": "Cannot resolve symbol 'KeyboardOptions'",
  "detailsInfo": "Reports unresolved references in KDoc comments.\n\n**Example:**\n\n\n      /**\n       * [unresolvedLink]\n       */\n      fun foo() {}\n\nTo fix the problem make the link valid.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/foundation/text/CoreTextField.kt",
      "language": "kotlin",
      "line": 157,
      "offset": 5,
      "length": 15,
      "code": {
        "startLine": 155,
        "length": 15,
        "offset": 185,
        "surroundingCode": " * @param keyboardActions when the input service emits an IME action, the corresponding callback is\n * called. Note that this IME action may be different from what you specified in\n * [KeyboardOptions.imeAction].\n * @param enabled controls the enabled state of the text field. When `false`, the text field will be\n * neither editable nor focusable, the input of the text field will not be selectable"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "KDocUnresolvedReference"
  },
  "hash": "4b3f1039cb9e412cf8e5fbf1260942b24fd5f7dcb022e54e97282f993dd5da1d"
},{
  "tool": "Code Inspection",
  "category": "Probable bugs",
  "type": "Unresolved reference in KDoc",
  "severity": "High",
  "comment": "Cannot resolve symbol 'imeAction'",
  "detailsInfo": "Reports unresolved references in KDoc comments.\n\n**Example:**\n\n\n      /**\n       * [unresolvedLink]\n       */\n      fun foo() {}\n\nTo fix the problem make the link valid.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/foundation/text/CoreTextField.kt",
      "language": "kotlin",
      "line": 157,
      "offset": 21,
      "length": 9,
      "code": {
        "startLine": 155,
        "length": 9,
        "offset": 201,
        "surroundingCode": " * @param keyboardActions when the input service emits an IME action, the corresponding callback is\n * called. Note that this IME action may be different from what you specified in\n * [KeyboardOptions.imeAction].\n * @param enabled controls the enabled state of the text field. When `false`, the text field will be\n * neither editable nor focusable, the input of the text field will not be selectable"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "KDocUnresolvedReference"
  },
  "hash": "a961e97e9ecf1be60e89189d76d0cde8135d85db9e5f22e1c66580ed9ccef6da"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "'protected' visibility is effectively 'private' in a final class",
  "severity": "Moderate",
  "comment": "'protected' visibility is effectively 'private' in a final class",
  "detailsInfo": "Reports `protected` visibility used inside of a `final` class. In such cases `protected` members are accessible only in the class itself, so they are effectively `private`.\n\n**Example:**\n\n\n      class FinalClass {\n          protected fun foo() {}\n      }\n\nAfter the quick-fix is applied:\n\n\n      class FinalClass {\n          private fun foo() {}\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/cps/PluginClassLoader.kt",
      "language": "kotlin",
      "line": 143,
      "offset": 3,
      "length": 9,
      "code": {
        "startLine": 141,
        "length": 9,
        "offset": 7,
        "surroundingCode": "  }\n\n  protected fun loadClassFromDependencies(className: String?): Class<*>? {\n    Log.v { \"Search in dependencies for class $className\" }\n    val dependencies: List<PluginDependency> = pluginDescriptor.dependencies!!"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "ProtectedInFinal"
  },
  "hash": "0af743b2f35608c445ee297f13638d75f1eef7418bcf39f585b95ba2d55417e1"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "'protected' visibility is effectively 'private' in a final class",
  "severity": "Moderate",
  "comment": "'protected' visibility is effectively 'private' in a final class",
  "detailsInfo": "Reports `protected` visibility used inside of a `final` class. In such cases `protected` members are accessible only in the class itself, so they are effectively `private`.\n\n**Example:**\n\n\n      class FinalClass {\n          protected fun foo() {}\n      }\n\nAfter the quick-fix is applied:\n\n\n      class FinalClass {\n          private fun foo() {}\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/cps/PluginClassLoader.kt",
      "language": "kotlin",
      "line": 182,
      "offset": 3,
      "length": 9,
      "code": {
        "startLine": 180,
        "length": 9,
        "offset": 33,
        "surroundingCode": "\n  @Throws(IOException::class)\n  protected fun findResourcesFromDependencies(name: String?): Collection<URL> {\n    Log.v { \"Search in dependencies for resources $name\" }\n    val results: MutableList<URL> = ArrayList()"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "ProtectedInFinal"
  },
  "hash": "e7ed0ec6cd74a5ea0375b51a23622d3bb0e9a3df99aa8a52bc6b60781cc3bda8"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "'protected' visibility is effectively 'private' in a final class",
  "severity": "Moderate",
  "comment": "'protected' visibility is effectively 'private' in a final class",
  "detailsInfo": "Reports `protected` visibility used inside of a `final` class. In such cases `protected` members are accessible only in the class itself, so they are effectively `private`.\n\n**Example:**\n\n\n      class FinalClass {\n          protected fun foo() {}\n      }\n\nAfter the quick-fix is applied:\n\n\n      class FinalClass {\n          private fun foo() {}\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/cps/PluginClassLoader.kt",
      "language": "kotlin",
      "line": 162,
      "offset": 3,
      "length": 9,
      "code": {
        "startLine": 160,
        "length": 9,
        "offset": 7,
        "surroundingCode": "  }\n\n  protected fun findResourceFromDependencies(name: String?): URL? {\n    Log.v { \"Search in dependencies for resource $name\" }\n    val dependencies: List<PluginDependency> = pluginDescriptor.dependencies!!"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "ProtectedInFinal"
  },
  "hash": "f20af93927354deba99ddc026d5b5e332f9c2bc81003cd2b0ee3100ce8878fb7"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"addChild\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/commonMain/kotlin/com/mcxross/cohesive/common/ds/tree/TreeNode.kt",
      "language": "kotlin",
      "line": 35,
      "offset": 7,
      "length": 8,
      "code": {
        "startLine": 33,
        "length": 8,
        "offset": 87,
        "surroundingCode": "   * @param child A node which will be directly connected to current node.\n   */\n  fun addChild(child: TreeNode<T>) {\n    child._parent = this\n    _children.add(child)"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "6065e267680d097696f73277b2be2712f3e1c1228f1548f60a77cbdfb5ba38fb"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"removeChild\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/commonMain/kotlin/com/mcxross/cohesive/common/ds/tree/TreeNode.kt",
      "language": "kotlin",
      "line": 55,
      "offset": 7,
      "length": 11,
      "code": {
        "startLine": 53,
        "length": 11,
        "offset": 118,
        "surroundingCode": "   * @return `true` if the node has been successfully removed; `false` if it was not present in the tree.\n   */\n  fun removeChild(child: TreeNode<T>): Boolean {\n    println(child.value)\n    val removed = child._parent?._children?.remove(child)"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "6eb8d3427af8605c729ed0f3ad3a004527d011dfaf4b50fa4e1221f6e32ecdd7"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"prettyString\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/commonMain/kotlin/com/mcxross/cohesive/common/ds/tree/TreeNode.kt",
      "language": "kotlin",
      "line": 111,
      "offset": 7,
      "length": 12,
      "code": {
        "startLine": 109,
        "length": 12,
        "offset": 11,
        "surroundingCode": "  }\n\n  fun prettyString(): String {\n    val stringBuilder = StringBuilder()\n    print(stringBuilder, \"\", \"\")"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "797ea51fd219f47bf809c4067527f6fb475de6c5149021d5ae3caf1f7f31491b"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"clear\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/commonMain/kotlin/com/mcxross/cohesive/common/ds/tree/TreeNode.kt",
      "language": "kotlin",
      "line": 101,
      "offset": 7,
      "length": 5,
      "code": {
        "startLine": 99,
        "length": 5,
        "offset": 71,
        "surroundingCode": "   * Remove all children from root and every node in tree.\n   */\n  fun clear() {\n    _parent = null\n    _children.forEach { it.clear() }"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "667ecfee81168310e31a5bc680b54eb40b9c1ab755ebc486006fb64e42033256"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"HorizontalScrollbar\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/Scrollbar.kt",
      "language": "kotlin",
      "line": 47,
      "offset": 12,
      "length": 19,
      "code": {
        "startLine": 45,
        "length": 19,
        "offset": 24,
        "surroundingCode": "\n@Composable\nactual fun HorizontalScrollbar(\n  modifier: Modifier,\n  scrollState: LazyListState,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "b6bf11a2f5a6b4b55d08232fe3a6074272cc5283b3019bb64c31388488430650"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"VerticalScrollbar\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/Scrollbar.kt",
      "language": "kotlin",
      "line": 11,
      "offset": 12,
      "length": 17,
      "code": {
        "startLine": 9,
        "length": 17,
        "offset": 24,
        "surroundingCode": "\n@Composable\nactual fun VerticalScrollbar(\n  modifier: Modifier,\n  scrollState: ScrollState,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "eed3c140924ef4ce0f7dfef39994e0095a591673d1c719fe2074a4aa7c14d439"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"tipTarget\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/commonMain/kotlin/com/mcxross/cohesive/common/frontend/impl/ui/widget/TipScaffold.kt",
      "language": "kotlin",
      "line": 36,
      "offset": 16,
      "length": 9,
      "code": {
        "startLine": 34,
        "length": 9,
        "offset": 86,
        "surroundingCode": "\n  /** Modifier that marks Compose UI element as a target for [Tip] */\n  fun Modifier.tipTarget(\n    index: Int,\n    style: TipStyle = TipStyle.Default,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "73fd26bb707f96b1c811460fa5163aa015573e3a26a4611b8654d13660b4c9c1"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"TipScaffold\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/commonMain/kotlin/com/mcxross/cohesive/common/frontend/impl/ui/widget/TipScaffold.kt",
      "language": "kotlin",
      "line": 10,
      "offset": 5,
      "length": 11,
      "code": {
        "startLine": 8,
        "length": 11,
        "offset": 17,
        "surroundingCode": "\n@Composable\nfun TipScaffold(\n  tip: Boolean,\n  onTip: () -> Unit,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "2b7d12014918d7c2f0c4725ba2715f0534bca126b7292c7943609251924e3eac"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"Table\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/commonMain/kotlin/com/mcxross/cohesive/common/frontend/impl/ui/widget/md/markup/Table.kt",
      "language": "kotlin",
      "line": 3,
      "offset": 12,
      "length": 5,
      "code": {
        "startLine": 1,
        "length": 5,
        "offset": 82,
        "surroundingCode": "package com.mcxross.cohesive.common.frontend.impl.ui.widget.md.markup\n\ndata class Table(val table: LinkedHashMap<String, String>) : Element\n"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "4ddaf4d5b2630c3a098eab259d160e2486d671c3b378948f844041cafccc30b5"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"isDag\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/cps/utils/DirectedGraph.kt",
      "language": "kotlin",
      "line": 19,
      "offset": 7,
      "length": 5,
      "code": {
        "startLine": 17,
        "length": 5,
        "offset": 65,
        "surroundingCode": "\n  /** True if graph is a dag (directed acyclic graph). */\n  val isDag: Boolean\n    get() = topologicalSort().isNotEmpty()\n"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "a4a6751cb8a9051eb0460c491055a00c0d76099abcc6c3afe4812bbba5d60108"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"removeEdge\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/cps/utils/DirectedGraph.kt",
      "language": "kotlin",
      "line": 54,
      "offset": 7,
      "length": 10,
      "code": {
        "startLine": 52,
        "length": 10,
        "offset": 84,
        "surroundingCode": "   * @throws [IllegalArgumentException] if either vertex doesn't exist.\n   */\n  fun removeEdge(from: V, to: V) {\n    require(containsVertex(from)) { \"Nonexistent vertex $from\" }\n    require(containsVertex(to)) { \"Nonexistent vertex $to\" }"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "26e5fa1d6d2d786bf0cc115f26ebe4fa8229774a77681a0b50c7f23c3db83715"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"removeVertex\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/cps/utils/DirectedGraph.kt",
      "language": "kotlin",
      "line": 36,
      "offset": 7,
      "length": 12,
      "code": {
        "startLine": 34,
        "length": 12,
        "offset": 91,
        "surroundingCode": "\n  /** Remove a vertex from the graph. Also removes any edges adjacent to vertex. */\n  fun removeVertex(vertex: V) {\n    neighbors.remove(vertex)\n  }"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "7066bb357ad373cc2c481376757a4b674caf001137503a816980d4336407fd88"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"outDegree\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/cps/utils/DirectedGraph.kt",
      "language": "kotlin",
      "line": 67,
      "offset": 7,
      "length": 9,
      "code": {
        "startLine": 65,
        "length": 9,
        "offset": 113,
        "surroundingCode": "   * Report (as a Map) the out-degree (the number of tail ends adjacent to a vertex) of each vertex.\n   */\n  fun outDegree(): Map<V, Int> {\n    val result: MutableMap<V, Int> = HashMap()\n    neighbors.keys.forEach { result[it] = neighbors[it]!!.size }"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "a7bc1527ee4308cdd66b4f3b9775e6b245cc857169c222ff3d2e2df877ca2b84"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"DAP\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/cps/ClassLoadingStrategy.kt",
      "language": "kotlin",
      "line": 28,
      "offset": 9,
      "length": 3,
      "code": {
        "startLine": 26,
        "length": 3,
        "offset": 66,
        "surroundingCode": "\n    /** dependencies -> application(parent) -> Plugin */\n    val DAP = ClassLoadingStrategy(listOf(Source.DEPENDENCIES, Source.APPLICATION, Source.PLUGIN))\n\n    /** dependencies -> Plugin -> application(parent) */"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "331761b9bce8b11317af15ca23d312f9198c24535914803aa9261aa9cc61c2a0"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"DPA\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/cps/ClassLoadingStrategy.kt",
      "language": "kotlin",
      "line": 31,
      "offset": 9,
      "length": 3,
      "code": {
        "startLine": 29,
        "length": 3,
        "offset": 66,
        "surroundingCode": "\n    /** dependencies -> Plugin -> application(parent) */\n    val DPA = ClassLoadingStrategy(listOf(Source.DEPENDENCIES, Source.PLUGIN, Source.APPLICATION))\n\n    /** Plugin -> dependencies -> application(parent) */"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "877ea1eda2c80f467393be08a4975b983b6342274e37620fceed952e3644b56d"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"PAD\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/cps/ClassLoadingStrategy.kt",
      "language": "kotlin",
      "line": 25,
      "offset": 9,
      "length": 3,
      "code": {
        "startLine": 23,
        "length": 3,
        "offset": 66,
        "surroundingCode": "\n    /** Plugin -> application(parent) -> dependencies */\n    val PAD = ClassLoadingStrategy(listOf(Source.PLUGIN, Source.APPLICATION, Source.DEPENDENCIES))\n\n    /** dependencies -> application(parent) -> Plugin */"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "8f34f019b01e59c78d0440e6335bc775b314e72ff43858de35173daf62fce814"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"ADP\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/cps/ClassLoadingStrategy.kt",
      "language": "kotlin",
      "line": 22,
      "offset": 9,
      "length": 3,
      "code": {
        "startLine": 20,
        "length": 3,
        "offset": 66,
        "surroundingCode": "\n    /** application(parent) -> dependencies -> Plugin */\n    val ADP = ClassLoadingStrategy(listOf(Source.APPLICATION, Source.DEPENDENCIES, Source.PLUGIN))\n\n    /** Plugin -> application(parent) -> dependencies */"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "f5a68453236435b6e86034816393efdc1649960beccdfa43d2ae40213a514b55"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"isInternetAvailable\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/common/frontend/utils/Network.kt",
      "language": "kotlin",
      "line": 22,
      "offset": 12,
      "length": 19,
      "code": {
        "startLine": 20,
        "length": 19,
        "offset": 47,
        "surroundingCode": "val ktorHttpClient = HttpClient {}\n\nactual fun isInternetAvailable(): Boolean {\n  return runBlocking {\n    try {"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "8314db396a16877b52547e01c466a381e3793569d4f5c893050aa9d9eef91649"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"loadSvgPainter\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/common/frontend/utils/Network.kt",
      "language": "kotlin",
      "line": 56,
      "offset": 13,
      "length": 14,
      "code": {
        "startLine": 54,
        "length": 14,
        "offset": 53,
        "surroundingCode": "  urlStream(url).use(::loadImageBitmap)\n\nsuspend fun loadSvgPainter(\n  url: String,\n  density: Density,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "294b8f38f76607f3c4b6bbdcb01221a5d3b0889d8bd9cd0fd3e9ec9ccb008a8d"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"loadXmlImageVector\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/common/frontend/utils/Network.kt",
      "language": "kotlin",
      "line": 62,
      "offset": 13,
      "length": 18,
      "code": {
        "startLine": 60,
        "length": 18,
        "offset": 66,
        "surroundingCode": "  urlStream(url).use { loadSvgPainter(it, density) }\n\nsuspend fun loadXmlImageVector(\n  url: String,\n  density: Density,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "fd5cc1a2abd71780779cce59fa560b4c0b6760ccf73b7d52fe391a3402a26bc5"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Constructor is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/com/mcxross/cohesive/cps/JarPluginRepository.kt",
      "language": "kotlin",
      "line": 8,
      "offset": 3,
      "length": 11,
      "code": {
        "startLine": 6,
        "length": 11,
        "offset": 112,
        "surroundingCode": "class JarPluginRepository(pluginsRoots: List<Path>) :\n  BasePluginRepository(pluginsRoots, JarFileFilter()) {\n  constructor(vararg pluginsRoots: Path) : this(listOf<Path>(*pluginsRoots))\n}\n"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "74f0ee2c6750af5411348e436b6f7ea485c851805e0edaad783ee58636f1c064"
}]}