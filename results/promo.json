{"version":"3","listProblem":[{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused import directive",
  "severity": "High",
  "comment": "Unused import directive",
  "detailsInfo": "Reports redundant `import` statements.\n\nDefault and unused imports can be safely removed.\n\n**Example:**\n\n\n      import kotlin.*\n      import kotlin.collections.*\n      import kotlin.comparisons.*\n      import kotlin.io.*\n      import kotlin.ranges.*\n      import kotlin.sequences.*\n      import kotlin.text.*\n\n      // jvm specific\n      import java.lang.*\n      import kotlin.jvm.*\n\n      // js specific\n      import kotlin.js.*\n\n      import java.io.* // this import is unused and could be removed\n      import java.util.*\n\n      fun foo(list: ArrayList<String>) {\n          list.add(\"\")\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/common/frontend/openapi/ui/UI.kt",
      "language": "kotlin",
      "line": 4,
      "offset": 1,
      "length": 45,
      "code": {
        "startLine": 2,
        "length": 45,
        "offset": 44,
        "surroundingCode": "\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.window.WindowScope\n\ninterface UI {"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "KotlinUnusedImport"
  },
  "hash": "97a5b3c265ef4c3b6615d2208c290a5ec2f8e5dc9dd4bf763fcfa339524ecca4"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'Link' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/commonMain/kotlin/com/mcxross/cohesive/common/frontend/ui/widget/md/markup/Link.kt",
      "language": "kotlin",
      "line": 13,
      "offset": 5,
      "length": 4,
      "code": {
        "startLine": 11,
        "length": 4,
        "offset": 17,
        "surroundingCode": "\n@Composable\nfun Link(\n    text: String,\n    link: String,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.commonMain",
    "inspectionName": "FunctionName"
  },
  "hash": "51e8e9ca4acc1e3cb46ead5f9882c0e4f3e4b8ae1a4272307803693505e14c5b"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'ResizablePanel' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/commonMain/kotlin/com.mcxross.cohesive.mellow/ResizablePanel.kt",
      "language": "kotlin",
      "line": 34,
      "offset": 5,
      "length": 14,
      "code": {
        "startLine": 32,
        "length": 14,
        "offset": 17,
        "surroundingCode": "\n@Composable\nfun ResizablePanel(\n    modifier: Modifier,\n    state: PanelState,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.commonMain",
    "inspectionName": "FunctionName"
  },
  "hash": "e9363d8b25a6ebc51791a9b265b322648606b7143d21f1691931497f48c2ff85"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'EditorComposite' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/commonMain/kotlin/com.mcxross.cohesive.mellow/EditorComposite.kt",
      "language": "kotlin",
      "line": 18,
      "offset": 5,
      "length": 15,
      "code": {
        "startLine": 16,
        "length": 15,
        "offset": 17,
        "surroundingCode": "\n@Composable\nfun EditorComposite(\n    text: String = \"Project\",\n    file: File,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.commonMain",
    "inspectionName": "FunctionName"
  },
  "hash": "a532845009b1ac5e1e222bc4d035cdf870ca85c3fea96be4f24bee8dbbd55426"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant nullable return type",
  "severity": "High",
  "comment": "'postVisitDirectory' always returns non-null type",
  "detailsInfo": "Reports functions and variables with nullable return type which never return or become `null`.\n\n**Example:**\n\n\n      fun greeting(user: String): String? = \"Hello, $user!\"\n\nAfter the quick-fix is applied:\n\n\n      fun greeting(user: String): String = \"Hello, $user!\"\n",
  "sources": [
    {
      "type": "file",
      "path": "cps/src/main/kotlin/com/mcxross/cohesive/cps/utils/FileUtils.kt",
      "language": "kotlin",
      "line": 68,
      "offset": 92,
      "length": 1,
      "code": {
        "startLine": 66,
        "length": 1,
        "offset": 132,
        "surroundingCode": "\n            @Throws(IOException::class)\n            override fun postVisitDirectory(dir: Path?, exc: IOException?): FileVisitResult? {\n                dir?.let { Files.delete(it) }\n                return FileVisitResult.CONTINUE"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cps.main",
    "inspectionName": "RedundantNullableReturnType"
  },
  "hash": "4e41c3e917b573a962e648a338759e78f439cd01dbdb4e81b396b4d2a95d481d"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant nullable return type",
  "severity": "High",
  "comment": "'visitFile' always returns non-null type",
  "detailsInfo": "Reports functions and variables with nullable return type which never return or become `null`.\n\n**Example:**\n\n\n      fun greeting(user: String): String? = \"Hello, $user!\"\n\nAfter the quick-fix is applied:\n\n\n      fun greeting(user: String): String = \"Hello, $user!\"\n",
  "sources": [
    {
      "type": "file",
      "path": "cps/src/main/kotlin/com/mcxross/cohesive/cps/utils/FileUtils.kt",
      "language": "kotlin",
      "line": 60,
      "offset": 94,
      "length": 1,
      "code": {
        "startLine": 58,
        "length": 1,
        "offset": 204,
        "surroundingCode": "        Files.walkFileTree(path, object : SimpleFileVisitor<Path?>() {\n            @Throws(IOException::class)\n            override fun visitFile(file: Path?, attrs: BasicFileAttributes?): FileVisitResult? {\n                if (!attrs!!.isSymbolicLink) {\n                    path.let { Files.delete(it) }"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cps.main",
    "inspectionName": "RedundantNullableReturnType"
  },
  "hash": "9c65e4c620a5682ef43f5bd80a1c0007c483aee8f570642bb9e7e7849d504442"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Replace empty class body",
  "severity": "Info",
  "comment": "Redundant empty class body",
  "detailsInfo": "Reports declarations of classes and objects with an empty body.\n\nUse the 'Remove redundant empty class body' quick-fix to clean up the code.\n\n**Examples:**\n\n\n      class EmptyA() {} // <== empty body\n\n      class EmptyB {\n          companion object {} // <== empty body\n      }\n\n      fun emptyC() {\n         object {} // <== anonymous object, it's ok (not reported)\n      }\n\nAfter the quick fix is applied:\n\n\n      class EmptyA()\n\n      class EmptyB {\n          companion object\n      }\n\n      fun emptyC() {\n         object {}\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "common/src/commonMain/kotlin/com/mcxross/cohesive/common/frontend/model/Context.kt",
      "language": "kotlin",
      "line": 3,
      "offset": 22,
      "length": 3,
      "code": {
        "startLine": 1,
        "length": 3,
        "offset": 73,
        "surroundingCode": "package com.mcxross.cohesive.common.frontend.model\n\nexpect class Context {\n}"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.commonMain",
    "inspectionName": "RemoveEmptyClassBody"
  },
  "hash": "a2af166f5321ba18dc82cc06000c23ac0f661d99d02aa52df0ae3b1e232f9916"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant empty primary constructor",
  "severity": "Moderate",
  "comment": "Remove empty primary constructor",
  "detailsInfo": "Reports empty primary constructors when they are implicitly available anyway.\n\n\nA primary constructor is redundant and can be safely omitted when it does not have any annotations or visibility modifiers.\nUse the 'Remove empty primary constructor' quick-fix to clean up the code.\n\n**Examples:**\n\n\n      class MyClassA constructor() //  redundant, can be replaced with 'class MyClassA'\n\n      annotation class MyAnnotation\n      class MyClassB @MyAnnotation constructor() //  required because of annotation\n\n      class MyClassC private constructor() // required because of visibility modifier\n",
  "sources": [
    {
      "type": "file",
      "path": "cps/src/main/kotlin/com/mcxross/cohesive/cps/DependencyResolver.kt",
      "language": "kotlin",
      "line": 230,
      "offset": 36,
      "length": 2,
      "code": {
        "startLine": 228,
        "length": 2,
        "offset": 104,
        "surroundingCode": "     * It will be thrown if a cyclic dependency is detected.\n     */\n    class CyclicDependencyException() : PluginRuntimeException(\"Cyclic dependencies\")\n\n    /**"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cps.main",
    "inspectionName": "RemoveEmptyPrimaryConstructor"
  },
  "hash": "c31573f776c40a2102fc55e8f826af6030bfce0a7d8e01d47ee3f8dff11337e6"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "'protected' visibility is effectively 'private' in a final class",
  "severity": "Moderate",
  "comment": "'protected' visibility is effectively 'private' in a final class",
  "detailsInfo": "Reports `protected` visibility used inside of a `final` class. In such cases `protected` members are accessible only in the class itself, so they are effectively `private`.\n\n**Example:**\n\n\n      class FinalClass {\n          protected fun foo() {}\n      }\n\nAfter the quick-fix is applied:\n\n\n      class FinalClass {\n          private fun foo() {}\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "cps/src/main/kotlin/com/mcxross/cohesive/cps/PluginClassLoader.kt",
      "language": "kotlin",
      "line": 163,
      "offset": 5,
      "length": 9,
      "code": {
        "startLine": 161,
        "length": 9,
        "offset": 11,
        "surroundingCode": "    }\n\n    protected fun loadClassFromDependencies(className: String?): Class<*>? {\n        Log.v { \"Search in dependencies for class $className\" }\n        val dependencies: List<PluginDependency> = pluginDescriptor.dependencies!!"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cps.main",
    "inspectionName": "ProtectedInFinal"
  },
  "hash": "51a54f52c235f1d7f186277b2c6c0f48ade79cef59d12e9869b6e7f3c2ea94b5"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "'protected' visibility is effectively 'private' in a final class",
  "severity": "Moderate",
  "comment": "'protected' visibility is effectively 'private' in a final class",
  "detailsInfo": "Reports `protected` visibility used inside of a `final` class. In such cases `protected` members are accessible only in the class itself, so they are effectively `private`.\n\n**Example:**\n\n\n      class FinalClass {\n          protected fun foo() {}\n      }\n\nAfter the quick-fix is applied:\n\n\n      class FinalClass {\n          private fun foo() {}\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "cps/src/main/kotlin/com/mcxross/cohesive/cps/PluginClassLoader.kt",
      "language": "kotlin",
      "line": 201,
      "offset": 5,
      "length": 9,
      "code": {
        "startLine": 199,
        "length": 9,
        "offset": 37,
        "surroundingCode": "\n    @Throws(IOException::class)\n    protected fun findResourcesFromDependencies(name: String?): Collection<URL> {\n        Log.v { \"Search in dependencies for resources $name\" }\n        val results: MutableList<URL> = ArrayList()"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cps.main",
    "inspectionName": "ProtectedInFinal"
  },
  "hash": "7cbab5537693ec357bf00b5e0aeb8a54582513c5a96dfeefc968fea88589363f"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "'protected' visibility is effectively 'private' in a final class",
  "severity": "Moderate",
  "comment": "'protected' visibility is effectively 'private' in a final class",
  "detailsInfo": "Reports `protected` visibility used inside of a `final` class. In such cases `protected` members are accessible only in the class itself, so they are effectively `private`.\n\n**Example:**\n\n\n      class FinalClass {\n          protected fun foo() {}\n      }\n\nAfter the quick-fix is applied:\n\n\n      class FinalClass {\n          private fun foo() {}\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "cps/src/main/kotlin/com/mcxross/cohesive/cps/PluginClassLoader.kt",
      "language": "kotlin",
      "line": 182,
      "offset": 5,
      "length": 9,
      "code": {
        "startLine": 180,
        "length": 9,
        "offset": 11,
        "surroundingCode": "    }\n\n    protected fun findResourceFromDependencies(name: String?): URL? {\n        Log.v { \"Search in dependencies for resource $name\" }\n        val dependencies: List<PluginDependency> = pluginDescriptor.dependencies!!"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cps.main",
    "inspectionName": "ProtectedInFinal"
  },
  "hash": "1241ab5dfac7b2a611adaa38771748bc665cdc8aaa89cdfc1125b69c6e8e1431"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant constructor body",
  "severity": "Moderate",
  "comment": "Remove empty constructor body",
  "detailsInfo": "Reports empty bodies of secondary constructors.",
  "sources": [
    {
      "type": "file",
      "path": "cps/src/main/kotlin/com/mcxross/cohesive/cps/JarPluginRepository.kt",
      "language": "kotlin",
      "line": 8,
      "offset": 80,
      "length": 2,
      "code": {
        "startLine": 6,
        "length": 2,
        "offset": 188,
        "surroundingCode": "\nclass JarPluginRepository(pluginsRoots: List<Path>) : BasePluginRepository(pluginsRoots, JarFileFilter()) {\n    constructor(vararg pluginsRoots: Path) : this(listOf<Path>(*pluginsRoots)) {}\n}"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cps.main",
    "inspectionName": "RemoveEmptySecondaryConstructorBody"
  },
  "hash": "376089aa010e62242b3147d8489bcb5b34d1cd1ebee5937078ac70cb114dd9a1"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant constructor body",
  "severity": "Moderate",
  "comment": "Remove empty constructor body",
  "detailsInfo": "Reports empty bodies of secondary constructors.",
  "sources": [
    {
      "type": "file",
      "path": "cps/src/main/kotlin/com/mcxross/cohesive/cps/BasePluginRepository.kt",
      "language": "kotlin",
      "line": 21,
      "offset": 80,
      "length": 2,
      "code": {
        "startLine": 19,
        "length": 2,
        "offset": 182,
        "surroundingCode": "     var comparator: Comparator<File>? = Comparator.comparingLong { obj: File -> obj.lastModified() }\n\n    constructor(vararg pluginsRoots: Path) : this(listOf<Path>(*pluginsRoots)) {}\n\n    override val pluginPaths: List<Path>"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cps.main",
    "inspectionName": "RemoveEmptySecondaryConstructorBody"
  },
  "hash": "01274633b13b1e79b3d31095b86c6454e9bc37f7a7929818d62676ead221c414"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"TextPreparedSelection\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/foundation/text/selection/TextPreparedSelection.kt",
      "language": "kotlin",
      "line": 349,
      "offset": 16,
      "length": 21,
      "code": {
        "startLine": 347,
        "length": 21,
        "offset": 18,
        "surroundingCode": "}\n\ninternal class TextPreparedSelection(\n    originalText: AnnotatedString,\n    originalSelection: TextRange,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "81fa623971437cef4c0c2aa51ad87af2eb7cf4a1c857e6e034beb36411a2fbb7"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"isFile\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/common/frontend/utils/IO.kt",
      "language": "kotlin",
      "line": 18,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 16,
        "length": 6,
        "offset": 7,
        "surroundingCode": "}\n\nfun isFile(path: String): Boolean {\n    return FileSystem.SYSTEM.metadata(path.toPath()).isRegularFile\n}"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "51b8064417b0640141bb6e4bcb6a7f2f0573c619fc613bf6d041f1dd3d554be8"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"removeFileFilter\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cps/src/main/kotlin/com/mcxross/cohesive/cps/utils/AndFileFilter.kt",
      "language": "kotlin",
      "line": 22,
      "offset": 9,
      "length": 16,
      "code": {
        "startLine": 20,
        "length": 16,
        "offset": 10,
        "surroundingCode": "\n\n    fun removeFileFilter(fileFilter: FileFilter): Boolean {\n        return fileFilters.remove(fileFilter)\n    }"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cps.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "62cc2b87cb70fcad0adda23586ce0e3fba9ad5f6c6a80417860a1fa27826b3a2"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"UriConverter\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/UriConverter.kt",
      "language": "kotlin",
      "line": 8,
      "offset": 14,
      "length": 12,
      "code": {
        "startLine": 6,
        "length": 12,
        "offset": 41,
        "surroundingCode": "import java.nio.file.Files\n\nactual class UriConverter {\n    actual fun toInput(uri: Uri): Input = when {\n        uri.path.startsWith(\"http\") -> TODO(\"unimplemented\")"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "afcbd93399345f1f8ed1f7637a9850478945433df20a132b6da0de74bc9cef6d"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"toInput\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/desktopMain/kotlin/com/mcxross/cohesive/mellow/UriConverter.kt",
      "language": "kotlin",
      "line": 9,
      "offset": 16,
      "length": 7,
      "code": {
        "startLine": 7,
        "length": 7,
        "offset": 44,
        "surroundingCode": "\nactual class UriConverter {\n    actual fun toInput(uri: Uri): Input = when {\n        uri.path.startsWith(\"http\") -> TODO(\"unimplemented\")\n        else -> File(uri.path).inputStream().asInput()"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "e0447930575125987310e3c33b9be5d401387b1f6b7b3657a184639c64c75aaf"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"App\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/commonMain/kotlin/com/mcxross/cohesive/common/App.kt",
      "language": "kotlin",
      "line": 7,
      "offset": 5,
      "length": 3,
      "code": {
        "startLine": 5,
        "length": 3,
        "offset": 17,
        "surroundingCode": "\n@Composable\nfun App() {\n\n    Text(\"Cohesive\")"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "e58dbf1d48c77c99de1ec7211dbfc1668c5103975700c381d98433f58e16e99d"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"rubikFont1\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "common/src/commonMain/kotlin/com.mcxross.cohesive.mellow/Fonts.kt",
      "language": "kotlin",
      "line": 99,
      "offset": 9,
      "length": 10,
      "code": {
        "startLine": 97,
        "length": 10,
        "offset": 25,
        "surroundingCode": "\n    @Composable\n    fun rubikFont1() = FontFamily (\n        Font(\n            \"Rubik\","
      }
    }
  ],
  "attributes": {
    "module": "cohesive.common.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "5e6b820abf58d38327f645d664fe075823f462d4b17e9dcf69be3c48fbb8a887"
}]}