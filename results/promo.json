{"version":"3","listProblem":[{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'CursorHandle' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/mellow/foundation/text/DesktopCursorHandle.kt",
      "language": "kotlin",
      "line": 25,
      "offset": 14,
      "length": 12,
      "code": {
        "startLine": 23,
        "length": 12,
        "offset": 55,
        "surroundingCode": "@Composable\n@Suppress(\"UNUSED_PARAMETER\")\ninternal fun CursorHandle(\n  handlePosition: Offset,\n  modifier: Modifier,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "5eef64f7e702e8cdd1def1130465a6d7bd11f2f44bd6895fafb700520173245c"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'Compose' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/common/frontend/api/ui/UI.kt",
      "language": "kotlin",
      "line": 7,
      "offset": 7,
      "length": 7,
      "code": {
        "startLine": 5,
        "length": 7,
        "offset": 35,
        "surroundingCode": "interface UI {\n  @Composable\n  fun Compose()\n}\n"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "2461df2a21055782451bdbbbda6cb23b012190434667b0d89a7d0a049952195a"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'ItalicText' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/commonMain/kotlin/xyz/mcxross/cohesive/common/frontend/impl/ui/widget/md/markup/ItalicText.kt",
      "language": "kotlin",
      "line": 12,
      "offset": 5,
      "length": 10,
      "code": {
        "startLine": 10,
        "length": 10,
        "offset": 17,
        "surroundingCode": "\n@Composable\nfun ItalicText(\n  text: String,\n  color: Color,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.commonMain",
    "inspectionName": "FunctionName"
  },
  "hash": "a163302be0d92cd3b1262315283a1dacd7becd68b6dfcbf90466a55ae74e7e97"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'Content' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/mellow/Dialog.kt",
      "language": "kotlin",
      "line": 30,
      "offset": 13,
      "length": 7,
      "code": {
        "startLine": 28,
        "length": 7,
        "offset": 25,
        "surroundingCode": "\n@Composable\nprivate fun Content(\n  modifier: Modifier,\n  content: @Composable () -> Unit,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "333395380d460792a6fd4aa8c307a3a0c4e6704f98aef283834f712c28e2a472"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'Dialog' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/mellow/Dialog.kt",
      "language": "kotlin",
      "line": 94,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 92,
        "length": 6,
        "offset": 17,
        "surroundingCode": "\n@Composable\nfun Dialog(\n  onClose: () -> Unit,\n  text: String,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "5684a26db98c63dd614e4196b12144c126d25f85564d5bfadd1f21e0e2c07e95"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'BottomBar' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/mellow/Dialog.kt",
      "language": "kotlin",
      "line": 40,
      "offset": 13,
      "length": 9,
      "code": {
        "startLine": 38,
        "length": 9,
        "offset": 25,
        "surroundingCode": "\n@Composable\nprivate fun BottomBar(\n  modifier: Modifier,\n  negativeText: String,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "FunctionName"
  },
  "hash": "4d9ad92f270884836bd859aef274b6c640ec192e2205abbfcbe7d38bbf717ed9"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'Markdown' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/commonMain/kotlin/xyz/mcxross/cohesive/common/frontend/impl/ui/widget/Markdown.kt",
      "language": "kotlin",
      "line": 34,
      "offset": 5,
      "length": 8,
      "code": {
        "startLine": 32,
        "length": 8,
        "offset": 17,
        "surroundingCode": "\n@Composable\nfun Markdown(\n  modifier: Modifier,\n  content: String,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.commonMain",
    "inspectionName": "FunctionName"
  },
  "hash": "b2326b93761f42e6ce1afe8f3c0265f68d2aefb66b2e41ae1e6a32f113607cae"
},{
  "tool": "Code Inspection",
  "category": "Naming conventions",
  "type": "Function naming convention",
  "severity": "Moderate",
  "comment": "Function name 'RenderComponent' should start with a lowercase letter",
  "detailsInfo": "Reports function names that do not follow the recommended naming conventions.\n\n**Example:**\n\n\n      fun Foo() {}\n\nTo fix the problem change the name of the function to match the recommended naming conventions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/commonMain/kotlin/xyz/mcxross/cohesive/common/frontend/impl/ui/widget/Markdown.kt",
      "language": "kotlin",
      "line": 81,
      "offset": 13,
      "length": 15,
      "code": {
        "startLine": 79,
        "length": 15,
        "offset": 25,
        "surroundingCode": "\n@Composable\nprivate fun RenderComponent(\n  item: Element,\n  config: MarkdownConfig,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.commonMain",
    "inspectionName": "FunctionName"
  },
  "hash": "5bc0e55b1a29fdd92230665c378968db62cfdfb62b74bcf7e5bafac04734622d"
},{
  "tool": "Code Inspection",
  "category": "Probable bugs",
  "type": "Unresolved reference in KDoc",
  "severity": "High",
  "comment": "Cannot resolve symbol 'compare'",
  "detailsInfo": "Reports unresolved references in KDoc comments.\n\n**Example:**\n\n\n      /**\n       * [unresolvedLink]\n       */\n      fun foo() {}\n\nTo fix the problem make the link valid.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/cps/VersionManager.kt",
      "language": "kotlin",
      "line": 15,
      "offset": 58,
      "length": 7,
      "code": {
        "startLine": 13,
        "length": 7,
        "offset": 64,
        "surroundingCode": "\n  /**\n   * Compare two versions. It's similar with [Comparator.compare].\n   *\n   * @param v1"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "KDocUnresolvedReference"
  },
  "hash": "20fed2db0d737ad049736b4e2426882eb37eb099bfb88fc9bbe12bb4a2c81733"
},{
  "tool": "Code Inspection",
  "category": "Probable bugs",
  "type": "Unresolved reference in KDoc",
  "severity": "High",
  "comment": "Cannot resolve symbol 'tunjid'",
  "detailsInfo": "Reports unresolved references in KDoc comments.\n\n**Example:**\n\n\n      /**\n       * [unresolvedLink]\n       */\n      fun foo() {}\n\nTo fix the problem make the link valid.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/commonMain/kotlin/xyz/mcxross/cohesive/mellow/DropTarget.kt",
      "language": "kotlin",
      "line": 12,
      "offset": 22,
      "length": 6,
      "code": {
        "startLine": 10,
        "length": 6,
        "offset": 64,
        "surroundingCode": " * Interface for receiving drag events.\n *\n * Original Author: [tunjid]\n *\n * Code attributed to [tunjid] as the original author."
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.commonMain",
    "inspectionName": "KDocUnresolvedReference"
  },
  "hash": "a149c9ac7adf8a77eb36bb675be3604aaa20ae61af87cf4a454356cfdc0eba09"
},{
  "tool": "Code Inspection",
  "category": "Probable bugs",
  "type": "Unresolved reference in KDoc",
  "severity": "High",
  "comment": "Cannot resolve symbol 'tunjid'",
  "detailsInfo": "Reports unresolved references in KDoc comments.\n\n**Example:**\n\n\n      /**\n       * [unresolvedLink]\n       */\n      fun foo() {}\n\nTo fix the problem make the link valid.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/commonMain/kotlin/xyz/mcxross/cohesive/mellow/DropTarget.kt",
      "language": "kotlin",
      "line": 14,
      "offset": 24,
      "length": 6,
      "code": {
        "startLine": 12,
        "length": 6,
        "offset": 55,
        "surroundingCode": " * Original Author: [tunjid]\n *\n * Code attributed to [tunjid] as the original author.\n */\ninterface DropTarget {"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.commonMain",
    "inspectionName": "KDocUnresolvedReference"
  },
  "hash": "d2cbc492df0d2cf1255d983a6e176235ce63df87ee3b1f15e3c5fb0e078af370"
},{
  "tool": "Code Inspection",
  "category": "Probable bugs",
  "type": "Unresolved reference in KDoc",
  "severity": "High",
  "comment": "Cannot resolve symbol 'JarPluginManager'",
  "detailsInfo": "Reports unresolved references in KDoc comments.\n\n**Example:**\n\n\n      /**\n       * [unresolvedLink]\n       */\n      fun foo() {}\n\nTo fix the problem make the link valid.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/cps/DefaultPluginManager.kt",
      "language": "kotlin",
      "line": 18,
      "offset": 51,
      "length": 16,
      "code": {
        "startLine": 16,
        "length": 16,
        "offset": 113,
        "surroundingCode": " * Default implementation of the [PluginManager] interface.\n *\n * In essence, it is a [ZipPluginManager] plus a [JarPluginManager]. So, it can load plugins from\n * jar and zip, simultaneous.\n */"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "KDocUnresolvedReference"
  },
  "hash": "5f80108f6b08b1ee50e2a5308cbaa42cce059010f2266b5fce176b7f49a0de38"
},{
  "tool": "Code Inspection",
  "category": "Probable bugs",
  "type": "Unresolved reference in KDoc",
  "severity": "High",
  "comment": "Cannot resolve symbol 'tunjid'",
  "detailsInfo": "Reports unresolved references in KDoc comments.\n\n**Example:**\n\n\n      /**\n       * [unresolvedLink]\n       */\n      fun foo() {}\n\nTo fix the problem make the link valid.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/commonMain/kotlin/xyz/mcxross/cohesive/mellow/DropTargetContainer.kt",
      "language": "kotlin",
      "line": 14,
      "offset": 22,
      "length": 6,
      "code": {
        "startLine": 12,
        "length": 6,
        "offset": 26,
        "surroundingCode": "\n/**\n * Original Author: [tunjid]\n *\n * Code attributed to [tunjid] as the original author."
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.commonMain",
    "inspectionName": "KDocUnresolvedReference"
  },
  "hash": "ad011a41442abaf9ec8a5da35c0032d00012eb956e7894be40ed6f03635dbaa1"
},{
  "tool": "Code Inspection",
  "category": "Probable bugs",
  "type": "Unresolved reference in KDoc",
  "severity": "High",
  "comment": "Cannot resolve symbol 'tunjid'",
  "detailsInfo": "Reports unresolved references in KDoc comments.\n\n**Example:**\n\n\n      /**\n       * [unresolvedLink]\n       */\n      fun foo() {}\n\nTo fix the problem make the link valid.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/commonMain/kotlin/xyz/mcxross/cohesive/mellow/DropTargetContainer.kt",
      "language": "kotlin",
      "line": 16,
      "offset": 24,
      "length": 6,
      "code": {
        "startLine": 14,
        "length": 6,
        "offset": 55,
        "surroundingCode": " * Original Author: [tunjid]\n *\n * Code attributed to [tunjid] as the original author.\n */\ninternal val ModifierLocalDropTargetParent = modifierLocalOf<DropTargetParent?> { null }"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.commonMain",
    "inspectionName": "KDocUnresolvedReference"
  },
  "hash": "c5897256e181ec34d4c67b23f9ca81619db5d6e210f60651456437d875fc095f"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Remove unnecessary parentheses",
  "severity": "Moderate",
  "comment": "Parentheses should be removed",
  "detailsInfo": "Reports redundant empty parentheses in annotation entries.\n\nUse the 'Remove unnecessary parentheses' quick-fix to clean up the code.\n\n**Examples:**\n\n\n      annotation class MyAnnotationA\n      annotation class MyAnnotationB(val x: Int)\n      annotation class MyAnnotationC(val x: Int = 10) // default value is present\n\n      @MyAnnotationA() // <== parentheses are redundant\n      fun testA() {\n      }\n\n      @MyAnnotationB() // <== missing argument, parentheses are required\n      fun testB() {\n      }\n\n      @MyAnnotationC() // <== parentheses are redundant\n      fun testC() {\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/mellow/Button.kt",
      "language": "kotlin",
      "line": 42,
      "offset": 23,
      "length": 2,
      "code": {
        "startLine": 40,
        "length": 2,
        "offset": 65,
        "surroundingCode": "  width: Dp = 54.dp,\n  height: Dp = 30.dp,\n  content: @Composable() (BoxScope.() -> Unit)? = null,\n) {\n  var active by remember { mutableStateOf(false) }"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "RemoveEmptyParenthesesFromAnnotationEntry"
  },
  "hash": "b848ba9a5ce7f34bab4ec64aa7a63330a2d1a6922c43e46e4b3bd32db7216607"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused receiver parameter",
  "severity": "High",
  "comment": "Receiver parameter is never used",
  "detailsInfo": "Reports receiver parameter of extension functions and properties that is not used.\n\n**Remove redundant receiver parameter** can be used to amend the code automatically.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/commonMain/kotlin/xyz/mcxross/cohesive/mellow/icon/regular/Wallet.kt",
      "language": "kotlin",
      "line": 8,
      "offset": 12,
      "length": 13,
      "code": {
        "startLine": 6,
        "length": 13,
        "offset": 63,
        "surroundingCode": "import xyz.mcxross.cohesive.mellow.icon.mellowPath\n\npublic val Icons.Regular.Wallet: ImageVector\n  get() {\n    if (xyz.mcxross.cohesive.mellow.icon.regular._wallet != null) {"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.commonMain",
    "inspectionName": "UnusedReceiverParameter"
  },
  "hash": "0e663cd5d49769958dad1fb5667d65d1983b23dcb8e12bec16dd45f03d133494"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Function 'createStackElementTag' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/common/utils/DebugAntilog.kt",
      "language": "kotlin",
      "line": 95,
      "offset": 3,
      "length": 8,
      "code": {
        "startLine": 93,
        "length": 8,
        "offset": 7,
        "surroundingCode": "  }\n\n  internal fun createStackElementTag(className: String): String {\n    var tag = className\n    val m = anonymousClass.matcher(tag)"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "2bd3e4bd231101490dc9caa359c97e5ec40f281c38a2def4a4618dc2d359cc38"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Function 'buildLog' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/common/utils/DebugAntilog.kt",
      "language": "kotlin",
      "line": 81,
      "offset": 3,
      "length": 8,
      "code": {
        "startLine": 79,
        "length": 8,
        "offset": 7,
        "surroundingCode": "  }\n\n  internal fun buildLog(priority: LogLevel, tag: String?, message: String?): String {\n    return \"${tagMap[priority]} ${tag ?: performTag(defaultTag)} - $message\"\n  }"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "987b5d87ec9ffc75cdc7087371612a62ffef851ab14e037e2d72baf38f4347a5"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'pluginsMap' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/cps/AbstractPluginManager.kt",
      "language": "kotlin",
      "line": 40,
      "offset": 3,
      "length": 9,
      "code": {
        "startLine": 38,
        "length": 9,
        "offset": 90,
        "surroundingCode": "\n  /** A map of Plugins this manager is responsible for (the key is the 'pluginId'). */\n  protected var pluginsMap: MutableMap<String?, PluginWrapper> = HashMap<String?, PluginWrapper>()\n\n  /** Retrieve all plugins. */"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "450530edf0b72230499479d1d9ff6e41d7dbc043a69591108bfb2dc11bfba797"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Function 'idForPath' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/cps/AbstractPluginManager.kt",
      "language": "kotlin",
      "line": 701,
      "offset": 3,
      "length": 9,
      "code": {
        "startLine": 699,
        "length": 9,
        "offset": 56,
        "surroundingCode": "   * @return id of Plugin or null if not loaded\n   */\n  protected fun idForPath(pluginPath: Path): String? {\n    for (plugin: PluginWrapper in pluginsMap.values) {\n      if ((plugin.pluginPath == pluginPath)) {"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "92b12e8f89f4a08e2cf4aa277eae2ca49ae4a1b729ae9a2c8c0957bfc594f25a"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Function 'isPluginDisabled' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/cps/AbstractPluginManager.kt",
      "language": "kotlin",
      "line": 567,
      "offset": 3,
      "length": 9,
      "code": {
        "startLine": 565,
        "length": 9,
        "offset": 7,
        "surroundingCode": "  }\n\n  protected fun isPluginDisabled(pluginId: String): Boolean {\n    return pluginStatusProvider.isPluginDisabled(pluginId)\n  }"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "ae8a7c2e74551871b424e059863b0fc27612f751eed2da6a7a05c116c5c69e99"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Function 'createPluginsRoot' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/cps/AbstractPluginManager.kt",
      "language": "kotlin",
      "line": 525,
      "offset": 3,
      "length": 9,
      "code": {
        "startLine": 523,
        "length": 9,
        "offset": 38,
        "surroundingCode": "   * @return the plugins root\n   */\n  protected fun createPluginsRoot(): List<Path> {\n    var pluginsDir: String? = System.getProperty(PLUGINS_DIR_PROPERTY_NAME)\n    if (!pluginsDir.isNullOrEmpty()) {"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "eacc99250c0238066598fa3abba84fb13e83130bc6f54261b8658d1dd3288e0d"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Function 'stopPlugin' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/cps/AbstractPluginManager.kt",
      "language": "kotlin",
      "line": 344,
      "offset": 3,
      "length": 9,
      "code": {
        "startLine": 342,
        "length": 9,
        "offset": 7,
        "surroundingCode": "  }\n\n  protected fun stopPlugin(pluginId: String, stopDependents: Boolean): PluginState {\n    checkPluginId(pluginId)\n    val pluginWrapper: PluginWrapper = getPlugin(pluginId)"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "7ffc8874ae65144b498a6eb8519b200611c247a59160514a0ed14af178f94e77"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Function 'validatePluginDescriptor' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/cps/AbstractPluginManager.kt",
      "language": "kotlin",
      "line": 716,
      "offset": 3,
      "length": 9,
      "code": {
        "startLine": 714,
        "length": 9,
        "offset": 64,
        "surroundingCode": "   * @throws PluginRuntimeException if validation fails\n   */\n  protected fun validatePluginDescriptor(descriptor: PluginDescriptor) {\n    if (descriptor.pluginId.isEmpty()) {\n      throw PluginRuntimeException(\"Field 'id' cannot be empty\")"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "9508484fb94fddbddafdcb33fb56c0920972d50117407aaa3e2de34aaf5dfd85"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Function 'getExtensionClasses' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/cps/AbstractPluginManager.kt",
      "language": "kotlin",
      "line": 727,
      "offset": 3,
      "length": 9,
      "code": {
        "startLine": 725,
        "length": 9,
        "offset": 7,
        "surroundingCode": "  }\n\n  protected fun <T> getExtensionClasses(\n    extensionsWrapper: List<ExtensionWrapper<T>?>\n  ): List<Class<out T>> {"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "b4aaa4df5953563169564d763e83c5dfa7960554414b9e95b82f3e510ca30815"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'pluginStateListeners' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/cps/AbstractPluginManager.kt",
      "language": "kotlin",
      "line": 59,
      "offset": 3,
      "length": 9,
      "code": {
        "startLine": 57,
        "length": 9,
        "offset": 51,
        "surroundingCode": "\n  /** The registered [PluginStateListener]s. */\n  protected var pluginStateListeners: MutableList<PluginStateListener> = ArrayList()\n\n  /** Cache value for the runtime mode. No need to re-read it because it won't change at runtime. */"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "b855c572f0858c9dcc5f7eb51ec932229c807b2b78faabc77718dd65c9b6f5b6"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Function 'createPluginWrapper' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/cps/AbstractPluginManager.kt",
      "language": "kotlin",
      "line": 683,
      "offset": 3,
      "length": 9,
      "code": {
        "startLine": 681,
        "length": 9,
        "offset": 21,
        "surroundingCode": "   * @return\n   */\n  protected fun createPluginWrapper(\n    pluginDescriptor: PluginDescriptor,\n    pluginPath: Path,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "b98867282ba96eab5a6c4f1c51ebeab80700f3f4fc83550859106599d8c0b45a"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Function 'checkPluginId' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/cps/AbstractPluginManager.kt",
      "language": "kotlin",
      "line": 375,
      "offset": 3,
      "length": 9,
      "code": {
        "startLine": 373,
        "length": 9,
        "offset": 7,
        "surroundingCode": "  }\n\n  protected fun checkPluginId(pluginId: String?) {\n    if (!pluginsMap.containsKey(pluginId)) {\n      throw IllegalArgumentException(String.format(\"Unknown pluginId %s\", pluginId))"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "666a509d94e58268e9437a4c7544552b7cd753650a091e08a83696151186aa1f"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Function 'unloadPlugin' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/cps/AbstractPluginManager.kt",
      "language": "kotlin",
      "line": 215,
      "offset": 3,
      "length": 9,
      "code": {
        "startLine": 213,
        "length": 9,
        "offset": 7,
        "surroundingCode": "  }\n\n  protected fun unloadPlugin(pluginId: String, unloadDependents: Boolean): Boolean {\n    try {\n      if (unloadDependents) {"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "b90e01adf1cf564d7494c023ee78183ba5cc8611305fcc4c762c4269787530ba"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'isExactVersionAllowed' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/cps/AbstractPluginManager.kt",
      "language": "kotlin",
      "line": 94,
      "offset": 7,
      "length": 21,
      "code": {
        "startLine": 92,
        "length": 21,
        "offset": 65,
        "surroundingCode": "   * @param exactVersionAllowed set to true or false\n   */\n  var isExactVersionAllowed: Boolean = false\n  override lateinit var versionManager: VersionManager\n  override val pluginsRoot: Path"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "5cbbafab640fdfeb50350bfa9e07e261ab47063216a456af776a9ecee174e730"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Function 'getExtensions' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/cps/AbstractPluginManager.kt",
      "language": "kotlin",
      "line": 737,
      "offset": 3,
      "length": 9,
      "code": {
        "startLine": 735,
        "length": 9,
        "offset": 7,
        "surroundingCode": "  }\n\n  protected fun <T> getExtensions(extensionsWrapper: List<ExtensionWrapper<T>>): List<T> {\n    val extensions: MutableList<T> = ArrayList()\n    extensionsWrapper.forEach {"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "18c7bad2f0e19d6761e18cdb5263fef196d5b778e874efa53508468485e7624d"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Function 'getPluginLabel' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/cps/AbstractPluginManager.kt",
      "language": "kotlin",
      "line": 723,
      "offset": 3,
      "length": 9,
      "code": {
        "startLine": 721,
        "length": 9,
        "offset": 103,
        "surroundingCode": "\n  /** The Plugin label is used in logging, and it's a string in format `pluginId@pluginVersion`. */\n  protected fun getPluginLabel(pluginDescriptor: PluginDescriptor): String {\n    return pluginDescriptor.pluginId + \"@\" + pluginDescriptor.version\n  }"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "70ccaa846a095fcf2b11d1dc287d83394a0930cad9acd1f8a233e23fdad7683d"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Function 'resolvePlugins' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/cps/AbstractPluginManager.kt",
      "language": "kotlin",
      "line": 571,
      "offset": 3,
      "length": 9,
      "code": {
        "startLine": 569,
        "length": 9,
        "offset": 7,
        "surroundingCode": "  }\n\n  protected fun resolvePlugins() {\n    // retrieves the plugins descriptors\n    val descriptors: MutableList<PluginDescriptor> = ArrayList()"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "e9a78883354226912c42c87b7c3b0ea25f5a39df4ee8a6052ea56ab9d7132f37"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'pluginClassLoaders' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/cps/AbstractPluginManager.kt",
      "language": "kotlin",
      "line": 47,
      "offset": 3,
      "length": 9,
      "code": {
        "startLine": 45,
        "length": 9,
        "offset": 71,
        "surroundingCode": "\n  /** A map of Plugin class loaders (the key is the 'pluginId'). */\n  protected var pluginClassLoaders: MutableMap<String?, ClassLoader> = HashMap()\n\n  /** A list with unresolved plugins (unresolved dependency). */"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "267a113f5705e540865821882a053ff41313cbe1787712b48c849b4eb6e7162b"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Function 'inDegree' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/cps/utils/DirectedGraph.kt",
      "language": "kotlin",
      "line": 77,
      "offset": 7,
      "length": 8,
      "code": {
        "startLine": 75,
        "length": 8,
        "offset": 25,
        "surroundingCode": "   * vertex.\n   */\n  fun inDegree(): MutableMap<V, Int> {\n    val result: MutableMap<V, Int> = HashMap()\n    neighbors.keys.forEach {"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "54691a4060ece47075fbff97497576d5de0f9c078e39c312cbd914b2907d03e2"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Function 'topologicalSort' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/cps/utils/DirectedGraph.kt",
      "language": "kotlin",
      "line": 94,
      "offset": 7,
      "length": 15,
      "code": {
        "startLine": 92,
        "length": 15,
        "offset": 97,
        "surroundingCode": "   * [this](https://en.wikipedia.org/wiki/Topological_sorting) for more information.\n   */\n  fun topologicalSort(): List<V> {\n    val degree = inDegree()\n"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "c02f6503373391ac75a31a2be69822a0e35485069af66d63df6d824fd08b5c11"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Function 'containsVertex' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/cps/utils/DirectedGraph.kt",
      "language": "kotlin",
      "line": 31,
      "offset": 7,
      "length": 14,
      "code": {
        "startLine": 29,
        "length": 14,
        "offset": 47,
        "surroundingCode": "\n  /** True if graph contains vertex. */\n  fun containsVertex(vertex: V): Boolean {\n    return neighbors.containsKey(vertex)\n  }"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "98ffb0654fcfc0bbe9f1fc6b99db99e3fbaf904edb9e86a0deccdf41fc51f05b"
},{
  "tool": "Code Inspection",
  "category": "Probable bugs",
  "type": "Incomplete destructuring declaration",
  "severity": "High",
  "comment": "Incomplete destructuring declaration",
  "detailsInfo": "Reports incomplete destructuring declaration.\n\n**Example:**\n\n\n      data class Person(val name: String, val age: Int)\n      val person = Person(\"\", 0)\n      val (name) = person\n\nThe quick fix completes destructuring declaration with new variables:\n\n\n      data class Person(val name: String, val age: Int)\n      val person = Person(\"\", 0)\n      val (name, age) = person\n",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/mellow/foundation/text/CoreText.kt",
      "language": "kotlin",
      "line": 233,
      "offset": 32,
      "length": 21,
      "code": {
        "startLine": 231,
        "length": 21,
        "offset": 138,
        "surroundingCode": "@Composable\ninternal fun InlineChildren(text: AnnotatedString, inlineContents: List<InlineContentRange>) {\n  inlineContents.fastForEach { (content, start, end) ->\n    Layout(\n      content = { content(text.subSequence(start, end).text) },"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "IncompleteDestructuring"
  },
  "hash": "8fc26bb887a4459105dc46c6fa719b320fd4782a7b32e07c4b6e0e818162027c"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"TERTIARY\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/common/model/PluginType.kt",
      "language": "kotlin",
      "line": 4,
      "offset": 23,
      "length": 8,
      "code": {
        "startLine": 2,
        "length": 8,
        "offset": 47,
        "surroundingCode": "\nenum class PluginType {\n  PRIMARY, SECONDARY, TERTIARY\n}\n"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "0b66ffab3274af90b5e27c218b0fe8f62f0762ac2b6cd6925cb783578fbe95af"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"PluginType\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/common/model/PluginType.kt",
      "language": "kotlin",
      "line": 3,
      "offset": 12,
      "length": 10,
      "code": {
        "startLine": 1,
        "length": 10,
        "offset": 54,
        "surroundingCode": "package xyz.mcxross.cohesive.common.model\n\nenum class PluginType {\n  PRIMARY, SECONDARY, TERTIARY\n}"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "88fd1f35bf047de0b2c810352cbfdd607212bfe79d69785da698f09008332415"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"SECONDARY\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/common/model/PluginType.kt",
      "language": "kotlin",
      "line": 4,
      "offset": 12,
      "length": 9,
      "code": {
        "startLine": 2,
        "length": 9,
        "offset": 36,
        "surroundingCode": "\nenum class PluginType {\n  PRIMARY, SECONDARY, TERTIARY\n}\n"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "58ab43a5c0a82886f7e300f72a5eeaba5a76fd688fd266cf3d9f4e2983b32703"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"PRIMARY\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/common/model/PluginType.kt",
      "language": "kotlin",
      "line": 4,
      "offset": 3,
      "length": 7,
      "code": {
        "startLine": 2,
        "length": 7,
        "offset": 27,
        "surroundingCode": "\nenum class PluginType {\n  PRIMARY, SECONDARY, TERTIARY\n}\n"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "1990050bdff20cfc4d7d656868558eab34266ca8a302cb0e8660106817be366f"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"backgroundDarkLight\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/commonMain/kotlin/xyz/mcxross/cohesive/mellow/MellowTheme.kt",
      "language": "kotlin",
      "line": 30,
      "offset": 9,
      "length": 19,
      "code": {
        "startLine": 28,
        "length": 19,
        "offset": 126,
        "surroundingCode": "    private val backgroundDark: Color = Color(0xFF2B2B2B)\n    private val onBackgroundDark: Color = Color(0xFFA9A9A9)\n    val backgroundDarkLight: Color = Color(0xFF4E5254)\n    private val surfaceDark: Color = Color(0xFF3C3F41)\n    private val onSurfaceDark: Color = Color(0xFFA9A9A9)"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "205d0bcbddf61928132e86b8019cff6c0d146dd6ffee6763fe2b6ac35071d5ff"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"IMAGE_TYPE\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/commonMain/kotlin/xyz/mcxross/cohesive/common/frontend/impl/ui/widget/MarkdownConfig.kt",
      "language": "kotlin",
      "line": 19,
      "offset": 15,
      "length": 10,
      "code": {
        "startLine": 17,
        "length": 10,
        "offset": 57,
        "surroundingCode": "    const val CHECKBOX_COLOR = \"checkbox\"\n\n    const val IMAGE_TYPE = 1\n    const val LINK_TYPE = 2\n  }"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "01758cf31b069cb8b551babb069376fc7ad5736c64b750ab7544173001bc8585"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Type alias \"WindowState\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/common/frontend/utils/StateHolder.kt",
      "language": "kotlin",
      "line": 12,
      "offset": 11,
      "length": 11,
      "code": {
        "startLine": 10,
        "length": 11,
        "offset": 55,
        "surroundingCode": "import xyz.mcxross.cohesive.project.Project\n\ntypealias WindowState = StatesHolder.Window\n\n@Serializable"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "6116c13321d16df6872224592727fd7bd4c77a5a917ebc63654ca1690e8792f9"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"disabledFilePath\" is never used",
  "detailsInfo": "Reports symbols that are not used or not reachable from entry points.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/cps/DefaultPluginStatusProvider.kt",
      "language": "kotlin",
      "line": 25,
      "offset": 7,
      "length": 16,
      "code": {
        "startLine": 23,
        "length": 16,
        "offset": 78,
        "surroundingCode": "  val enabledFilePath: Path\n    get() = getEnabledFilePath(pluginsRoot)\n  val disabledFilePath: Path\n    get() = getDisabledFilePath(pluginsRoot)\n"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": "bd1b8512e3e8b08827df53d42b6c61f00a766caa00a65906d042c776904b23a4"
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "Reports visibility modifiers that match the default visibility of an element (`public` for most elements, `protected` for members that override a protected member).",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/commonMain/kotlin/xyz/mcxross/cohesive/mellow/icon/regular/Wallet.kt",
      "language": "kotlin",
      "line": 8,
      "offset": 1,
      "length": 6,
      "code": {
        "startLine": 6,
        "length": 6,
        "offset": 52,
        "surroundingCode": "import xyz.mcxross.cohesive.mellow.icon.mellowPath\n\npublic val Icons.Regular.Wallet: ImageVector\n  get() {\n    if (xyz.mcxross.cohesive.mellow.icon.regular._wallet != null) {"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.commonMain",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": "e14d2926aad9fa826713b8465ee1590dd073a709f062f008f11feb827786b8a1"
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Might be 'const'",
  "severity": "Moderate",
  "comment": "Might be 'const'",
  "detailsInfo": "Reports top-level `val` properties in objects that might be declared as `const` for better performance and Java interoperability.\n\n**Example:**\n\n\n      object A {\n          val foo = 1\n      }\n\nAfter the quick-fix is applied:\n\n\n      object A {\n          const val foo = 1\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/cps/ServiceProviderExtensionFinder.kt",
      "language": "kotlin",
      "line": 124,
      "offset": 9,
      "length": 19,
      "code": {
        "startLine": 122,
        "length": 19,
        "offset": 30,
        "surroundingCode": "  companion object {\n\n    val EXTENSIONS_RESOURCE: String = \"ServiceProviderExtensionStorage.EXTENSIONS_RESOURCE\"\n  }\n}"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "MayBeConstant"
  },
  "hash": "cb5942bafd3bf5db7c7bf0e241d96cea9c41d88cea7f0af2c93f28abaaa94ea7"
}]}