{"version":"3","listProblem":[{
  "tool": "Code Inspection",
  "category": "Probable bugs",
  "type": "Covariant 'equals()'",
  "severity": "High",
  "comment": "'equals' should take 'Any?' as its argument",
  "detailsInfo": "Reports `equals()` that takes an argument type other than `Any?` if the class does not have another `equals()` that takes `Any?` as its argument type.\n\n**Example:**\n\n\n      class Foo {\n          fun equals(other: Foo?): Boolean {\n              return true\n          }\n      }\n\nTo fix the problem create `equals()` method that takes an argument of type `Any?`.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/cps/PluginState.kt",
      "language": "kotlin",
      "line": 28,
      "offset": 7,
      "length": 6,
      "code": {
        "startLine": 26,
        "length": 6,
        "offset": 27,
        "surroundingCode": "  FAILED(\"FAILED\");\n\n  fun equals(status: String?): Boolean {\n    return if (status == null) false else this.status.equals(status, ignoreCase = true)\n  }"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "KotlinCovariantEquals"
  },
  "hash": "f608c092e87a5de8d0150f201f4bb1a2cff78c660e7280b8f2f28faef7cec877"
},{
  "tool": "Code Inspection",
  "category": "Migration",
  "type": "Usage of redundant or deprecated syntax or deprecated symbols",
  "severity": "High",
  "comment": "'Dialog(() -> Unit, DialogState = ..., Boolean = ..., String = ..., Painter? = ..., Boolean = ..., Boolean = ..., Boolean = ..., Boolean = ..., Boolean = ..., (KeyEvent) -> Boolean = ..., (KeyEvent) -> Boolean = ..., DialogWindowScope.() -> Unit): Unit' is deprecated. Replaced by DialogWindow",
  "detailsInfo": "Reports obsolete language features and unnecessarily verbose code constructs during the code cleanup operation (**Code \\| Code Cleanup** ).\n\n\nA quick-fix automatically replaces usages of obsolete language features or unnecessarily verbose code constructs with compact and up-to-date syntax.\n\n\nIt also replaces deprecated symbols with their proposed substitutions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/ui/impl/screen/StoreScreen.kt",
      "language": "kotlin",
      "line": 229,
      "offset": 40,
      "length": 6,
      "code": {
        "startLine": 227,
        "length": 6,
        "offset": 75,
        "surroundingCode": "\n          if (showInstallDialog) {\n            androidx.compose.ui.window.Dialog(\n              onCloseRequest = {},\n              resizable = false,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "KotlinDeprecation"
  },
  "hash": "1e395e0efaf999bab7121fd5439d3acd3a5b6a5f6fae20f99ffaaefca444b0ce"
},{
  "tool": "Code Inspection",
  "category": "Migration",
  "type": "Usage of redundant or deprecated syntax or deprecated symbols",
  "severity": "High",
  "comment": "Remove deprecated symbol import",
  "detailsInfo": "Reports obsolete language features and unnecessarily verbose code constructs during the code cleanup operation (**Code \\| Code Cleanup** ).\n\n\nA quick-fix automatically replaces usages of obsolete language features or unnecessarily verbose code constructs with compact and up-to-date syntax.\n\n\nIt also replaces deprecated symbols with their proposed substitutions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/designsystem/mellow/foundation/text/selection/TextSelectionMouseDetector.kt",
      "language": "kotlin",
      "line": 20,
      "offset": 1,
      "length": 58,
      "code": {
        "startLine": 18,
        "length": 58,
        "offset": 50,
        "surroundingCode": "\nimport androidx.compose.foundation.gestures.drag\nimport androidx.compose.foundation.gestures.forEachGesture\nimport androidx.compose.ui.geometry.Offset\nimport androidx.compose.ui.input.pointer.AwaitPointerEventScope"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "KotlinDeprecation"
  },
  "hash": "6a2481e9de29490b2871a757d3647ae79f189734c335515487e2ad00213bc85d"
},{
  "tool": "Code Inspection",
  "category": "Migration",
  "type": "Usage of redundant or deprecated syntax or deprecated symbols",
  "severity": "High",
  "comment": "'forEachGesture(suspend PointerInputScope.() -> Unit): Unit' is deprecated. Use awaitEachGesture instead. forEachGesture() can drop events between gestures.",
  "detailsInfo": "Reports obsolete language features and unnecessarily verbose code constructs during the code cleanup operation (**Code \\| Code Cleanup** ).\n\n\nA quick-fix automatically replaces usages of obsolete language features or unnecessarily verbose code constructs with compact and up-to-date syntax.\n\n\nIt also replaces deprecated symbols with their proposed substitutions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/designsystem/mellow/foundation/text/selection/TextSelectionMouseDetector.kt",
      "language": "kotlin",
      "line": 84,
      "offset": 3,
      "length": 14,
      "code": {
        "startLine": 82,
        "length": 14,
        "offset": 101,
        "surroundingCode": "\ninternal suspend fun PointerInputScope.mouseSelectionDetector(observer: MouseSelectionObserver) {\n  forEachGesture {\n    awaitPointerEventScope {\n      val clicksCounter = ClicksCounter(viewConfiguration)"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "KotlinDeprecation"
  },
  "hash": "795115ea6dd1f361836732b64d86e71b40a4346eb96bbf1c9bd8719ea9924bca"
},{
  "tool": "Code Inspection",
  "category": "Migration",
  "type": "Usage of redundant or deprecated syntax or deprecated symbols",
  "severity": "High",
  "comment": "'forEachGesture(suspend PointerInputScope.() -> Unit): Unit' is deprecated. Use awaitEachGesture instead. forEachGesture() can drop events between gestures.",
  "detailsInfo": "Reports obsolete language features and unnecessarily verbose code constructs during the code cleanup operation (**Code \\| Code Cleanup** ).\n\n\nA quick-fix automatically replaces usages of obsolete language features or unnecessarily verbose code constructs with compact and up-to-date syntax.\n\n\nIt also replaces deprecated symbols with their proposed substitutions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/designsystem/mellow/foundation/gestures/TapGestureDetector.kt",
      "language": "kotlin",
      "line": 208,
      "offset": 3,
      "length": 14,
      "code": {
        "startLine": 206,
        "length": 14,
        "offset": 53,
        "surroundingCode": ") {\n  val pressScope = PressGestureScopeImpl(this)\n  forEachGesture {\n    coroutineScope {\n      pressScope.reset()"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "KotlinDeprecation"
  },
  "hash": "d76bf996aa7a1ef7239acadcbd4ba78fb4aaa14ac38dc70986c48913f79e1c54"
},{
  "tool": "Code Inspection",
  "category": "Migration",
  "type": "Usage of redundant or deprecated syntax or deprecated symbols",
  "severity": "High",
  "comment": "'consumeDownChange(): Unit' is deprecated. Partial consumption has been deprecated. Use consume() instead.",
  "detailsInfo": "Reports obsolete language features and unnecessarily verbose code constructs during the code cleanup operation (**Code \\| Code Cleanup** ).\n\n\nA quick-fix automatically replaces usages of obsolete language features or unnecessarily verbose code constructs with compact and up-to-date syntax.\n\n\nIt also replaces deprecated symbols with their proposed substitutions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/designsystem/mellow/foundation/gestures/TapGestureDetector.kt",
      "language": "kotlin",
      "line": 223,
      "offset": 14,
      "length": 17,
      "code": {
        "startLine": 221,
        "length": 17,
        "offset": 83,
        "surroundingCode": "          pressScope.cancel() // tap-up was canceled\n        } else {\n          up.consumeDownChange()\n          pressScope.release()\n          onTap?.invoke(up.position)"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "KotlinDeprecation"
  },
  "hash": "1ab6f7b5328bfcda3264fcdaa6c3949df8a33161228aa1cf7abb11715b6a4619"
},{
  "tool": "Code Inspection",
  "category": "Migration",
  "type": "Usage of redundant or deprecated syntax or deprecated symbols",
  "severity": "High",
  "comment": "Remove deprecated symbol import",
  "detailsInfo": "Reports obsolete language features and unnecessarily verbose code constructs during the code cleanup operation (**Code \\| Code Cleanup** ).\n\n\nA quick-fix automatically replaces usages of obsolete language features or unnecessarily verbose code constructs with compact and up-to-date syntax.\n\n\nIt also replaces deprecated symbols with their proposed substitutions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/designsystem/mellow/foundation/gestures/TapGestureDetector.kt",
      "language": "kotlin",
      "line": 20,
      "offset": 1,
      "length": 58,
      "code": {
        "startLine": 18,
        "length": 58,
        "offset": 74,
        "surroundingCode": "\nimport androidx.compose.foundation.gestures.GestureCancellationException\nimport androidx.compose.foundation.gestures.forEachGesture\nimport androidx.compose.ui.geometry.Offset\nimport androidx.compose.ui.input.pointer.AwaitPointerEventScope"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "KotlinDeprecation"
  },
  "hash": "81c45c68c7c5b49274d0c3fd92306ee4db231723930be7efef9cf697833f2057"
},{
  "tool": "Code Inspection",
  "category": "Migration",
  "type": "Usage of redundant or deprecated syntax or deprecated symbols",
  "severity": "High",
  "comment": "Remove deprecated symbol import",
  "detailsInfo": "Reports obsolete language features and unnecessarily verbose code constructs during the code cleanup operation (**Code \\| Code Cleanup** ).\n\n\nA quick-fix automatically replaces usages of obsolete language features or unnecessarily verbose code constructs with compact and up-to-date syntax.\n\n\nIt also replaces deprecated symbols with their proposed substitutions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/designsystem/mellow/foundation/gestures/TapGestureDetector.kt",
      "language": "kotlin",
      "line": 31,
      "offset": 1,
      "length": 58,
      "code": {
        "startLine": 29,
        "length": 58,
        "offset": 122,
        "surroundingCode": "import androidx.compose.ui.input.pointer.changedToDownIgnoreConsumed\nimport androidx.compose.ui.input.pointer.changedToUp\nimport androidx.compose.ui.input.pointer.consumeAllChanges\nimport androidx.compose.ui.input.pointer.consumeDownChange\nimport androidx.compose.ui.input.pointer.isOutOfBounds"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "KotlinDeprecation"
  },
  "hash": "fe3beafd2be605cc1dece9613bab2ea6638c58c48ce6fc02bef11da1ee05dea5"
},{
  "tool": "Code Inspection",
  "category": "Migration",
  "type": "Usage of redundant or deprecated syntax or deprecated symbols",
  "severity": "High",
  "comment": "Remove deprecated symbol import",
  "detailsInfo": "Reports obsolete language features and unnecessarily verbose code constructs during the code cleanup operation (**Code \\| Code Cleanup** ).\n\n\nA quick-fix automatically replaces usages of obsolete language features or unnecessarily verbose code constructs with compact and up-to-date syntax.\n\n\nIt also replaces deprecated symbols with their proposed substitutions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/designsystem/mellow/foundation/gestures/TapGestureDetector.kt",
      "language": "kotlin",
      "line": 32,
      "offset": 1,
      "length": 58,
      "code": {
        "startLine": 30,
        "length": 58,
        "offset": 112,
        "surroundingCode": "import androidx.compose.ui.input.pointer.changedToUp\nimport androidx.compose.ui.input.pointer.consumeAllChanges\nimport androidx.compose.ui.input.pointer.consumeDownChange\nimport androidx.compose.ui.input.pointer.isOutOfBounds\nimport androidx.compose.ui.input.pointer.positionChangeConsumed"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "KotlinDeprecation"
  },
  "hash": "85c36402eb2eeebc224304210c1b4613828df6a851fa5ab5ae84b5ef1cefeaa7"
},{
  "tool": "Code Inspection",
  "category": "Migration",
  "type": "Usage of redundant or deprecated syntax or deprecated symbols",
  "severity": "High",
  "comment": "Remove deprecated symbol import",
  "detailsInfo": "Reports obsolete language features and unnecessarily verbose code constructs during the code cleanup operation (**Code \\| Code Cleanup** ).\n\n\nA quick-fix automatically replaces usages of obsolete language features or unnecessarily verbose code constructs with compact and up-to-date syntax.\n\n\nIt also replaces deprecated symbols with their proposed substitutions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/designsystem/mellow/foundation/gestures/TapGestureDetector.kt",
      "language": "kotlin",
      "line": 34,
      "offset": 1,
      "length": 63,
      "code": {
        "startLine": 32,
        "length": 63,
        "offset": 114,
        "surroundingCode": "import androidx.compose.ui.input.pointer.consumeDownChange\nimport androidx.compose.ui.input.pointer.isOutOfBounds\nimport androidx.compose.ui.input.pointer.positionChangeConsumed\nimport androidx.compose.ui.platform.ViewConfiguration\nimport androidx.compose.ui.unit.Density"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "KotlinDeprecation"
  },
  "hash": "63a3f8910a07fa7ed3d510489f78f1039defc51c5596a434fd7ee989542a9c3d"
},{
  "tool": "Code Inspection",
  "category": "Migration",
  "type": "Usage of redundant or deprecated syntax or deprecated symbols",
  "severity": "High",
  "comment": "'consumeAllChanges(): Unit' is deprecated. Use consume() instead",
  "detailsInfo": "Reports obsolete language features and unnecessarily verbose code constructs during the code cleanup operation (**Code \\| Code Cleanup** ).\n\n\nA quick-fix automatically replaces usages of obsolete language features or unnecessarily verbose code constructs with compact and up-to-date syntax.\n\n\nIt also replaces deprecated symbols with their proposed substitutions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/designsystem/mellow/foundation/gestures/TapGestureDetector.kt",
      "language": "kotlin",
      "line": 178,
      "offset": 36,
      "length": 17,
      "code": {
        "startLine": 176,
        "length": 17,
        "offset": 78,
        "surroundingCode": "  do {\n    val event = awaitPointerEvent()\n    event.changes.fastForEach { it.consumeAllChanges() }\n  } while (event.changes.fastAny { it.pressed })\n}"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "KotlinDeprecation"
  },
  "hash": "b2ab16f52fb22799d249a9bbdb2a6f07cec5ecc9b8718ee5c618fa7b03151c73"
},{
  "tool": "Code Inspection",
  "category": "Migration",
  "type": "Usage of redundant or deprecated syntax or deprecated symbols",
  "severity": "High",
  "comment": "'forEachGesture(suspend PointerInputScope.() -> Unit): Unit' is deprecated. Use awaitEachGesture instead. forEachGesture() can drop events between gestures.",
  "detailsInfo": "Reports obsolete language features and unnecessarily verbose code constructs during the code cleanup operation (**Code \\| Code Cleanup** ).\n\n\nA quick-fix automatically replaces usages of obsolete language features or unnecessarily verbose code constructs with compact and up-to-date syntax.\n\n\nIt also replaces deprecated symbols with their proposed substitutions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/designsystem/mellow/foundation/gestures/TapGestureDetector.kt",
      "language": "kotlin",
      "line": 95,
      "offset": 3,
      "length": 14,
      "code": {
        "startLine": 93,
        "length": 14,
        "offset": 68,
        "surroundingCode": "  val pressScope = PressGestureScopeImpl(this@detectTapGestures)\n\n  forEachGesture {\n    awaitPointerEventScope {\n      val down = awaitFirstDown()"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "KotlinDeprecation"
  },
  "hash": "dcadec73f51bffc9c0843d73178443cb0d8ce763a0e2053d6f01e6c0eaaf71d7"
},{
  "tool": "Code Inspection",
  "category": "Migration",
  "type": "Usage of redundant or deprecated syntax or deprecated symbols",
  "severity": "High",
  "comment": "'consumeDownChange(): Unit' is deprecated. Partial consumption has been deprecated. Use consume() instead.",
  "detailsInfo": "Reports obsolete language features and unnecessarily verbose code constructs during the code cleanup operation (**Code \\| Code Cleanup** ).\n\n\nA quick-fix automatically replaces usages of obsolete language features or unnecessarily verbose code constructs with compact and up-to-date syntax.\n\n\nIt also replaces deprecated symbols with their proposed substitutions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/designsystem/mellow/foundation/gestures/TapGestureDetector.kt",
      "language": "kotlin",
      "line": 98,
      "offset": 12,
      "length": 17,
      "code": {
        "startLine": 96,
        "length": 17,
        "offset": 74,
        "surroundingCode": "    awaitPointerEventScope {\n      val down = awaitFirstDown()\n      down.consumeDownChange()\n      pressScope.reset()\n      if (onPress !== NoPressGesture) launch {"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "KotlinDeprecation"
  },
  "hash": "495b4d6f138bb960981d73100abc2737cf13f5c00495d98482650b11bced9dce"
},{
  "tool": "Code Inspection",
  "category": "Migration",
  "type": "Usage of redundant or deprecated syntax or deprecated symbols",
  "severity": "High",
  "comment": "'consumeDownChange(): Unit' is deprecated. Partial consumption has been deprecated. Use consume() instead.",
  "detailsInfo": "Reports obsolete language features and unnecessarily verbose code constructs during the code cleanup operation (**Code \\| Code Cleanup** ).\n\n\nA quick-fix automatically replaces usages of obsolete language features or unnecessarily verbose code constructs with compact and up-to-date syntax.\n\n\nIt also replaces deprecated symbols with their proposed substitutions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/designsystem/mellow/foundation/gestures/TapGestureDetector.kt",
      "language": "kotlin",
      "line": 115,
      "offset": 22,
      "length": 17,
      "code": {
        "startLine": 113,
        "length": 17,
        "offset": 91,
        "surroundingCode": "          pressScope.cancel() // tap-up was canceled\n        } else {\n          upOrCancel.consumeDownChange()\n          pressScope.release()\n        }"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "KotlinDeprecation"
  },
  "hash": "5d580bd138c872881a6b0530cb7cc2e36c73b4ce3276ce2c041f6934d6efd37b"
},{
  "tool": "Code Inspection",
  "category": "Migration",
  "type": "Usage of redundant or deprecated syntax or deprecated symbols",
  "severity": "High",
  "comment": "'consumeDownChange(): Unit' is deprecated. Partial consumption has been deprecated. Use consume() instead.",
  "detailsInfo": "Reports obsolete language features and unnecessarily verbose code constructs during the code cleanup operation (**Code \\| Code Cleanup** ).\n\n\nA quick-fix automatically replaces usages of obsolete language features or unnecessarily verbose code constructs with compact and up-to-date syntax.\n\n\nIt also replaces deprecated symbols with their proposed substitutions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/designsystem/mellow/foundation/gestures/TapGestureDetector.kt",
      "language": "kotlin",
      "line": 146,
      "offset": 28,
      "length": 17,
      "code": {
        "startLine": 144,
        "length": 17,
        "offset": 124,
        "surroundingCode": "                val secondUp = waitForUpOrCancellation()\n                if (secondUp != null) {\n                  secondUp.consumeDownChange()\n                  pressScope.release()\n                  onDoubleTap(secondUp.position)"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "KotlinDeprecation"
  },
  "hash": "c90186ca8b02ae77fb184933682d042128bd3af2bdf7d5adce429f21183c4f7f"
},{
  "tool": "Code Inspection",
  "category": "Migration",
  "type": "Usage of redundant or deprecated syntax or deprecated symbols",
  "severity": "High",
  "comment": "'positionChangeConsumed(): Boolean' is deprecated. Partial consumption has been deprecated. Use isConsumed instead",
  "detailsInfo": "Reports obsolete language features and unnecessarily verbose code constructs during the code cleanup operation (**Code \\| Code Cleanup** ).\n\n\nA quick-fix automatically replaces usages of obsolete language features or unnecessarily verbose code constructs with compact and up-to-date syntax.\n\n\nIt also replaces deprecated symbols with their proposed substitutions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/designsystem/mellow/foundation/gestures/TapGestureDetector.kt",
      "language": "kotlin",
      "line": 275,
      "offset": 43,
      "length": 22,
      "code": {
        "startLine": 273,
        "length": 22,
        "offset": 192,
        "surroundingCode": "    // existing pointer event because it comes after the Main pass we checked above.\n    val consumeCheck = awaitPointerEvent(PointerEventPass.Final)\n    if (consumeCheck.changes.fastAny { it.positionChangeConsumed() }) {\n      return null\n    }"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "KotlinDeprecation"
  },
  "hash": "b013080af10a96c5b97337c82c185dfaaf8eea5330950fa04e3191fabd21e7ca"
},{
  "tool": "Code Inspection",
  "category": "Migration",
  "type": "Usage of redundant or deprecated syntax or deprecated symbols",
  "severity": "High",
  "comment": "Remove deprecated symbol import",
  "detailsInfo": "Reports obsolete language features and unnecessarily verbose code constructs during the code cleanup operation (**Code \\| Code Cleanup** ).\n\n\nA quick-fix automatically replaces usages of obsolete language features or unnecessarily verbose code constructs with compact and up-to-date syntax.\n\n\nIt also replaces deprecated symbols with their proposed substitutions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/designsystem/mellow/Mouse.kt",
      "language": "kotlin",
      "line": 8,
      "offset": 1,
      "length": 58,
      "code": {
        "startLine": 6,
        "length": 58,
        "offset": 111,
        "surroundingCode": "import androidx.compose.ui.input.pointer.PointerIcon\nimport androidx.compose.ui.input.pointer.pointerHoverIcon\nimport androidx.compose.ui.input.pointer.pointerMoveFilter\nimport java.awt.Cursor\n"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "KotlinDeprecation"
  },
  "hash": "f740336e5d17b0e7eb9ef6d9b635c0cf10efdcd151a853ddabec6618372e15fb"
},{
  "tool": "Code Inspection",
  "category": "Migration",
  "type": "Usage of redundant or deprecated syntax or deprecated symbols",
  "severity": "High",
  "comment": "'pointerMoveFilter((position: Offset) -> Boolean = ..., () -> Boolean = ..., () -> Boolean = ...): Modifier' is deprecated. Use onPointerEvent or hoverable",
  "detailsInfo": "Reports obsolete language features and unnecessarily verbose code constructs during the code cleanup operation (**Code \\| Code Cleanup** ).\n\n\nA quick-fix automatically replaces usages of obsolete language features or unnecessarily verbose code constructs with compact and up-to-date syntax.\n\n\nIt also replaces deprecated symbols with their proposed substitutions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/designsystem/mellow/Mouse.kt",
      "language": "kotlin",
      "line": 16,
      "offset": 20,
      "length": 17,
      "code": {
        "startLine": 14,
        "length": 17,
        "offset": 74,
        "surroundingCode": "  onExit: () -> Boolean,\n  onMove: (Offset) -> Boolean\n): Modifier = this.pointerMoveFilter(onEnter = onEnter, onExit = onExit, onMove = onMove)\n\nactual fun Modifier.cursorForHorizontalResize(): Modifier ="
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "KotlinDeprecation"
  },
  "hash": "34748f0d2761d537ece55dbb72a541af166ef406a122e79fe807b67a20cc3e11"
},{
  "tool": "Code Inspection",
  "category": "Migration",
  "type": "Usage of redundant or deprecated syntax or deprecated symbols",
  "severity": "High",
  "comment": "'Dialog(() -> Unit, DialogState = ..., Boolean = ..., String = ..., Painter? = ..., Boolean = ..., Boolean = ..., Boolean = ..., Boolean = ..., Boolean = ..., (KeyEvent) -> Boolean = ..., (KeyEvent) -> Boolean = ..., DialogWindowScope.() -> Unit): Unit' is deprecated. Replaced by DialogWindow",
  "detailsInfo": "Reports obsolete language features and unnecessarily verbose code constructs during the code cleanup operation (**Code \\| Code Cleanup** ).\n\n\nA quick-fix automatically replaces usages of obsolete language features or unnecessarily verbose code constructs with compact and up-to-date syntax.\n\n\nIt also replaces deprecated symbols with their proposed substitutions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/designsystem/mellow/Dialog.kt",
      "language": "kotlin",
      "line": 112,
      "offset": 3,
      "length": 6,
      "code": {
        "startLine": 110,
        "length": 6,
        "offset": 60,
        "surroundingCode": "\n  var isDialogOpen by remember { mutableStateOf(false) }\n  Dialog(\n    onCloseRequest = { isDialogOpen = false },\n    undecorated = true,"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "KotlinDeprecation"
  },
  "hash": "c5be11c1837ff875b66388ca962beeec08684af8147378881caf14667766fcfa"
},{
  "tool": "Code Inspection",
  "category": "Migration",
  "type": "Usage of redundant or deprecated syntax or deprecated symbols",
  "severity": "High",
  "comment": "'forEachGesture(suspend PointerInputScope.() -> Unit): Unit' is deprecated. Use awaitEachGesture instead. forEachGesture() can drop events between gestures.",
  "detailsInfo": "Reports obsolete language features and unnecessarily verbose code constructs during the code cleanup operation (**Code \\| Code Cleanup** ).\n\n\nA quick-fix automatically replaces usages of obsolete language features or unnecessarily verbose code constructs with compact and up-to-date syntax.\n\n\nIt also replaces deprecated symbols with their proposed substitutions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/designsystem/mellow/foundation/text/selection/SelectionManager.kt",
      "language": "kotlin",
      "line": 572,
      "offset": 5,
      "length": 14,
      "code": {
        "startLine": 570,
        "length": 14,
        "offset": 99,
        "surroundingCode": "   */\n  private suspend fun PointerInputScope.detectNonConsumingTap(onTap: (Offset) -> Unit) {\n    forEachGesture {\n      coroutineScope {\n        awaitPointerEventScope {"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "KotlinDeprecation"
  },
  "hash": "eec84b957121504957f4f400ad905129d706d2f030c4382593545ead48542279"
},{
  "tool": "Code Inspection",
  "category": "Migration",
  "type": "Usage of redundant or deprecated syntax or deprecated symbols",
  "severity": "High",
  "comment": "Remove deprecated symbol import",
  "detailsInfo": "Reports obsolete language features and unnecessarily verbose code constructs during the code cleanup operation (**Code \\| Code Cleanup** ).\n\n\nA quick-fix automatically replaces usages of obsolete language features or unnecessarily verbose code constructs with compact and up-to-date syntax.\n\n\nIt also replaces deprecated symbols with their proposed substitutions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/designsystem/mellow/foundation/text/selection/SelectionManager.kt",
      "language": "kotlin",
      "line": 20,
      "offset": 1,
      "length": 58,
      "code": {
        "startLine": 18,
        "length": 58,
        "offset": 46,
        "surroundingCode": "\nimport androidx.compose.foundation.focusable\nimport androidx.compose.foundation.gestures.forEachGesture\nimport androidx.compose.foundation.gestures.waitForUpOrCancellation\nimport androidx.compose.runtime.State"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "KotlinDeprecation"
  },
  "hash": "af8f011e92ddd9c997c48f344aef9f68320f17eb0d5b582ff1d1000ea1f83426"
},{
  "tool": "Code Inspection",
  "category": "Migration",
  "type": "Usage of redundant or deprecated syntax or deprecated symbols",
  "severity": "High",
  "comment": "Unnecessary non-null assertion (!!) on a non-null receiver of type PlatformDropTargetModifier",
  "detailsInfo": "Reports obsolete language features and unnecessarily verbose code constructs during the code cleanup operation (**Code \\| Code Cleanup** ).\n\n\nA quick-fix automatically replaces usages of obsolete language features or unnecessarily verbose code constructs with compact and up-to-date syntax.\n\n\nIt also replaces deprecated symbols with their proposed substitutions.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/src/desktopMain/kotlin/xyz/mcxross/cohesive/designsystem/mellow/WindowScaffold.kt",
      "language": "kotlin",
      "line": 45,
      "offset": 47,
      "length": 2,
      "code": {
        "startLine": 43,
        "length": 2,
        "offset": 103,
        "surroundingCode": "      Surface(\n        modifier = modifier.fillMaxSize()\n          .then(Local.LocalScreen.current.pdtm!!),\n        contentColor = contentColorFor(MaterialTheme.colors.surface),\n      ) {"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common.desktopMain",
    "inspectionName": "KotlinDeprecation"
  },
  "hash": "9e792023eb588e5d0b7c3e8a9db2c60a43286308a51b88c1abaced0aa92a54e1"
},{
  "tool": "Code Inspection",
  "category": "JVM languages",
  "type": "Unstable API Usage",
  "severity": "High",
  "comment": "'setApplicationId(java.lang.String)' is marked unstable with @Incubating",
  "detailsInfo": "Reports usages of an API marked with one of the annotations as unstable. Such an API may be changed or removed in future versions, breaking the code that uses it.\n\nThe annotations which are used to mark unstable APIs are shown in the list below.\n\nBy default, the inspection ignores usages of unstable APIs\nif their declarations are located in sources of the same project. In such cases it'll be possible to update the usages when you change APIs.\nHowever, it may be inconvenient if the project is big, so one can switch off the **Ignore API declared in this project** option to report\nthe usages of unstable APIs declared in both the project sources and libraries.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/android/build.gradle.kts",
      "language": "kotlin",
      "line": 26,
      "offset": 5,
      "length": 13,
      "code": {
        "startLine": 24,
        "length": 13,
        "offset": 40,
        "surroundingCode": "  compileSdk = 33\n  defaultConfig {\n    applicationId = \"xyz.mcxross.cohesive.android\"\n    minSdk = 24\n    targetSdk = 33"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.android",
    "inspectionName": "UnstableApiUsage"
  },
  "hash": "7371ed87e6cc4dd2b6073dd5fda5660e28f09278961767fba924a86a77f9e2c0"
},{
  "tool": "Code Inspection",
  "category": "JVM languages",
  "type": "Unstable API Usage",
  "severity": "High",
  "comment": "'setMinSdk(java.lang.Integer)' is marked unstable with @Incubating",
  "detailsInfo": "Reports usages of an API marked with one of the annotations as unstable. Such an API may be changed or removed in future versions, breaking the code that uses it.\n\nThe annotations which are used to mark unstable APIs are shown in the list below.\n\nBy default, the inspection ignores usages of unstable APIs\nif their declarations are located in sources of the same project. In such cases it'll be possible to update the usages when you change APIs.\nHowever, it may be inconvenient if the project is big, so one can switch off the **Ignore API declared in this project** option to report\nthe usages of unstable APIs declared in both the project sources and libraries.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/android/build.gradle.kts",
      "language": "kotlin",
      "line": 27,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 25,
        "length": 6,
        "offset": 73,
        "surroundingCode": "  defaultConfig {\n    applicationId = \"xyz.mcxross.cohesive.android\"\n    minSdk = 24\n    targetSdk = 33\n    versionCode = 1"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.android",
    "inspectionName": "UnstableApiUsage"
  },
  "hash": "1e01eb3770c9430931416de2eda8bf3faed8570a42ba7a7971a2cd32326ec2ba"
},{
  "tool": "Code Inspection",
  "category": "JVM languages",
  "type": "Unstable API Usage",
  "severity": "High",
  "comment": "'setTargetSdk(java.lang.Integer)' is marked unstable with @Incubating",
  "detailsInfo": "Reports usages of an API marked with one of the annotations as unstable. Such an API may be changed or removed in future versions, breaking the code that uses it.\n\nThe annotations which are used to mark unstable APIs are shown in the list below.\n\nBy default, the inspection ignores usages of unstable APIs\nif their declarations are located in sources of the same project. In such cases it'll be possible to update the usages when you change APIs.\nHowever, it may be inconvenient if the project is big, so one can switch off the **Ignore API declared in this project** option to report\nthe usages of unstable APIs declared in both the project sources and libraries.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/android/build.gradle.kts",
      "language": "kotlin",
      "line": 28,
      "offset": 5,
      "length": 9,
      "code": {
        "startLine": 26,
        "length": 9,
        "offset": 71,
        "surroundingCode": "    applicationId = \"xyz.mcxross.cohesive.android\"\n    minSdk = 24\n    targetSdk = 33\n    versionCode = 1\n    versionName = \"0.1.0-alpha\""
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.android",
    "inspectionName": "UnstableApiUsage"
  },
  "hash": "8485f767a22efc7eabdac7f57433fdb5b5be85244c8c76c3f476deeb81380885"
},{
  "tool": "Code Inspection",
  "category": "JVM languages",
  "type": "Unstable API Usage",
  "severity": "High",
  "comment": "'setVersionCode(java.lang.Integer)' is marked unstable with @Incubating",
  "detailsInfo": "Reports usages of an API marked with one of the annotations as unstable. Such an API may be changed or removed in future versions, breaking the code that uses it.\n\nThe annotations which are used to mark unstable APIs are shown in the list below.\n\nBy default, the inspection ignores usages of unstable APIs\nif their declarations are located in sources of the same project. In such cases it'll be possible to update the usages when you change APIs.\nHowever, it may be inconvenient if the project is big, so one can switch off the **Ignore API declared in this project** option to report\nthe usages of unstable APIs declared in both the project sources and libraries.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/android/build.gradle.kts",
      "language": "kotlin",
      "line": 29,
      "offset": 5,
      "length": 11,
      "code": {
        "startLine": 27,
        "length": 11,
        "offset": 39,
        "surroundingCode": "    minSdk = 24\n    targetSdk = 33\n    versionCode = 1\n    versionName = \"0.1.0-alpha\"\n  }"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.android",
    "inspectionName": "UnstableApiUsage"
  },
  "hash": "c10b9d31b69fb1402ae3f401a539c2cb1d799d1972528bf1655f8a78eae2fddc"
},{
  "tool": "Code Inspection",
  "category": "JVM languages",
  "type": "Unstable API Usage",
  "severity": "High",
  "comment": "'setVersionName(java.lang.String)' is marked unstable with @Incubating",
  "detailsInfo": "Reports usages of an API marked with one of the annotations as unstable. Such an API may be changed or removed in future versions, breaking the code that uses it.\n\nThe annotations which are used to mark unstable APIs are shown in the list below.\n\nBy default, the inspection ignores usages of unstable APIs\nif their declarations are located in sources of the same project. In such cases it'll be possible to update the usages when you change APIs.\nHowever, it may be inconvenient if the project is big, so one can switch off the **Ignore API declared in this project** option to report\nthe usages of unstable APIs declared in both the project sources and libraries.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/android/build.gradle.kts",
      "language": "kotlin",
      "line": 30,
      "offset": 5,
      "length": 11,
      "code": {
        "startLine": 28,
        "length": 11,
        "offset": 43,
        "surroundingCode": "    targetSdk = 33\n    versionCode = 1\n    versionName = \"0.1.0-alpha\"\n  }\n  compileOptions {"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.android",
    "inspectionName": "UnstableApiUsage"
  },
  "hash": "0adf0744eff37d6fa4ce6c2b36bdee15832a6503d258ce13e0d04cd41562ec3d"
},{
  "tool": "Code Inspection",
  "category": "JVM languages",
  "type": "Unstable API Usage",
  "severity": "High",
  "comment": "'setSourceCompatibility(org.gradle.api.JavaVersion)' is marked unstable with @Incubating",
  "detailsInfo": "Reports usages of an API marked with one of the annotations as unstable. Such an API may be changed or removed in future versions, breaking the code that uses it.\n\nThe annotations which are used to mark unstable APIs are shown in the list below.\n\nBy default, the inspection ignores usages of unstable APIs\nif their declarations are located in sources of the same project. In such cases it'll be possible to update the usages when you change APIs.\nHowever, it may be inconvenient if the project is big, so one can switch off the **Ignore API declared in this project** option to report\nthe usages of unstable APIs declared in both the project sources and libraries.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/android/build.gradle.kts",
      "language": "kotlin",
      "line": 33,
      "offset": 5,
      "length": 19,
      "code": {
        "startLine": 31,
        "length": 19,
        "offset": 27,
        "surroundingCode": "  }\n  compileOptions {\n    sourceCompatibility = JavaVersion.VERSION_1_8\n    targetCompatibility = JavaVersion.VERSION_1_8\n  }"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.android",
    "inspectionName": "UnstableApiUsage"
  },
  "hash": "79f8cc3d821c17f6bf31de70a18909117bab7bab3d82f65978166517ac80f6de"
},{
  "tool": "Code Inspection",
  "category": "JVM languages",
  "type": "Unstable API Usage",
  "severity": "High",
  "comment": "'setTargetCompatibility(org.gradle.api.JavaVersion)' is marked unstable with @Incubating",
  "detailsInfo": "Reports usages of an API marked with one of the annotations as unstable. Such an API may be changed or removed in future versions, breaking the code that uses it.\n\nThe annotations which are used to mark unstable APIs are shown in the list below.\n\nBy default, the inspection ignores usages of unstable APIs\nif their declarations are located in sources of the same project. In such cases it'll be possible to update the usages when you change APIs.\nHowever, it may be inconvenient if the project is big, so one can switch off the **Ignore API declared in this project** option to report\nthe usages of unstable APIs declared in both the project sources and libraries.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/android/build.gradle.kts",
      "language": "kotlin",
      "line": 34,
      "offset": 5,
      "length": 19,
      "code": {
        "startLine": 32,
        "length": 19,
        "offset": 73,
        "surroundingCode": "  compileOptions {\n    sourceCompatibility = JavaVersion.VERSION_1_8\n    targetCompatibility = JavaVersion.VERSION_1_8\n  }\n  buildTypes { getByName(\"release\") { isMinifyEnabled = false } }"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.android",
    "inspectionName": "UnstableApiUsage"
  },
  "hash": "4604706a2eadc6d646fb63c554a056d234a7834f261f96e9c7fdbd16c9cffd62"
},{
  "tool": "Code Inspection",
  "category": "JVM languages",
  "type": "Unstable API Usage",
  "severity": "High",
  "comment": "'setMinifyEnabled(boolean)' is marked unstable with @Incubating",
  "detailsInfo": "Reports usages of an API marked with one of the annotations as unstable. Such an API may be changed or removed in future versions, breaking the code that uses it.\n\nThe annotations which are used to mark unstable APIs are shown in the list below.\n\nBy default, the inspection ignores usages of unstable APIs\nif their declarations are located in sources of the same project. In such cases it'll be possible to update the usages when you change APIs.\nHowever, it may be inconvenient if the project is big, so one can switch off the **Ignore API declared in this project** option to report\nthe usages of unstable APIs declared in both the project sources and libraries.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/android/build.gradle.kts",
      "language": "kotlin",
      "line": 36,
      "offset": 39,
      "length": 15,
      "code": {
        "startLine": 34,
        "length": 15,
        "offset": 92,
        "surroundingCode": "    targetCompatibility = JavaVersion.VERSION_1_8\n  }\n  buildTypes { getByName(\"release\") { isMinifyEnabled = false } }\n}\n"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.android",
    "inspectionName": "UnstableApiUsage"
  },
  "hash": "86d020c2bced7f4aec45cff8b67ff8c53bed8424a066be316a6f943f15accd9e"
},{
  "tool": "Code Inspection",
  "category": "JVM languages",
  "type": "Unstable API Usage",
  "severity": "High",
  "comment": "'setMinSdk(java.lang.Integer)' is marked unstable with @Incubating",
  "detailsInfo": "Reports usages of an API marked with one of the annotations as unstable. Such an API may be changed or removed in future versions, breaking the code that uses it.\n\nThe annotations which are used to mark unstable APIs are shown in the list below.\n\nBy default, the inspection ignores usages of unstable APIs\nif their declarations are located in sources of the same project. In such cases it'll be possible to update the usages when you change APIs.\nHowever, it may be inconvenient if the project is big, so one can switch off the **Ignore API declared in this project** option to report\nthe usages of unstable APIs declared in both the project sources and libraries.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/build.gradle.kts",
      "language": "kotlin",
      "line": 87,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 85,
        "length": 6,
        "offset": 40,
        "surroundingCode": "  compileSdk = 33\n  defaultConfig {\n    minSdk = 24\n    targetSdk = 33\n  }"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common",
    "inspectionName": "UnstableApiUsage"
  },
  "hash": "0eec0fd31b95bfc08eff1a6d77f54f5e3bd8731fa39d57d125ff9da9bba64d51"
},{
  "tool": "Code Inspection",
  "category": "JVM languages",
  "type": "Unstable API Usage",
  "severity": "High",
  "comment": "'setTargetSdk(java.lang.Integer)' is marked unstable with @Incubating",
  "detailsInfo": "Reports usages of an API marked with one of the annotations as unstable. Such an API may be changed or removed in future versions, breaking the code that uses it.\n\nThe annotations which are used to mark unstable APIs are shown in the list below.\n\nBy default, the inspection ignores usages of unstable APIs\nif their declarations are located in sources of the same project. In such cases it'll be possible to update the usages when you change APIs.\nHowever, it may be inconvenient if the project is big, so one can switch off the **Ignore API declared in this project** option to report\nthe usages of unstable APIs declared in both the project sources and libraries.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/build.gradle.kts",
      "language": "kotlin",
      "line": 88,
      "offset": 5,
      "length": 9,
      "code": {
        "startLine": 86,
        "length": 9,
        "offset": 38,
        "surroundingCode": "  defaultConfig {\n    minSdk = 24\n    targetSdk = 33\n  }\n  compileOptions {"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common",
    "inspectionName": "UnstableApiUsage"
  },
  "hash": "6873b8ba4be26a4e3c5d071f3dc9a12773bd4240ddad642d1912765687b29f87"
},{
  "tool": "Code Inspection",
  "category": "JVM languages",
  "type": "Unstable API Usage",
  "severity": "High",
  "comment": "'setSourceCompatibility(org.gradle.api.JavaVersion)' is marked unstable with @Incubating",
  "detailsInfo": "Reports usages of an API marked with one of the annotations as unstable. Such an API may be changed or removed in future versions, breaking the code that uses it.\n\nThe annotations which are used to mark unstable APIs are shown in the list below.\n\nBy default, the inspection ignores usages of unstable APIs\nif their declarations are located in sources of the same project. In such cases it'll be possible to update the usages when you change APIs.\nHowever, it may be inconvenient if the project is big, so one can switch off the **Ignore API declared in this project** option to report\nthe usages of unstable APIs declared in both the project sources and libraries.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/build.gradle.kts",
      "language": "kotlin",
      "line": 91,
      "offset": 5,
      "length": 19,
      "code": {
        "startLine": 89,
        "length": 19,
        "offset": 27,
        "surroundingCode": "  }\n  compileOptions {\n    sourceCompatibility = JavaVersion.VERSION_1_8\n    targetCompatibility = JavaVersion.VERSION_1_8\n  }"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common",
    "inspectionName": "UnstableApiUsage"
  },
  "hash": "87bc3780bbca3621a8ba15fdd1496ae6d89771f8a22d45df6aa5a853c2edfaa3"
},{
  "tool": "Code Inspection",
  "category": "JVM languages",
  "type": "Unstable API Usage",
  "severity": "High",
  "comment": "'setTargetCompatibility(org.gradle.api.JavaVersion)' is marked unstable with @Incubating",
  "detailsInfo": "Reports usages of an API marked with one of the annotations as unstable. Such an API may be changed or removed in future versions, breaking the code that uses it.\n\nThe annotations which are used to mark unstable APIs are shown in the list below.\n\nBy default, the inspection ignores usages of unstable APIs\nif their declarations are located in sources of the same project. In such cases it'll be possible to update the usages when you change APIs.\nHowever, it may be inconvenient if the project is big, so one can switch off the **Ignore API declared in this project** option to report\nthe usages of unstable APIs declared in both the project sources and libraries.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/build.gradle.kts",
      "language": "kotlin",
      "line": 92,
      "offset": 5,
      "length": 19,
      "code": {
        "startLine": 90,
        "length": 19,
        "offset": 73,
        "surroundingCode": "  compileOptions {\n    sourceCompatibility = JavaVersion.VERSION_1_8\n    targetCompatibility = JavaVersion.VERSION_1_8\n  }\n  sourceSets {"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common",
    "inspectionName": "UnstableApiUsage"
  },
  "hash": "cc9f1ca4a2e04c733450bb8f4eb004aebbe1fb9463e6c196da3a9acad198a4e7"
},{
  "tool": "Code Inspection",
  "category": "JVM languages",
  "type": "Unstable API Usage",
  "severity": "High",
  "comment": "'sourceSets(kotlin.jvm.functions.Function1,kotlin.Unit>)' is marked unstable with @Incubating",
  "detailsInfo": "Reports usages of an API marked with one of the annotations as unstable. Such an API may be changed or removed in future versions, breaking the code that uses it.\n\nThe annotations which are used to mark unstable APIs are shown in the list below.\n\nBy default, the inspection ignores usages of unstable APIs\nif their declarations are located in sources of the same project. In such cases it'll be possible to update the usages when you change APIs.\nHowever, it may be inconvenient if the project is big, so one can switch off the **Ignore API declared in this project** option to report\nthe usages of unstable APIs declared in both the project sources and libraries.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/build.gradle.kts",
      "language": "kotlin",
      "line": 94,
      "offset": 3,
      "length": 10,
      "code": {
        "startLine": 92,
        "length": 10,
        "offset": 56,
        "surroundingCode": "    targetCompatibility = JavaVersion.VERSION_1_8\n  }\n  sourceSets {\n    named(\"main\") {\n      manifest.srcFile(\"src/androidMain/AndroidManifest.xml\")"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common",
    "inspectionName": "UnstableApiUsage"
  },
  "hash": "842fbb9c034671390fc48bd6e4e02d09d1fab53b1abd95de8fab6cd05814ec0a"
},{
  "tool": "Code Inspection",
  "category": "JVM languages",
  "type": "Unstable API Usage",
  "severity": "High",
  "comment": "'getManifest()' is declared in unstable 'com.android.build.api.dsl.AndroidSourceSet' marked with @Incubating",
  "detailsInfo": "Reports usages of an API marked with one of the annotations as unstable. Such an API may be changed or removed in future versions, breaking the code that uses it.\n\nThe annotations which are used to mark unstable APIs are shown in the list below.\n\nBy default, the inspection ignores usages of unstable APIs\nif their declarations are located in sources of the same project. In such cases it'll be possible to update the usages when you change APIs.\nHowever, it may be inconvenient if the project is big, so one can switch off the **Ignore API declared in this project** option to report\nthe usages of unstable APIs declared in both the project sources and libraries.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/build.gradle.kts",
      "language": "kotlin",
      "line": 96,
      "offset": 7,
      "length": 8,
      "code": {
        "startLine": 94,
        "length": 8,
        "offset": 41,
        "surroundingCode": "  sourceSets {\n    named(\"main\") {\n      manifest.srcFile(\"src/androidMain/AndroidManifest.xml\")\n      res.srcDirs(\"src/androidMain/res\", \"src/commonMain/resources\")\n    }"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common",
    "inspectionName": "UnstableApiUsage"
  },
  "hash": "72bbbf2ca4758e7a3b59d8be0f2314ea38dd368011bd77d6df81c3e4a176f97b"
},{
  "tool": "Code Inspection",
  "category": "JVM languages",
  "type": "Unstable API Usage",
  "severity": "High",
  "comment": "'srcFile(java.lang.Object)' is declared in unstable 'com.android.build.api.dsl.AndroidSourceFile' marked with @Incubating",
  "detailsInfo": "Reports usages of an API marked with one of the annotations as unstable. Such an API may be changed or removed in future versions, breaking the code that uses it.\n\nThe annotations which are used to mark unstable APIs are shown in the list below.\n\nBy default, the inspection ignores usages of unstable APIs\nif their declarations are located in sources of the same project. In such cases it'll be possible to update the usages when you change APIs.\nHowever, it may be inconvenient if the project is big, so one can switch off the **Ignore API declared in this project** option to report\nthe usages of unstable APIs declared in both the project sources and libraries.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/build.gradle.kts",
      "language": "kotlin",
      "line": 96,
      "offset": 16,
      "length": 7,
      "code": {
        "startLine": 94,
        "length": 7,
        "offset": 50,
        "surroundingCode": "  sourceSets {\n    named(\"main\") {\n      manifest.srcFile(\"src/androidMain/AndroidManifest.xml\")\n      res.srcDirs(\"src/androidMain/res\", \"src/commonMain/resources\")\n    }"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common",
    "inspectionName": "UnstableApiUsage"
  },
  "hash": "a68fb021f4683f0fa8ecb1e1b46c03e03806bb00383c8f594c755192e733be5c"
},{
  "tool": "Code Inspection",
  "category": "JVM languages",
  "type": "Unstable API Usage",
  "severity": "High",
  "comment": "'getRes()' is declared in unstable 'com.android.build.api.dsl.AndroidSourceSet' marked with @Incubating",
  "detailsInfo": "Reports usages of an API marked with one of the annotations as unstable. Such an API may be changed or removed in future versions, breaking the code that uses it.\n\nThe annotations which are used to mark unstable APIs are shown in the list below.\n\nBy default, the inspection ignores usages of unstable APIs\nif their declarations are located in sources of the same project. In such cases it'll be possible to update the usages when you change APIs.\nHowever, it may be inconvenient if the project is big, so one can switch off the **Ignore API declared in this project** option to report\nthe usages of unstable APIs declared in both the project sources and libraries.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/build.gradle.kts",
      "language": "kotlin",
      "line": 97,
      "offset": 7,
      "length": 3,
      "code": {
        "startLine": 95,
        "length": 3,
        "offset": 88,
        "surroundingCode": "    named(\"main\") {\n      manifest.srcFile(\"src/androidMain/AndroidManifest.xml\")\n      res.srcDirs(\"src/androidMain/res\", \"src/commonMain/resources\")\n    }\n  }"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common",
    "inspectionName": "UnstableApiUsage"
  },
  "hash": "c6513f4ecf2f31d796145806346b3c82844538c88a6dade4115667ff88b4db6e"
},{
  "tool": "Code Inspection",
  "category": "JVM languages",
  "type": "Unstable API Usage",
  "severity": "High",
  "comment": "'srcDirs(java.lang.Object...)' is declared in unstable 'com.android.build.api.dsl.AndroidSourceDirectorySet' marked with @Incubating",
  "detailsInfo": "Reports usages of an API marked with one of the annotations as unstable. Such an API may be changed or removed in future versions, breaking the code that uses it.\n\nThe annotations which are used to mark unstable APIs are shown in the list below.\n\nBy default, the inspection ignores usages of unstable APIs\nif their declarations are located in sources of the same project. In such cases it'll be possible to update the usages when you change APIs.\nHowever, it may be inconvenient if the project is big, so one can switch off the **Ignore API declared in this project** option to report\nthe usages of unstable APIs declared in both the project sources and libraries.",
  "sources": [
    {
      "type": "file",
      "path": "cmpe/common/build.gradle.kts",
      "language": "kotlin",
      "line": 97,
      "offset": 11,
      "length": 7,
      "code": {
        "startLine": 95,
        "length": 7,
        "offset": 92,
        "surroundingCode": "    named(\"main\") {\n      manifest.srcFile(\"src/androidMain/AndroidManifest.xml\")\n      res.srcDirs(\"src/androidMain/res\", \"src/commonMain/resources\")\n    }\n  }"
      }
    }
  ],
  "attributes": {
    "module": "cohesive.cmpe.common",
    "inspectionName": "UnstableApiUsage"
  },
  "hash": "c847b7a22b6deaaa662bd677a5de089ff40b099c15f6e8e5767da691c1b5ac42"
}]}